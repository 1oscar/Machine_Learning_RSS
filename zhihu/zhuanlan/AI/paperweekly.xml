<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PaperWeekly - 知乎专栏</title><link>https://zhuanlan.zhihu.com/paperweekly</link><description>每周会分享N篇nlp领域好玩的paper，旨在用最少的话说明白paper的贡献。同时也运营一个公众号，PaperWeekly，欢迎大家关注。</description><lastBuildDate>Tue, 30 Aug 2016 20:16:27 GMT</lastBuildDate><generator>Ricky</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>cs.CL weekly 2016.08.22-2016.08.26</title><link>https://zhuanlan.zhihu.com/p/22184043</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/c3c8fdc44ec223b1d89e130afa476975_r.png"&gt;&lt;/p&gt;&lt;h1&gt;简介&lt;/h1&gt;&lt;p&gt;这个栏目是将一周内arxiv cs.CL刷出的好文进行一个简单的汇总，并配有一句话总结，旨在帮助大家过滤掉cs.CL上的水文，并且为PaperWeekly团队选文提供高质量paper。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://120.52.73.78/arxiv.org/pdf/1608.05852v1.pdf" data-editable="true" data-title="Learning Word Embeddings from Intrinsic and Extrinsic Views" class=""&gt;Learning Word Embeddings from Intrinsic and Extrinsic Views&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文提出了一种依靠intrinsic (descriptive) and extrinsic (contextual) information来学习词向量的方法，有效解决了传统方法中对低频词学习存在的问题。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://120.52.73.78/arxiv.org/pdf/1608.06043v1.pdf" data-editable="true" data-title="Context Gates for Neural Machine Translation"&gt;Context Gates for Neural Machine Translation&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文提出了一种context gate来动态地控制机器翻译中source、target context对word generation的影响，实验证明在BLEU指标下比attention-based的方法提高了2.3。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://120.52.73.80/arxiv.org/pdf/1608.05777v1.pdf" data-editable="true" data-title="Topic Sensitive Neural Headline Generation"&gt;Topic Sensitive Neural Headline Generation&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文针对传统模型中忽略topical similarities和differences of documents的问题，提出了一种新方案，先将documents按照topics分类，每一类中的pattern比较接近，然后再做sentence level summary，得到了更好的效果。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://120.52.73.77/arxiv.org/pdf/1608.06378v1.pdf" data-editable="true" data-title="Towards Machine Comprehension of Spoken Content: Initial TOEFL Listening Comprehension Test by Machine"&gt;Towards Machine Comprehension of Spoken Content: Initial TOEFL Listening Comprehension Test by Machine&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文以托福听力题作为数据集，尝试对多媒体信息进行理解。听力问题是听完一段话，理解之后，进行4选1，而不是之前常见的cloze-style理解任务。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://120.52.73.79/arxiv.org/pdf/1608.07076v1.pdf" data-editable="true" data-title="A Context-aware Natural Language Generator for Dialogue Systems"&gt;A Context-aware Natural Language Generator for Dialogue Systems&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本文的模型是一种端到端的模型，根据上下文和用户说话的方式来生成对话。是一篇SIGDIAL 2016 short paper。配套的代码已发布于&lt;a href="https://github.com/UFAL-DSG/tgen" data-editable="true" data-title="Github"&gt;Github&lt;/a&gt;&lt;/p&gt;&lt;h1&gt;About&lt;/h1&gt;&lt;p&gt;对NLP高质量原创内容和讨论感兴趣的你，赶快来关注：&lt;/p&gt;&lt;p&gt;1、PaperWeekly&lt;a href="http://weibo.com/2678093863/" data-editable="true" data-title="官方微博"&gt;官方微博&lt;/a&gt;&lt;/p&gt;&lt;p&gt;2、PaperWeekly官方微信&lt;/p&gt;&lt;p&gt;3、PaperWeekly&lt;a href="https://zhuanlan.zhihu.com/paperweekly" data-editable="true" data-title="知乎专栏"&gt;知乎专栏&lt;/a&gt;&lt;/p&gt;&lt;p&gt;4、PaperWeekly微信交流群（+微信zhangjun168305入群）&lt;/p&gt;</description><author>张俊</author><pubDate>Fri, 26 Aug 2016 09:52:06 GMT</pubDate></item><item><title>从api.ai工作原理来看构建简单场景chatbot的一般方法</title><link>https://zhuanlan.zhihu.com/p/22139158</link><description>&lt;h1&gt;引&lt;/h1&gt;&lt;p&gt;chatbot无疑是当前非常火的一个研究领域和产品方向，简单地可以分为两类，开放域bot和封闭域bot，开放域bot倾向于解决所有的事情，而封闭域bot倾向于解决某一个细分领域中的事情，旨在用AI技术提高效率，提高生产力。现阶段的开放域bot我个人感觉更像是多个常用封闭域bot的叠加，当用户发起一个请求，系统会判断出属于哪个细分领域，然后转到相应的程序中去执行并给出反馈，顺着这个逻辑来看，研究简单场景下的chatbot是个重要的基础工作，这类研究或者产品的质量直接决定了复杂场景或者开放域bot的质量。当然逗乐型的bot并不属于本文讨论的范围。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/d35833c83746938c0418be1102f05222.png" data-rawwidth="715" data-rawheight="487"&gt;图片来自paper &lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/06/williams2016dstc_overview-1.pdf" data-editable="true" data-title="The Dialog State Tracking Challenge Series- A Review" class=""&gt;The Dialog State Tracking Challenge Series- A Review&lt;/a&gt;&lt;/p&gt;&lt;p&gt;chatbot是场交互革命，也是一个多技术融合的平台。上图给出了构建一个chatbot需要具备的组件，简单地说chatbot = NLU(Natural Language Understanding) + NLG(Natural Language Generation).(本文只关注NLP相关的技术，对语音识别并无讨论)&lt;/p&gt;&lt;p&gt;对于封闭域的chatbot，NLU的工作就是DST(Dialog State Tracker)，用户给出输入之后，系统可以给出下面的形式作为state：&lt;/p&gt;&lt;p&gt;Act(Slot=Value)&lt;/p&gt;&lt;p&gt;Act表示用户行为的类型，比如请求、查询、打招呼等等；Slot表示用户输入中包含的某种Act下的Entity，比如查询酒店的位置、价格这些实体；Value是指Slot中Entity对应的值，比如位置在北边，价格在500-800之间等等。每一句话中可能包括多个Act-Slot-Value对，chatbot需要做的事情就是准确地识别出Act，并且抽取出相应的Slot和Value。&lt;/p&gt;&lt;p&gt;紧接着是NLG的部分，前几天在&lt;a href="http://rsarxiv.github.io/2016/08/16/PaperWeekly-%E7%AC%AC%E4%BA%8C%E6%9C%9F/" data-editable="true" data-title="PaperWeekly第二期"&gt;PaperWeekly第二期&lt;/a&gt;中分享了三篇paper，其中两篇正是研究基于DST的NLG问题。&lt;/p&gt;&lt;p&gt;本文首先从&lt;a href="http://rsarxiv.github.io/2016/08/21/%E4%BB%8Eapi-ai%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E6%9D%A5%E7%9C%8B%E6%9E%84%E5%BB%BA%E7%AE%80%E5%8D%95%E5%9C%BA%E6%99%AFchatbot%E7%9A%84%E4%B8%80%E8%88%AC%E6%96%B9%E6%B3%95/api.ai" data-editable="true" data-title="api.ai"&gt;api.ai&lt;/a&gt;这家企业提供的服务说起，通过研究其提供的封闭域bot构建技术，来提炼构建简单场景chatbot的一般方法，为构建复杂场景或者找出现有chatbot存在的技术问题和面临的技术难点打下基础。&lt;/p&gt;&lt;h1&gt;api.ai&lt;/h1&gt;&lt;h2&gt;api.ai公司介绍&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;Api.ai provides developers and companies with the advanced tools they need to build conversational user interfaces for apps and hardware devices.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这家公司是一家典型的B2D公司，提供了一些工具帮助开发者轻松地开发一款bot，并且可以轻松地发布到各种message平台上。商业模式也非常简单，免费用户有一定次数的调用权限，需要大量调用的话，则付费购买，不同的权限有不同的价格，该公司也提供高级定制化服务。&lt;/p&gt;&lt;p&gt;api.ai公司成立于2010年（数据来自&lt;a href="https://www.crunchbase.com/organization/api-ai#/entity" data-editable="true" data-title="CrunchBase"&gt;CrunchBase&lt;/a&gt;），其早期业务不清楚，但可以从提供的服务中推断出早期攒了大量的用户数据，而且涉及的领域非常多，比如：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/822f16a29b4bc7fc5b0ced5ca1babe24.png" data-rawwidth="803" data-rawheight="716"&gt;&lt;/p&gt;&lt;p&gt;每个领域都有一个知识库，如果你要开发某个常用领域内的chatbot，那么这个知识库将会非常有用。&lt;/p&gt;&lt;h2&gt;重要概念和工作原理&lt;/h2&gt;&lt;h3&gt;重要概念&lt;/h3&gt;&lt;p&gt;1、Agents。这个是一个对外接口，与其他应用程序或你的app进行整合的部分。如下图：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/862ce5730fccea058b464f052db430da.png" data-rawwidth="712" data-rawheight="180"&gt;&lt;/p&gt;&lt;p&gt;2、Entities。这里的实体和引言中提到的Slot类似，是指某个特定领域内的实体，是一类东西的抽象概括，比如HotelName这一实体，对应着很多的酒店名字，凯宾斯基、如家等等。有Entity，就一定有value，chatbot中重要的一步正是从user input中抽取出对应预先设定好entity的value，是一个典型的Named Entity Recognition任务。&lt;/p&gt;&lt;p&gt;这里经典的NER任务是识别出user input中的person、time、place等等几个基本元素，api.ai将这些常见的entity定义为system级的，即默认提供了训练好的识别器，当然不仅仅限于这几类基本的；而特定领域知识库的重要作用也正是在于识别该领域内的entity。除了system level的NER之外，需要developer自定义一些entity，比如菜名，而且要给定具体的菜名和相似的表达作为samples进行训练。&lt;/p&gt;&lt;p&gt;3、Intents。这个相当于是从user input到chatbot执行某个action之间的一个映射关系，用户输入一句话之后，chatbot就可以理解其意图，是在打招呼，还是查询，还是做些别的事情。这部分api.ai提供了训练器，但是需要developer定义一些标注好的examples，标注的形式如下：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/31c5390934afe103b1f780fca0bf0e37.png" data-rawwidth="1466" data-rawheight="1160"&gt;&lt;/p&gt;&lt;p&gt;这里用户输入是book a ticket to Los Angeles on Monday，所谓标注包括两个level，一个是entity标注，一个是intent标注，前一个是为了训练NER工具，后一个是为了识别intent。这里因为LA是地名，Monday是时间，所以都会被api.ai的系统自动标注出来。&lt;/p&gt;&lt;p&gt;4、Actions。这个是由intents进行trigger的，actions就和引言中的Act类似，是一个具体的动作，比如说查询，但执行动作的时候一般都要带上具体的参数value，用户输入：“三里屯最近的阿迪达斯店在什么位置？”，chatbot首先会提取出place-&amp;gt;三里屯，query-&amp;gt;阿迪达斯店，然后转换为json丢给后台的查询服务，查询到结果后给出答案。这里的value抽取其实就是第二个概念提到的entity value。&lt;/p&gt;&lt;p&gt;5、Contexts。上下文是一个非常重要但却解决不是很好的点，api.ai提供的方式是自定义一些context condition，当condition满足时，自动trigger出context关联内容template，然后filling slots，生成response。&lt;/p&gt;&lt;h3&gt;工作原理&lt;/h3&gt;&lt;p&gt;以RSarXiv chatbot为例，简单介绍下工作原理。（注：RSarXiv是我之前写的一个arxiv paper推荐系统）&lt;/p&gt;&lt;p&gt;step 1 自定义Entity，这里我定义了两个entities，一个是keywords和subject。keywords是为search功能提供value，而subject是为update new papers功能提供value。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/278517664dda186155dcd5f359ff5ff5.png" data-rawwidth="633" data-rawheight="217"&gt;定义好subject entity之后，我给出了几个examples，同时也包括其synonyms，keywords entity类似。&lt;/p&gt;&lt;p&gt;step 2 自定义Intents，这里我定义了两个Intents，分别是update和search。下图是update的examples，是我自定义的几个例子。api.ai会根据我定义好的entity进行自动标注，比如cs.CL，today是系统默认的entity所以也进行了自动标注。自动标注是为了后台的机器学习算法对标注好的examples进行学习，以提高chatbot的NLU准确率。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/4d0f72e49ec1fb1aa681547effdbf533.png" data-rawwidth="639" data-rawheight="375"&gt;&lt;/p&gt;&lt;p&gt;接下来，我需要定义下Actions，如下图：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/73d4d50e3bf5d5b45c8702e9b180783f.png" data-rawwidth="637" data-rawheight="321"&gt;Action被称为update，必须包含的参数是subject，也就是我们上面讲到的一个entity，date参数并不是必须的。所以，这里如果用户的input被识别出是update intents的话，就必须包括subject参数，否则chatbot会trigger一个response，类似“请用户输入subject”这样的话。&lt;/p&gt;&lt;p&gt;step 3 简单测试，在界面的右侧有一个console，用来测试当前chatbot的效果，我输入update cs.CL，得到下面的效果：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/2b06d3f59031301dafb0a8766f3d636c.png" data-rawwidth="337" data-rawheight="622"&gt;chatbot识别出Intent是Update，Action是update，Parameter是date和subject，并且subject的值是cs.CL，下面的Show JSON是api.ai为developer生成的，用来与developer自己的web service进行数据交换。&lt;/p&gt;&lt;p&gt;step 4 训练。训练包括两个部分，一是训练NER，二是训练Intent Classification。训练器是api.ai提供的，但是标注数据是developer自己提供的，当然训练数据越多，标注越准，分类器的准确率就越高，chatbot的NLU准确率越高。至于训练方法，docs中没有细说，我简单猜测一下，NER可以当做Sequence Labeling任务，和Intent Recognition类似，都可以看作是多分类问题，不管是传统的分类方法还是当下流行的deep learning方法都能得到不错的准确率。随着user logs的增多，训练数据会越来越多，chatbot通过学习就会变得越来越“聪明”。但这里有个问题，training data越多，需要标注或者修改标注的数据就会越多，也是一个麻烦事儿。&lt;/p&gt;&lt;p&gt;step 5 整合、发布。api.ai支持的平台非常多，包括当下流行的message平台，还有各种操作系统平台。在message平台上提供了一键整合的功能，在操作系统上提供了SDK。这里我用了slack平台，api.ai打通了和slack的接口，也提供了webhook，连接了我之前写好的web service，只需要按照它给定的消息接口进行定义即可。&lt;/p&gt;&lt;h3&gt;demo&lt;/h3&gt;&lt;p&gt;目前RSarXiv只提供两个简单的功能，一个是update今天最新的arxiv paper，你可以通过show me new papers in cs.CL等类似的话来获取cs.CL这个领域中最新的paper；一个是search功能，你可以通过search LSTM等类似的话来获取包括LSTM这个关键词的paper。由于是一个测试用的demo，就没做什么复杂的功能。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/026f59e0668853eede457ebe43756cfc.png" data-rawwidth="635" data-rawheight="387"&gt;&lt;/p&gt;&lt;p&gt;大家如果感兴趣的话，可以留言给我或者发邮件给我(mcgrady150318@gmail.com/mcgrady150318@163.com)，我邀请大家到这个slack team中。&lt;/p&gt;&lt;h1&gt;简单场景chatbot构建方法&lt;/h1&gt;&lt;p&gt;介绍了下api.ai提供的服务，下面简单地提炼一下。&lt;/p&gt;&lt;p&gt;chatbot = NLU + NLG&lt;/p&gt;&lt;p&gt;api.ai解决的重点问题是NLU的问题，NLU也是Dialogue State Tracker(DST)的核心和基础，而DST是chatbot的核心。这里的NLU包括两个问题：&lt;/p&gt;&lt;p&gt;1、从user inputs中识别出user intent和对应的action。&lt;/p&gt;&lt;p&gt;2、从user inputs中抽取出预先设定好的entity value，作为action的parameter。&lt;/p&gt;&lt;p&gt;NLG在api.ai这里基本上通过developer在Intent中设定response，当识别出是哪个intent之后，response自然就有了，最多空一些slot，用结果进行填充。如果developer选择了webhook，即需要从自定义的web service中给定response。如下图：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/a8dcdd37586477d5bfd0ef3304d22863.png" data-rawwidth="642" data-rawheight="199"&gt;&lt;/p&gt;&lt;p&gt;跑了一个简单场景的chatbot demo之后，简单归纳下构建方法：&lt;/p&gt;&lt;p&gt;1、从特定任务中归纳出Intents、Actions、Entities。&lt;/p&gt;&lt;p&gt;2、分别编写Intents、Entities的examples，两类examples是做DST的基础，用来训练chatbot准确地识别user intents和entity parameters，至于算法，自己写也可以，用api.ai也可以。&lt;/p&gt;&lt;p&gt;3、做好DST之后，chatbot就知道用户的意图和相应的参数，丢给后台的web service去执行，并得到执行的结果，然后填充预先定义好的templates，生成response，返回给用户。&lt;/p&gt;&lt;h1&gt;结束语&lt;/h1&gt;&lt;p&gt;简单场景的chatbot关键之处在于做好DST，有一个叫Dialogue State Tracking Challenge的比赛正式为了解决这个问题而举办的。我们说，封闭域的chatbot涉及两个方面，一是NLU，一是NLG，前者通过大量的examples来学习一个分类器和抽取器，得到Dialogue State，而后者根据Dialogue State，生成合适的response。&lt;/p&gt;&lt;p&gt;NLU不是一个简单的事情，尤其是标注大量的examples不是那么容易；NLG同样也不是一个好解决的问题，预先定义的template会让chatbot受限制于template的多少，手工痕迹太重，需要一种更牛的解决方案来代替。（其实挺多paper都在做这件事情，PaperWeekly也分享过几篇相关的paper，data driven的NLG方案同样需要大量的examples做训练。）&lt;/p&gt;&lt;p&gt;Context是个挺难的事情，现有的、成熟的解决方案仍是手工来定义条件，然后根据条件来trigger。我在想，能否构建一个动态的DST，可以是一张动态hash table，也可以是一个动态graph，记录着某一个user方方面面的状态，而不仅仅是某一轮对话中抽取出的信息，而是多轮对话中的信息，不仅在intent识别中可以用到context，在生成response时也可以用到，多轮对话和个性化对话都将不是什么问题了。或者，用现在流行的表示学习思维来想这个问题的话，也许context可以是一个分布式表示，user profile也是一个表示，NLG时以context distribution为condition来做generatation。&lt;/p&gt;&lt;p&gt;本文介绍了构建简单场景下chatbot的一般方法，用api.ai确实很容易做一个chatbot，而对于复杂场景，我觉得用api.ai来开发也没有太大问题，最费时的可能是构建context trigger。api.ai因为是面向developer的，所以对于普通的用户并不适合，但对于有一定经验的developer来说，使用起来就非常简单，提供的web界面也很好用，如果说chatbot是一个平台的话，那么api.ai正像是一个开发工具，提高了开发chatbot的效率，虽然NLG和context这两个问题可以做的更好，但整体来说降低了开发chatbot的门槛，是个很有意义和钱景的服务。&lt;/p&gt;&lt;h1&gt;PaperWeekly招人广告&lt;/h1&gt;&lt;p&gt;PaperWeekly每周会分享N篇当下最流行、最有趣的NLP paper，旨在用最精炼的话说明白paper的贡献和创新。目前运营在公众号和知乎专栏两个平台上，现在的形式是每周分享一篇NLP Paper周报，偶尔也会写一些NLP相关的博客，由于本人精力和水平有限，现邀请各位对NLP技术、NLP Paper感兴趣的童鞋加入一同运营，在推进国内NLP技术发展的路上贡献一份自己的力量。&lt;/p&gt;&lt;p&gt;微信公众号：PaperWeekly&lt;/p&gt;&lt;p&gt;http://weixin.qq.com/r/OUW0rA3ExVC6rUnP9xAr (二维码自动识别)&lt;/p&gt;&lt;p&gt;知乎专栏：&lt;a href="https://zhuanlan.zhihu.com/paperweekly" data-editable="true" data-title="PaperWeekly"&gt;PaperWeekly&lt;/a&gt;&lt;/p&gt;&lt;p&gt;微信交流群：&lt;/p&gt;&lt;p&gt;群已满100人，无法扫码加群，大家加zhangjun168305，我拉大家入群。&lt;/p&gt;</description><author>张俊</author><pubDate>Tue, 23 Aug 2016 13:44:24 GMT</pubDate></item><item><title>PaperWeekly FAQ</title><link>https://zhuanlan.zhihu.com/p/22133533</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/b5fea40c59029d4f648955c56fda4deb_r.jpg"&gt;&lt;/p&gt;&lt;p&gt;Q：Why do PaperWeekly?&lt;/p&gt;&lt;p&gt;A：最初的初衷是为了督促自己看paper，然后记录下读每篇paper中get到的一些收获。因为自己一直笃信厚积薄发，相信坚持每天读一篇paper，经过一定时间的沉淀一定会有所进步，有所收获。在做PaperWeekly的同时，认识了很多志同道合的朋友，也从他们的身上学到了很多。&lt;/p&gt;&lt;p&gt;Q：PaperWeekly现在准备做什么？&lt;/p&gt;&lt;p&gt;A：paperweekly在某一段时间内有一点名不副实，因为更新速度太快，几乎做成了daily，工作日更新一篇paper，在周末的时候写一篇总结性的文章。频繁地更新占用了几乎所有的业余时间，经过一番思考，决定将PaperWeekly改版成一周一篇，回归真正的weekly，具体的形式可以参考最近的两期paperweekly，形式可能还会改变，目的是为了更好给大家提供更好的服务。&lt;/p&gt;&lt;p&gt;Q：What‘s Next？&lt;/p&gt;&lt;p&gt;A：由于个人精力和水平都非常有限，所以非常希望邀请一些志同道合的朋友来运营PaperWeekly，你可以是学生，可以是工程师，可以是老师等等。只要你热爱，并且喜欢分享知识，都可以私信我。在PaperWeekly你可以推荐一些好玩的paper，也可以推荐好玩的topic，也可以推荐自己的paper，只要你愿意，当然我更希望你可以一起加入作者团队，来写文章。&lt;/p&gt;&lt;p&gt;Q：关于方向？&lt;/p&gt;&lt;p&gt;A：目前只限定方向是NLP领域的，因为如果领域太过分散的话，大家难以讨论在一起，所以这里限定了只接受NLP领域的paper。&lt;/p&gt;&lt;p&gt;Q：PaperWeekly的周边？&lt;/p&gt;&lt;p&gt;A：在运营paperweekly之前，写了一个微信公众号、ios app和一个网站，作用都是帮助用户更方便地从arxiv搜索和推荐paper，如果你对开发感兴趣，如果你有那么一点点业余时间想要做点什么东西出来或者学点python或者web开发、或者实现一些具体的算法，可以考虑加入paperweekly的周边开发项目rsarxiv，一起将我之前写的比较naive的arxiv检索和推荐应用更加完善化。关于paper检索，我有很多很多有趣的想法，苦于没有时间和精力来实现，如果你感兴趣，请一定私信我。&lt;/p&gt;&lt;p&gt;Q：关于bot化？&lt;/p&gt;&lt;p&gt;A：最近一直在看bot的paper，前几天看着api.ai的docs，实现了一个chatbot demo，功能是基本的检索和每日paper的update，bot放在slack平台上，如果你感兴趣的话，可以考虑将你的邮箱私信给我或者发邮件给我，我的邮箱是mcgrady150318@163.com(gmail同名)，我将邀请你加入slack team，来试用下这个chatbot demo。&lt;/p&gt;&lt;p&gt;Q：关于报酬？&lt;/p&gt;&lt;p&gt;A：我可能给不了显性的报酬，但我相信用自己的业余时间来运营paperweekly，以及开发一些program，都会让你学习到很多很多东西，这些东西可能是一些小恩小惠给不了你的。另外，由于paperweekly的关系，认识一些行业大牛、媒体和投资人，如果你创业、找工作或者是需要媒体宣传，我想我可以给你一点点微弱的帮助。&lt;/p&gt;&lt;p&gt;Q：具体招聘？&lt;/p&gt;&lt;p&gt;A：PaperWeekly目前需要招聘N名作者（N可能是5左右），基本要求：对NLP感兴趣，对paper感兴趣，喜欢写东西，喜欢分享知识。周边的Program可以锻炼动手能力，因为要写一个实实在在的paper推荐系统和搜索系统，涉及的平台也比较多，包括流行的chatbot，以及一些很有趣的功能，比如多paper summary摘要等。如果你对python感兴趣，也想动手实现一个系统的话，可以考虑加入paperweekly。&lt;/p&gt;&lt;p&gt;感谢大家对paperweekly的关注和支持，希望大家可以通过交流群有所收获，找到志同道合的朋友，找到一起合作的作者，找到一个满意的工作，找到一个靠谱的合伙人。如果需要加入paperweekly群聊，请添加微信zhangjun168305，我会拉大家入群。&lt;/p&gt;</description><author>张俊</author><pubDate>Tue, 23 Aug 2016 08:50:32 GMT</pubDate></item><item><title>PaperWeekly招人启事</title><link>https://zhuanlan.zhihu.com/p/22127821</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/b5fea40c59029d4f648955c56fda4deb_r.jpg"&gt;&lt;/p&gt;&lt;p&gt;PaperWeekly每周会分享N篇当下最流行、最有趣的NLP paper，旨在用最精炼的话说明白paper的贡献和创新。目前运营在公众号和知乎专栏两个平台上，现在的形式是每周分享一篇NLP Paper周报，偶尔也会写一些NLP相关的博客，由于本人精力和水平有限，现邀请各位对NLP技术、NLP Paper感兴趣的童鞋加入一同运营，在推进国内NLP技术发展的路上贡献一份自己的力量。&lt;/p&gt;&lt;p&gt;微信公众号：PaperWeekly&lt;/p&gt;&lt;p&gt;http://weixin.qq.com/r/OUW0rA3ExVC6rUnP9xAr (二维码自动识别)&lt;/p&gt;&lt;p&gt;知乎专栏：&lt;a href="https://zhuanlan.zhihu.com/paperweekly" data-editable="true" data-title="PaperWeekly"&gt;PaperWeekly&lt;/a&gt;&lt;/p&gt;&lt;p&gt;微信交流群：&lt;/p&gt;&lt;p&gt;http://weixin.qq.com/g/A9hjSVG1RjX0GRlw (二维码自动识别)&lt;/p&gt;&lt;p&gt;群人数超过了100人，无法扫码加入了，请大家添加zhangjun168305，然后我拉大家入群。&lt;/p&gt;</description><author>张俊</author><pubDate>Mon, 22 Aug 2016 17:59:32 GMT</pubDate></item><item><title>PaperWeekly 第二期</title><link>https://zhuanlan.zhihu.com/p/22062882</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/d35833c83746938c0418be1102f05222_r.png"&gt;&lt;/p&gt;&lt;h1&gt;引&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/d35833c83746938c0418be1102f05222.png" data-rawwidth="715" data-rawheight="487"&gt;&lt;/h1&gt;&lt;p&gt;图片来自paper &lt;a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/06/williams2016dstc_overview-1.pdf" data-editable="true" data-title="The Dialog State Tracking Challenge Series- A Review" class=""&gt;The Dialog State Tracking Challenge Series- A Review&lt;/a&gt;&lt;/p&gt;&lt;p&gt;人机对话系统通常包括上面的几个部分，task-oriented chatbot重点关注的是DST和NLG问题，其中DST是核心问题，没有太多关注这个比赛，但个人理解DST的作用类似于一张user conversation logs状态表，记录着用户当前的状态，以订机票为例，这张表的key是预先设定好的slots，比如目的地、出发地、出发时间等等，与系统背后的业务数据表中的attributes相关联，不断地从user conversation中抽取相应的values来填充这个表格，或者将其定义为一个多分类任务，不断地从对话中判断这句话中包括哪些slots和values（这里的values是多个分类结果），当状态表中的信息存在空白时，bot会根据空白的slots来提问并获取values，直到获取到足够的slots，给出用户suggestion，或者进行相应的服务。&lt;/p&gt;&lt;p&gt;DST的问题解决之后，就是NLG的问题。传统的NLG采用rule-based或者template-based的方法，需要很多的手动设置，横向扩展性较差，维护成本高。最近流行的end-to-end方案很适合解决这个问题，给定用户的query，结合着当前DST，自动生成response，完全的data driven，不需要什么人工干预。&lt;/p&gt;&lt;p&gt;生成response除了rule-based和end-to-end的方法之外，工业界中更加常见的是retrieve-based的方法，即从庞大的example base中进行retrieve，一方面避免了NLG生成response时常遇到的grammatical问题，另一方面当前的IR技术很容易集成到此类bot系统中，降低了门槛。&lt;/p&gt;&lt;p&gt;本期的三篇paper中前两篇都是关于task-oriented bot的NLG问题，第三篇是在retrieve-based bot的每个细小环节中应用了deep learning技术，并且将外部的非结构化文本作为数据源，从中select responses。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://www.emnlp2015.org/proceedings/EMNLP/pdf/EMNLP199.pdf" data-editable="true" data-title="Semantically Conditioned LSTM-based Natural Language Generation for Spoken Dialogue Systems"&gt;Semantically Conditioned LSTM-based Natural Language Generation for Spoken Dialogue Systems&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;关键词：NLG、bot、自定义LSTM&lt;/h2&gt;&lt;h2&gt;来源：EMNLP 2015&lt;/h2&gt;&lt;h2&gt;问题：task-oriented bot NLG问题，给定了user query和DST，如何生成一个更好的response？&lt;/h2&gt;&lt;h2&gt;方法：&lt;/h2&gt;&lt;p&gt;首先定义了两个概念delexicalisation和lexicalisation，前一个的意思是将句子中的slot-value用特定的token来替换，像是一种抽象，比如用food来代替对话中的各种食物名称；后一个的意思是将句子中的特定token还原回具体的value。&lt;/p&gt;&lt;p&gt;本文最大的亮点在于将传统的LSTM重新定义，针对这个具体问题在LSTM cell部分中添加了一层，Dialogue Act Cell，通过gate机制来保留合适的信息，比如slot keywords，如下图：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/366ff46deb8fe7c697076ec5d98cdca7.png" data-rawwidth="364" data-rawheight="351"&gt;&lt;/p&gt;&lt;p&gt;这一层cell更像是一个keyword detectors，整个NLG仍是采用encoder-decoder框架。&lt;/p&gt;&lt;h2&gt;评论：&lt;/h2&gt;&lt;p&gt;这层Dialogue Act Cell的目的是确保在decoding部分，不会遗漏任何一个slot，所以专门增加了一层cell来encoding act、slot-value信息，在生成时作为context vector。我觉得model的这个设计与attention机制有一点类似，只是attention更加地平滑，对每个word都有一个weight，而不是本文中的gate，非0即1。整体来说，自定义的cell是一个很有启发性的思路，针对具体问题的特点，修改现有的cell结构，也许会起到非常关键的作用。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://101.110.118.75/128.84.21.199/pdf/1606.03632v1.pdf" data-editable="true" data-title="Natural Language Generation in Dialogue using Lexicalized and Delexicalized Data"&gt;Natural Language Generation in Dialogue using Lexicalized and Delexicalized Data&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;关键词：NLG、bot、自定义LSTM&lt;/h2&gt;&lt;h2&gt;来源：arXiv 2016.06.11 cs.CL&lt;/h2&gt;&lt;h2&gt;问题：task-oriented bot NLG问题，是第一篇的升级版。&lt;/h2&gt;&lt;h2&gt;方法：&lt;/h2&gt;&lt;p&gt;本文是针对第一篇文章进行的改进版，改进的地方在于不仅仅利用了delexicalisation进行训练，而且利用了lexicalisation数据，从而提高了准确率，基本的模型框架与第一篇文章类似，不同的在于输入的处理，就是dialogue act的表示，如下图：&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/14800a4bf548445cceace53803f8e649.png" data-rawwidth="392" data-rawheight="223"&gt;&lt;/p&gt;&lt;p&gt;每一个act representation由两部分组成，一部分是act、slots的one-hot表示，与文章一类似的结构，另一部分是由value的每个word embedding组合而成。&lt;/p&gt;&lt;p&gt;task-oriented bot NLG存在的一个更加现实的问题是data规模太小，cover的features太少，生成质量不高，本文针对这一问题，用相似domain的、大量的reviews或者其他相关数据作为corpus预训练出一个效果不错的LM，在decoding部分采用预训练好的LM模型权重进行NLG。&lt;/p&gt;&lt;h2&gt;评论：&lt;/h2&gt;&lt;p&gt;本文中最值得借鉴的地方在于transfer learning，虽然DL效果很好，但实际应用中常常遇到data规模太小的问题，DL难以发挥作用，但如果从大量相似的domain data中学习一些表示模型，然后迁移到待解决的问题上，这是一件幸事，也就是人们常说的举一反三。混合大量的相似domain数据，会cover到更丰富的features，为DL提供了广阔的舞台。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://aclweb.org/anthology/P16-1049" data-editable="true" data-title="DocChat: An Information Retrieval Approach for Chatbot Engines Using Unstructured Documents"&gt;DocChat: An Information Retrieval Approach for Chatbot Engines Using Unstructured Documents&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;关键词：Retrieve-Based Bot，Unstructured Documents&lt;/h2&gt;&lt;h2&gt;来源：ACL 2016&lt;/h2&gt;&lt;h2&gt;问题：如何从大量非结构化文本中select出合适的response返回给用户？&lt;/h2&gt;&lt;h2&gt;方法：&lt;/h2&gt;&lt;p&gt;本文研究的问题是给定大量的非结构化的documents和用户的query，从中选择并返回一个满意的response，典型的IR问题，作者将解决方案分为三步：&lt;/p&gt;&lt;p&gt;1、response检索，根据query，从documents中找到合适的N句话作为候选。&lt;/p&gt;&lt;p&gt;2、response排序，将候选中的utterances进行排序。&lt;/p&gt;&lt;p&gt;本文大多数的工作在ranking model上，提出了7种level的features来对candidate进行打分，通过实验发现sentence-level feature最有区分度。&lt;/p&gt;&lt;p&gt;3、response触发，并不是一定可以从documents找到合适的response，所以最后添加一个分类器，来判断最优的response是否合适，合适则输出，不合适则输出空。&lt;/p&gt;&lt;h2&gt;评论：&lt;/h2&gt;&lt;p&gt;本文解决的问题思路比较简单，但中间用到了很多复杂的DL model，个人感觉有点杀鸡用牛刀。本文的思路更加适合informative式的query，并不适合娱乐和闲聊。但用外部知识，尤其是大量的非结构化的、可能还带有噪声的资源来提供response，是一个很不错的思路，弥补了只用training data或者很有限的examples存在的局限性问题，如果可以将两者进行结合，是一个非常好的实用方案。&lt;/p&gt;&lt;h1&gt;Tips&lt;/h1&gt;&lt;p&gt;引起大家的讨论是一件挺难的事情，所以这一期不再提出问题。之前有同学问如何读paper，这里简单分享一个简单的tip，后续的每一期可能都会分享一个tip。&lt;/p&gt;&lt;p&gt;1、如果刚刚进入一个领域，建议读一些这个领域的survey或review类型的paper，这类型的paper基本上会将最近的方法归类进行总结，从一个较高的层次来解读每一篇paper的贡献和优缺点，对快速了解一个领域很有帮助。如果你关注的这个领域没有survey，那么恭喜你，说明你可能走到了前沿，用关键词去google一篇或者几篇相关的new paper，读Related Work那一节，相信你会有所收获。（注：这个方法是从清华大学刘知远博士那里学来的）&lt;/p&gt;</description><author>张俊</author><pubDate>Thu, 18 Aug 2016 07:06:31 GMT</pubDate></item><item><title>pet,baby and bot</title><link>https://zhuanlan.zhihu.com/p/22033341</link><description>&lt;p&gt;本文的想法来源于某一天对家里狗子Hare一些行为以及身边两个不到3岁的小朋友一些聪明行为的观察和思考，然后将这些行为和思考与当前流行的bot联系一下，形成了本文的内容。&lt;/p&gt;&lt;p&gt;首先，从pet聊起。我家养了一只聪明的小泰迪狗，心眼特别多，会撒娇会打滚会安慰人，非常聪明，他叫Hare。Hare从两个月大到了家里，从开始什么都不会，通过一天天地训练，学会了走、跑、跳、吃饭、喝水、上厕所、坐下、握手和哭。因为他的外婆（我的丈母娘）每天都和他说很多话，教他认识很多东西，所以他可以轻松地分辨出哪个玩具叫什么名字，可以轻松地理解我们说的很多话，不只是一些口令。当我说出门不带他玩的话，他会非常悲伤、可怜地开始哭泣（真的和小孩子哭一模一样）；当我说带他出去的时候，他就会非常兴奋地上蹿下跳；当我说我要出门办事不可以带他的时候，他就乖乖坐在门口目送你走，不哭不闹。所以，我在想Hare应该不是简单地通过观察我们的脸色和语气来识别我们的情绪，他可能真的听得明白很多的话，但一定不是全部，因为他的知识很有限，对这个世界的认识也很有限。Hare的学习绝大多数是监督学习，通过一些正例和负例进行训练，大多数的训练用正例效果非常明显，唯独训练他上厕所，用了不少负例，让他吃了不少苦头，这也带来不少的好处，监督学习很花费时间，样本的量级很重要，通过大量的训练+激励让Hare养成了良好的习惯，成为了一只听话的pet。&lt;/p&gt;&lt;p&gt;我一直在思考一个问题，pet在听主人说话的时候，是听懂了某些他可以理解的关键词还是他确实听懂了整句话，到底是字面意思还是semantic level呢？我想他应该有一定的自主学习能力，做到举一反三可能很难，但举一反二还是有可能的，而不仅仅是从大量的examples中进行学习，确实能够理解一些简单的话，同一个意思的不同说法他都可以理解。科学的解释需要做些实验来研究，这里我有一些简单的解释，第一，他有大脑，虽然没有人类发达，但智商可以和5、6岁的孩子相媲美；第二，他的监督学习不仅仅是从query-response pairs这样的examples中进行，而是更多的维度，包括每一次action之后的激励reward，做对一次动作之后赢得一个奖励，做错了受到惩罚，他不仅仅从主人的语言中来理解意思，还会结合别的因素，比如语调、语境、前一个时刻他的状态等等，而且他可以看到主人的表情和动作，这些因素都可以抽象成一种context。Hare如果前一秒刚刚犯了低级错误，这一秒如果我拿一个零食的叫他过来来吃的话，他就会明白，这其中一定有诈，他一定不会过来，虽然我并没有表现出生气的样子。&lt;/p&gt;&lt;p&gt;pet的事情我们先聊到这里，接下来聊一聊baby的事情。&lt;/p&gt;&lt;p&gt;身边正好可以接触到两个不到三岁的小宝宝，一个男孩一个女孩，他们有很多聪明的行为都让我感到吃惊。先从小男孩说起，小男孩每次来一起吃饭的时候，都会给大家表演他的绝技——认车牌。走在路上，你随意指一辆车，他几乎可以不出错地说出这辆车是本田还是丰田、还是起亚，这是一个典型的有监督多分类学习任务，他的父母有意无意地教他认识各种各样的车，经过一定时间和example的积累，他不断地将准确率提升，可能大脑的发育和将deep learning模型不断地复杂化道理类似吧。学习的过程是积累知识的过程，小男孩慢慢地认识了越来越多的车子，当然这需要不断地教和学，但无疑他本身就是一个知识库（knowledge base），而且认识很多我都不认识的车子，所以当我问他那是什么车的时候，他总是能够给我一个不错的答案。&lt;/p&gt;&lt;p&gt;说完小男孩的事情，再聊一聊小女孩的事情。小女孩语言能力很强，可以说很多的话，而且很多话都非常的funny。基本上和小女孩聊天，就是一个有趣的问答过程，这里的问答不只是我问她答，还有她问我答。小女孩经常和我妈妈在一起，妈妈会教她认识各种东西，因为妈妈信基督教，会教她做祷告，保佑自己一生平安，所以说她不仅仅可以回答一些基本的认知问题，而且有自己的特殊技能，表演“祷告”，而且做的有模有样。她是个求知欲非常强的问题宝宝，她总是指着一个东西，然后开始问我，“这是个什么东西？”，她主动学习的欲望很强，这意味着她的知识库积累地很快。以上都是比较常规的，最值得思考的是她的创造力。她认识很多的动物，也知道怎么称呼这些动物，她根据家里每一个人的名字，起了相应的动物外号，这个不是谁教她的，是她自己说出来的东西；之前提到的祷告词中，原话应该是希望上帝可以赐给她一些聪明智慧，那天在给我们“表演”的时候说出来的是“给她弄一些聪明智慧”，我想这个“弄一些”一定是其他的地方学来的，但她迁移到了这个语境中，这个迁移能力是值得思考的。我们都说理解一个东西不算厉害，如果能够掌握或者控制一个东西才算真正的厉害，她如果只是简单地重复已经学会的知识，也并不稀奇，但她偶尔会有意地装糊涂，故意地说一些错的东西看你能不能识别出来她的错误，她对一些信息的掌握程度很高。&lt;/p&gt;&lt;p&gt;小盆友的创造力让人惊奇，有很多值得思考的地方，相比于pet来说，baby的学习能力更强，带给人的惊喜度更大。chatbot，一个热门的topic，一个大家每天都在谈论的东西，确实还有很长的路要走，太多的地方不能令人满意。&lt;/p&gt;&lt;p&gt;1、最简单的一问一答现在都没有做的很好，example-based和rule-based虽然可以work，但限制太大，前者被example所限制，而后者被rule所限制，而paper中近一段时间流行的所谓generative式的bot看起来好像非常智能，读过paper之后会发现仍是基于example统计的，不管多么牛的模型，都是从example中学习features，example的规模和类型都会严重制约model，而且在生成response时面临着连贯性和语言学的问题，这也是被诟病最多的地方，也就是为什么example-based retrieve式的方法仍是主流的原因。&lt;/p&gt;&lt;p&gt;2、bot应该像人一样具有学习能力，尤其是主动学习能力。现在的bot有self-taught的能力，通常比较被动，并不具备主动学习的意识和能力。bot公司宣传的学习能力也通常是指对log的挖掘，从中找到一些有用的东西存在知识库里，丰富现有的example base。bot可以试着多提一些question，而不仅仅是做answer，主动地学习一些东西。&lt;/p&gt;&lt;p&gt;3、对context的利用和分析还有很长的路要走，context有很多种，如果是纯粹的语言bot，那么就是user之前说过的话，user的情绪，user的意图等等，如果不仅仅是语言的话，正如前面在说pet时提到的，context可以包括图像、语调等等。考虑的东西越多，bot的回答质量就会越高。&lt;/p&gt;&lt;p&gt;4、前几天看了几家科技媒体对新一代微软小冰的报道，说实话丢出挺多概念的，仔细看了下是用增强学习的思路来做，和训练pet比较类似，用一个reward作为牵引，带着bot学习programmer希望bot学习的action。&lt;/p&gt;&lt;p&gt;5、人会举一反三，聪明的动物会举一反二，迁移能力很重要，bot学习过类似的东西，就应该可以做类似的事情，而不是每次都需要重新从头开始学习，如何将已经学习到的知识迁移到新的领域也是一个非常有意义的topic。&lt;/p&gt;&lt;p&gt;从pet到baby，再到bot，从动物到人类，再到机器人，有着难以跨越的鸿沟，但pet、baby的行为可以带来启发和思考，给目前仍停留在初步阶段的bot带来一丝春风，一丝希望。&lt;/p&gt;</description><author>张俊</author><pubDate>Tue, 16 Aug 2016 11:18:41 GMT</pubDate></item><item><title>PaperWeekly 2016.08.05 第一期</title><link>https://zhuanlan.zhihu.com/p/21886170</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/256fe8a763046f46f6e701dd56442450_r.png"&gt;&lt;/p&gt;&lt;h1&gt;引&lt;/h1&gt;&lt;p&gt;学术界和工业界的需求和关注点不同，学术界更加注重未知领域的探索和方法的创新，研究的问题比较抽象，而工业界更加关注实际问题，方法不管是否创新，只要能够解决问题就是好方法，所面对的问题比paper中提炼出的数学问题更加具体，需要处理的细节更多。&lt;/p&gt;&lt;p&gt;paper的水平也是良莠不齐，尤其是arxiv上刷出来的paper更是水平各异。但整体来说，读paper会带来很多的启发，可以跟踪学术界对某一类问题的研究进展，不断地更新技术。关注工业界技术的应用和产品的更迭，可以不断地提炼出新的需求、新的数学问题，从而促进学术地发展，两者其实关系非常紧密。&lt;/p&gt;&lt;p&gt;本周开始，将paperweekly进行改版，从之前的每天一篇paper，改为每周一篇，内容包括多篇paper，这些paper可能相关、也可能不那么相关，但会说清每篇paper解决的问题和解决的方法，旨在拓宽视野，带来启发。本期是改版后的第一期，形式会一直不断地改进，希望工业界和学术界的朋友都能够有所收获。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://www.kdd.org/kdd2016/papers/files/rfp0289-zhaiA.pdf" data-editable="true" data-title="DeepIntent: Learning Attentions for Online Advertising with Recurrent Neural Networks" class=""&gt;DeepIntent: Learning Attentions for Online Advertising with Recurrent Neural Networks&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;关键词&lt;/h2&gt;&lt;p&gt;在线广告、RNN、Attention&lt;/p&gt;&lt;h2&gt;来源&lt;/h2&gt;&lt;p&gt;kdd2016&lt;/p&gt;&lt;h2&gt;问题&lt;/h2&gt;&lt;p&gt;如何用deep learning模型挖掘click logs来理解用户Intent？&lt;/p&gt;&lt;h2&gt;方法&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/506d0bff11bd46874cf0c4d278cee316.png" data-rawwidth="657" data-rawheight="285"&gt;&lt;/h2&gt;&lt;p&gt;对于一个(query,ad)数据对，分别用LSTM encode，然后用下图的方法计算一个attention，得到最终的query和ad vector，构造loss function，取logs中(query,ad)作为正例d+，将ad替换为其他无关ad作为负例d-，训练的目标是让d+的score尽量大，让d-的score尽量小。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/0dea3b7574ef958e4395e7c7c6e16788.png" data-rawwidth="821" data-rawheight="415"&gt;&lt;/p&gt;&lt;h2&gt;评论&lt;/h2&gt;&lt;p&gt;工业界有着学术界无法比拟的数据，大规模的真实数据是做deep learning的基础，大型商业搜索引擎积累了大量的ad click logs，利用好这些logs可以赚到更多的钱。attention机制在2015年开始逐渐成为一种流行趋势，借鉴于人类的注意力机制，让model将更多的注意力放在需要注意的地方，而不是每一个地方。本文并没有太多model上的创新，只是简单地将流行的model应用了自己研究的领域中，对工业界更有参考价值。&lt;/p&gt;&lt;h1&gt;&lt;a href="http://120.52.73.76/arxiv.org/pdf/1608.00318v1.pdf" data-editable="true" data-title="A Neural Knowledge Language Model"&gt;A Neural Knowledge Language Model&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;关键词&lt;/h2&gt;&lt;p&gt;语言模型、知识图谱&lt;/p&gt;&lt;h2&gt;来源&lt;/h2&gt;&lt;p&gt;arXiv cs.CL 2016.08.01&lt;/p&gt;&lt;h2&gt;问题&lt;/h2&gt;&lt;p&gt;在自然语言生成(NLG)问题中，出现次数非常少的entity该如何生成呢？&lt;/p&gt;&lt;h2&gt;方法&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/256fe8a763046f46f6e701dd56442450.png" data-rawwidth="547" data-rawheight="432"&gt;&lt;/h2&gt;&lt;p&gt;四个步骤：&lt;/p&gt;&lt;p&gt;1、Input Representation&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/d99a6cf2fc284b83c1e490a4770b1433.png" data-rawwidth="526" data-rawheight="36"&gt;&lt;/p&gt;&lt;p&gt;输入由三个部分拼接而成，第一部分是上一个time step的fact表示，第二部分是上一个time step的词表中的词表示，第三部分是上一个time step的fact description表示，这里fact就是(subject,relation,object)，知识图谱中的一条事实，而后两个部分一定会有一个全为0，因为是二选一的关系，但为了保证每一次的输入都是等长向量，所以用拼接来做。得到输入之后，用LSTM来encode。&lt;/p&gt;&lt;p&gt;2、Fact Prediction&lt;/p&gt;&lt;p&gt;通过1的结果来预测当前word可能相关的fact，得到的结果是一个index，然后从topic knowledge中获得相应的表示，这里的knowledge embedding都是用transE训练好的，在整个模型训练中并不更新。&lt;/p&gt;&lt;p&gt;3、Knowledge-Copy Switch&lt;/p&gt;&lt;p&gt;根据1和2的结果，共同来预测当前要生成的词是从词表中获取的高频词还是从knowledge中获取的entity，典型的二分类问题。&lt;/p&gt;&lt;p&gt;4、Word Generation&lt;/p&gt;&lt;p&gt;根据3的结果，来生成当前time step的词。对于词表中的高频词，和之前的生成方法一致；对于fact description中的entity词，通过预测词的position来copy这个词。&lt;/p&gt;&lt;h2&gt;评论&lt;/h2&gt;&lt;p&gt;语言模型是一个基本问题，传统的方法都有着一个尴尬之处是，会生成大量的出来，只要是涉及到NLU的问题，基本都会遇到这个问题。本文提供了一个很有启发性的方法，借助于知识图谱这种外部知识来帮助生成效果更好的话，单纯地靠model来提升效果是一件比较困难的事情，但增加一些外部信息进来则会带来更多的可能性。由于知识图谱的构建本身就是一件不易的事情，因此本文的学术意义远大于实际应用意义，为后续这种交叉式研究（知识图谱+深度学习）打开了一扇门，大家可以尝试更多的组合和可能。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://arxiv.org/pdf/1607.06952v1.pdf" data-editable="true" data-title="Neural Sentence Ordering"&gt;Neural Sentence Ordering&lt;/a&gt;&lt;/h1&gt;&lt;h2&gt;关键词&lt;/h2&gt;&lt;p&gt;句子排序&lt;/p&gt;&lt;h2&gt;来源&lt;/h2&gt;&lt;p&gt;arXiv cs.CL 2016.07.23&lt;/p&gt;&lt;h2&gt;问题&lt;/h2&gt;&lt;p&gt;给定乱序的N句话，如何将其按照逻辑排列好？（貌似是英语考试中的一种题型）&lt;/p&gt;&lt;h2&gt;方法&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/434b65bb816e75faa0df0a6a7326dea9.png" data-rawwidth="650" data-rawheight="373"&gt;&lt;/h2&gt;&lt;p&gt;本文定义的问题是给定n句话，找出最优排序，将这个问题降维到二维，就是如何排列两句话的顺序。上图给出了model的思路，对两句话分别进行encode，得到两个向量表示，然后进行打分，分数表示当前顺序是正确顺序的概率。这里的encode部分，分别用了每句话中word embeddings的加权平均、RNN和CNN来表示。&lt;/p&gt;&lt;p&gt;得到两两的排序之后，本文用beam search来得到整体最优的排序。&lt;/p&gt;&lt;h2&gt;评论&lt;/h2&gt;&lt;p&gt;多文档摘要问题中通用的一种做法是从每篇文档中都提取出一句或几句重要的话，然后进行排序。在英语考试中，有一种题型是给定你打乱顺序的几段话，然后根据逻辑将其排序。本文在学术上没有什么新的东西，但本文在构建neural model的时候，用到的数据集却非常容易构建，这意味着你在工程中应用这个方法来解决排序问题是可行的方案，所以本文更加适合有句子排序应用需求的工程人员来精读。&lt;/p&gt;&lt;h1&gt;提问&lt;/h1&gt;&lt;p&gt;计算机的会议非常多，各种level的都有，arXiv上每天都可以刷出一些paper，不同类型、不同level的paper适合不同需求的人来读，我觉得好东西的标准是适合而不是在某一个具体指标上达到最大，对你有用的东西才是适合你的好东西，有些特别牛逼的东西，有着极高学术价值的东西不见得适合工程人员来读，但也不应该是那种觉得学术上的东西离工程太远，没有什么具体用的态度，从各种各样的东西汲取养分，丰富和充实自己才是硬道理。读了一些paper，也该思考一些问题了，这里提出一些比较naive的问题，欢迎大家踊跃留言和讨论。&lt;/p&gt;&lt;p&gt;1、这种out-of-vocabulary的问题是一个非常常见的问题，有哪些不错的思路可以来解决这个问题呢？&lt;/p&gt;&lt;p&gt;2、attention model几乎满大街都是，最早在机器翻译领域中开始用这种模型，虽然在其他nlp领域中都取得了不错的成绩，但目前的attention真的适合每一类具体问题吗？是不是有一点为了attention而attention的感觉？neural summarization和machine translation真的可以完全类比吗？或者说attention适合解决具有什么特征的问题呢？&lt;/p&gt;&lt;p&gt;3、信息越多，model的效果一定会越好。现在外部信息非常丰富，但是如何融合到当前流行的model中来呢？如何将特定领域内构建的知识图谱完美地与特定任务中的model进行结合呢？以task-oriented bot为例，能够将客户的领域知识与bot response功能结合起来，做成一个更加高级的bot呢？&lt;/p&gt;&lt;p&gt;这里，我抛个砖，引个玉，希望更多的人能够参与讨论和提出问题。&lt;/p&gt;</description><author>张俊</author><pubDate>Fri, 05 Aug 2016 17:11:57 GMT</pubDate></item><item><title>如果做bot</title><link>https://zhuanlan.zhihu.com/p/21775977</link><description>&lt;p&gt;最近初步地研究了下bot这个领域，有了一点浅薄的理解，于是开始想，如果我也做bot的话，解决好哪些问题才会做好这件事情？&lt;/p&gt;&lt;p&gt;1、创业是一件严肃的事情，不是儿戏，需要做好充足的准备，调研和积累都是非常重要的，只有做好100分的准备，才可能在面对各种未知的困难时不慌乱。所以，第一步就是调研，研究bot，从方方面面，比如：&lt;/p&gt;&lt;p&gt;（1）bot为什么会火？（2）国内哪些企业在做bot？他们的产品有哪些优缺点？（3）国外哪些企业在做bot？有哪些优缺点？（4）投资情况如何？投资人怎么看待这个方向？（5）bot需要哪些技术积累？&lt;/p&gt;&lt;p&gt;2、从媒体、投资人的观点来看，bot整个大方向没有错，那么到底应该做哪个子领域呢？是客服？还是技术支持？技术平台？垂直私人助理？平台上应用？可做的事情其实很多，16年开始才井喷式地炒作bot这个概念，所以今年可以当做是bot元年，既然是刚刚起步的一个领域，就有一个天然的好处，蛋糕足够大，品类足够多，看你想吃哪一块？当然也有一个天然的坏处，就是无章可循，大家都是摸着石头过河。&lt;/p&gt;&lt;p&gt;（1）国内的情况是，客服已经有很多家企业在做了，做的模式大同小异，技术方面各有特色吧，可能起步早的现在规模大一些，晚的小一些，但整体来看差异化不大。如果选择这个方向的话，必须做出差异化，研究现有方案的缺点，之前写过一篇文章，简单剖析了现有方案的缺点和可改进的点，让目前的客服bot更进一步，要么就是做一家客服bot，产品更完美、技术更好，和大家分一杯羹；要么就是提供技术支持，帮现有的bot企业更进一步，赚他们的钱。&lt;/p&gt;&lt;p&gt;（2）如果是做技术支持，典型的SaaS+B2B，用自己的技术服务来为别的企业提供支持，response generation、user modeling、context modeling、information extraction都是不错的方向，每一个做好了都有广阔的前景，以为技术支持不直接面对业务，而是帮助改进现有企业提升算法和建模能力，应用的面比较广，可以用在各种类型的bot上以及其他应用背景上。&lt;/p&gt;&lt;p&gt;（3）平台上的应用，比如slack上的bot，做一个有趣的小功能，提高team的工作效率。这个在国外非常地火，平台也很多，就像是现在ios上开发app一样，每个app都有自己的功能。我觉得这块要是做的话，很容易做出差异化，现在已经有各式各样的startups做着各式各样的bot。但整体来说，技术门槛比较低，有一点API整合的意思，但如果你将自己的技术封装成API，在上面做一个bot提供服务也是一种不错的尝试，而且产品周期特别短，但终究卖点应该还是你的技术支持，而不是这个bot。&lt;/p&gt;&lt;p&gt;（4）技术平台的话，类似的有很多帮助企业或个人构建bot在各种平台上跑，假如微信现在开放了这一块，技术平台一定大有用处，这个属于基础的工具类产品，将很复杂的技术做成人人可以轻松使用的工具是一件很有意义的事情，像是IDE的感觉，不管什么背景，只要是有想法，就可以通过这个工具来实现一个bot，如果复杂的，可能需要定制。&lt;/p&gt;&lt;p&gt;（5）特定任务的私人助理，比如帮忙管理日程、制定旅行计划之类的，术业有专攻嘛，这个最好是之前在其他平台上做类似功能的企业转型到bot这里来，有着足够的积淀，融入一些新的交互和技术来提升产品体验。&lt;/p&gt;&lt;p&gt;上面的每个子领域在国外都有模板可以参考，国内的话还比较少，所以是很大的机会，关键在于判断，在于具体情况具体分析。因为有些东西并不适合做成bot这种聊天式的交互方式，简单的几个按钮操作就可以轻松完成的事情，为什么非要打很多的字来做呢？&lt;/p&gt;&lt;p&gt;3、壁垒。你的核心竞争力是什么？什么是你会别人不会的？如果腾讯也做这个事情，你们该怎么办？你的企业增长点在哪里？如何做大？&lt;/p&gt;&lt;p&gt;这些问题是投资人最关注的问题，其实也是创业前最应该想明白的问题，如果自己都想不明白，或者很多问题难以回答的话，说明现在的情况还不适合创业或者拿投资。我认为，无论什么时候人都是最核心的竞争力，技术和交互形式日新月异，更迭很快，团队只要具有很强的学习能力，永远都不会落于下风。没有什么技术一定是只有你一人才会的，工程上的技术壁垒不应是你提出了一个举世无双、天下无敌的算法，而是你在这个领域内实践各种各样算法的经验积累。为什么说一定要专注地做好一个事情，只做这一件事情，将这件事情做到精，因为对这么细小的领域理解地如此之深的人没有几个，这是你的技术壁垒，也是企业的生存之道，也是其他大公司难以抄袭的重要原因。这个问题一定要想清楚，最重要的是人，在技术层面上，不要想着找到一个独门秘籍来打天下，而是对你所研究的问题有非常深入地理解和见解，这是最基本的也是最核心的；接下来才是如何发展和壮大的问题，这个问题需要讲故事的能力，描绘出一幅美好画面的能力。&lt;/p&gt;&lt;p&gt;我觉得人的能力是最根本的壁垒，当然会有不同看法。有的企业快速扩张，积累客户，可能觉得积累的数据和客户资源是壁垒，但我觉得如果一个新的更好用的技术出来了，而你的企业技术却没跟上的话，很容易就会被取代的，不管你是5w+，还是10w+的客户。&lt;/p&gt;&lt;p&gt;一点思考，欢迎交流。&lt;/p&gt;</description><author>张俊</author><pubDate>Fri, 29 Jul 2016 09:00:55 GMT</pubDate></item><item><title>再谈bot</title><link>https://zhuanlan.zhihu.com/p/21709409</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/7fc8e2e4b0f378a33b69e009687e6f18_r.png"&gt;&lt;/p&gt;&lt;p&gt;本文是一个TechCrunch最近一年有关bot新闻报道的survey，从原文中提炼了些核心观点，来研究下国外bot的发展。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2015/09/29/forget-apps-now-the-bots-take-over/" data-editable="true" data-title="Forget Apps, Now The Bots Take Over" class=""&gt;Forget Apps, Now The Bots Take Over&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Sep 29, 2015 TechCrunch&lt;/p&gt;&lt;p&gt;正如浏览器取代了操作系统的地位作为新的平台，网站取代了应用程序的地位，bots将会取代移动app的地位，今后将会是bot store，各种各样的bot，而不再是app store。&lt;/p&gt;&lt;p&gt;类似于微信、Line、Facebook、Slack这样的message平台，将会成为一个新的入口。在message平台上有各种各样的bot，用户通过message与各种bot进行交互，来体会之前在手机各种app上的服务。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/7fc8e2e4b0f378a33b69e009687e6f18.png" data-rawwidth="864" data-rawheight="519"&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;It’s a brave new bot-filled world, with new possibilities and new risks.&lt;/p&gt;&lt;/blockquote&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/03/15/check-out-the-new-ai-powered-techcrunch-news-bot-on-telegram-messenger/" data-editable="true" data-title="Check out the new AI-powered TechCrunch news bot on Telegram messenger"&gt;Check out the new AI-powered TechCrunch news bot on Telegram messenger&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Mar 15, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;Techcrunch在Telegram上用&lt;a href="https://chatfuel.com/" data-editable="true" data-title="Chatfuel"&gt;Chatfuel&lt;/a&gt;构建了一个news bot，用户可以通过订阅不同的topic，authors和sections，bot根据订阅内容每天会推送两次trending stories digest给用户，另外也可以进行一些问答、聊天。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/03/30/microsoft-is-bringing-bots-to-skype-and-everywhere-else/" data-editable="true" data-title="Microsoft is bringing bots to Skype — and everywhere else" class=""&gt;Microsoft is bringing bots to Skype — and everywhere else&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Mar 30, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;微软CEO Nadella说,bots是下一代应用，只需要用自然语言与bot进行talk就可以完成之前大量手机app和网站做的工作。微软在bot的研究上投入很大，成果也颇多，小冰、Tay、Cortana，和开源的bot framework，并且将很多好玩的deep learning应用与bot做了整合，比如image caption bot，bing music bot，bing news bot。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/cfd4ac2553b1550c238937882618fa0b.jpg" data-rawwidth="738" data-rawheight="492"&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/04/05/chat-app-kik-launches-a-bot-store-and-anyone-can-make-bots-for-it/" data-editable="true" data-title="Chat app Kik launches a bot store and anyone can make bots for it" class=""&gt;Chat app Kik launches a bot store and anyone can make bots for it&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Apr 5, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;Kik是一个聊天app，构建了自己的bot store，chat被认为是下一代操作系统，而聊天app则是新型的浏览器，bots是新型的网站。bot和聊天的环境类似，增加了一些特殊的trigger，用来激发一些特殊的动作。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/1a29440023ebefea674075e7f2fe0f76.png" data-rawwidth="738" data-rawheight="406"&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/04/11/botlist-is-an-app-store-for-bots/" data-editable="true" data-title="Botlist is an app store for bots" class=""&gt;Botlist is an app store for bots&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Apr 11, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;Botlist是一家做bot聚合的平台，和豌豆荚是类似的概念，聚合了各种message平台上的各种bot应用。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/0777c3c4e0f2433f63ec7ea3a9866ee5.png" data-rawwidth="738" data-rawheight="454"&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/04/19/all-your-bots-are-belong-to-us/" data-editable="true" data-title="TechCrunch launches a personalized news recommendations bot on Facebook Messenger" class=""&gt;TechCrunch launches a personalized news recommendations bot on Facebook Messenger&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Apr 19, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;TechCrunch在Fb平台上的bot具备一个简单的个性化推荐的功能，根据用户的喜欢来推荐可能感兴趣的文章。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/04/26/pullstring-bot-authoring/" data-editable="true" data-title="ToyTalk renames to PullString, repositions as authoring tool for bots"&gt;ToyTalk renames to PullString, repositions as authoring tool for bots&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Apr 26, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;PullString做儿童市场，因为孩子的词汇量非常有限，而且都很容易理解，关键是孩子对那些nonsense的回答并不介意。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/05/07/bots-messenger-and-the-future-of-customer-service/" data-editable="true" data-title="Bots, Messenger and the future of customer service"&gt;Bots, Messenger and the future of customer service&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;May 7, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;传统的客服总是给人留下低效的印象，而随着AI研究水平地不断提高，用bot来替代或者辅助人工客服将是一种趋势和潮流。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/24581b3501d0d93a5aeb9b464c94ab5c.png" data-rawwidth="738" data-rawheight="415"&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/05/23/penny-raises-1-2m-in-seed-funding-for-its-personal-finance-bot/" data-editable="true" data-title="Penny raises $1.2M in seed funding for its personal finance bot" class=""&gt;Penny raises $1.2M in seed funding for its personal finance bot&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;May 23, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;Penny是一个personal finance bot，通过chat来帮助用户管理finance。不过chat只能通过pre-populated messages，而不是自然语言。尽管进入了一个bot时代，但chat的方式并不是解决所有问题的最好方法，在shopping领域，传统的电商网站比bot更好用。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic3.zhimg.com/8e4c99b37ae2118173279980a8de8f49.jpg" data-rawwidth="738" data-rawheight="415"&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/05/24/microsoft-tries-its-hand-at-a-news-bot-with-rowe/" data-editable="true" data-title="Microsoft tries its hand at a news bot with Rowe"&gt;Microsoft tries its hand at a news bot with Rowe&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;May 24, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;微软太钟爱bot了，在新闻领域开发了一款bot，整合了自家一个新闻App News Pro的功能，通过topic来获取相关news，获取今日头条，获取系统推荐的news。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic4.zhimg.com/e59d25b159364c28551701503942151c.png" data-rawwidth="264" data-rawheight="470"&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/06/23/workato-unveils-personal-workbot-to-silence-some-of-the-slack-bot-noise/" data-editable="true" data-title="Workato unveils Personal Workbot to silence some of the Slack bot noise" class=""&gt;Workato unveils Personal Workbot to silence some of the Slack bot noise&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Jun 23, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;Workato提供一个bot服务Personal Workbot，为slack用户过滤掉channel中无关的信息，提高效率。&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/6e34e5e2a9e15832304c7c6215b48654.png" data-rawwidth="680" data-rawheight="446"&gt;&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/07/14/zoom-ai/" data-editable="true" data-title="Zoom.ai believes an automated assistant is the fix for a weighty workload"&gt;Zoom.ai believes an automated assistant is the fix for a weighty workload&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Jul 14, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;Zoom.ai与之前的chat bot startups不同，目的客户是企业。创始人说，bot更像是一种UI，bot背后的技术才是真正需要解决的问题，NLP技术才是最关键的东西。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/07/15/legion-analytics-kylie/" data-editable="true" data-title="Legion Analytics is building bots to automate your sales pitch"&gt;Legion Analytics is building bots to automate your sales pitch&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Jul 15, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;Legion Analytics这家公司借助人工智能技术，帮助销售团队更加高效地工作。并不是说用bot来替代人工销售团队，而是帮助他们处理更加耗时的邮件咨询和demo演示。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/07/21/bot-influencers-the-programmatic-future-of-conversational-advertising/" data-editable="true" data-title="Bot influencers are the programmatic future of conversational advertising"&gt;Bot influencers are the programmatic future of conversational advertising&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Jul 21, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;conversational广告有望改善目前digital ads的缺陷，可以做的更加relevant、contextual和unobtrusive。&lt;/p&gt;&lt;h1&gt;&lt;a href="https://techcrunch.com/2016/05/29/why-do-chatbots-suck/" data-editable="true" data-title="Why do chatbots suck?"&gt;Why do chatbots suck?&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;May 29, 2016 TechCrunch&lt;/p&gt;&lt;p&gt;文中的观点基本同意，chatbot领域太广容易失败，不如做好特定领域内的服务。bot有智能的，比如微软的Tay，也有不智能的，比如Facebook平台上的CNN chatbot，设定一些button，绑定一些特定的事件。市面上没有一个真正好用的bot，很多领域为了bot而bot，用传统的app通过几个步骤就可以完成的事情，在bot中需要通过打很多的字才能完成，其实用户并不在意你的东西是不是智能，也不关心你产品背后的技术多牛，只在乎你的产品是不是简单好用效率高。一切以贴牌炒概念的bot产品都是耍流氓。现阶段，很多相关技术并不成熟，作者建议说在企业客服这个领域多做一些工作，比如把企业的产品FAQ bot做好，节约一些人力成本。（国内很多家做FAQ bot的公司）&lt;/p&gt;&lt;h1&gt;Review&lt;/h1&gt;&lt;p&gt;本文是考察国外bot文章系列的第一篇，全都来自TechCrunch。看了一天的新闻文章，从国外科技记者的角度看了下bot这个领域的发展和未来。&lt;/p&gt;&lt;p&gt;1、整体来说，比较乐观，从大公司、投资人、记者、用户多个角色来看，大家都比较看好bot的发展，相信bot是下一个app的形式，就像website取代了传统桌面程序一样，bot也会取代现在的手机app。&lt;/p&gt;&lt;p&gt;2、chat的形式就是大家来聊天，自然而然大的message平台，比如Facebook的Messenger，微信，Line，Slack，Telegram等等，就是成为bot的平台，就像现在的操作系统平台一样。&lt;/p&gt;&lt;p&gt;3、国外的bot公司很多很多，后缀带.ai多的数不清，从这些新闻中分享的bot应用，看得出大家现在还停留在一个比较初始的bot状态，有一点像arxiv上占坑的感觉，没有太多所谓的智能，只是有一个chatbot交互的UI，基本上实现具体的功能都靠事先定制好的button来trigger，更像是交互方式的革新，而非真的人工智能。&lt;/p&gt;&lt;p&gt;4、很多bot都在炒概念，往hot topic上靠，为了bot而bot，手机app用基本简单的点击操作就可以完成的任务，用bot却非要花费大量的时间来输入order或者人类语言，有点多此一举了。说白了，语义理解技术还不够成熟，大家将本该高度智能化的bot做成了step by step的引导，让用户使用了更加复杂的操作。当然，如果你的bot可以准确理解一句或几句简单的人话，然后完成复杂的业务处理，并反馈给用户结果，这样的bot才会让用户真的信服。&lt;/p&gt;&lt;p&gt;5、大伙儿基本上都把bot当成下一代app了，于是出现了很多家做bot聚合和分发的平台，类似app store，豌豆荚这种角色。一个市场雏形出来了之后，大家各自定位，各吃一块蛋糕。&lt;/p&gt;&lt;p&gt;6、客服bot是目前国内市场bot最活跃的一类，提供的功能基本上是企业产品或者业务的faq，差异化在于理解用户的query上，可能技术上略有差异。另外还有一种助手式的bot，提供了一些日常服务，比如查天气，订机票，订饭，打车等功能，基本上纯粹理解自然语言的很少，都是预先设定好套路，根据前一个context来trigger出后一个question，step by step地带着用户完成一个指定任务，因为涉及到多轮对话，context的理解和处理就显得非常重要，理解不好就显得bot非常弱智。这里，我觉得根据context做response的生成是个可以应用的点，虽然说可用的dataset规模很小，但可以考虑将已有的dataset做template化，通过template后的dataset来训练response generator。&lt;/p&gt;&lt;p&gt;今天是系列文章的第一篇，后续会读更多的news或者discussion，以及研究国外bot的产品形式和所用技术，做更多的分享，欢迎讨论。&lt;/p&gt;</description><author>张俊</author><pubDate>Mon, 25 Jul 2016 09:05:28 GMT</pubDate></item><item><title>一张图看懂bot市场</title><link>https://zhuanlan.zhihu.com/p/21700485</link><description>&lt;p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic1.zhimg.com/51cbad987b499437ded9ff084608af80_r.jpg"&gt;&lt;/p&gt;&lt;img rel="noreferrer" src="https://images.weserv.nl/?url=ssl:pic2.zhimg.com/e549f409c82bf739f519672d6194f37e.jpg" data-rawwidth="2000" data-rawheight="1076"&gt;</description><author>张俊</author><pubDate>Sun, 24 Jul 2016 10:47:43 GMT</pubDate></item></channel></rss>