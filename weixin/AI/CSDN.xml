<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>【SDCC讲师专访】蘑菇街黄大鹏：实时业务场景下的技术选型思考</title>
      <link>http://www.iwgc.cn/link/2747375</link>
      <description>&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;2016年9月22日-23日，由CSDN重磅打造的大数据核心技术与实战峰会、互联网应用架构实战峰会将在杭州举行。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a target="_blank" style="font-size: 14px; text-decoration: underline;"&gt;&lt;span&gt;SDCC 2016大数据技术&amp;amp;架构实战峰会（杭州站）&lt;/span&gt;&lt;/a&gt;&lt;span&gt;是由CSDN主办的顶级技术盛会，大会目的是促进更加深入的业内同行技术交流，传播先进技术理念。SDCC 2016·杭州站为期两天，主要面向对大数据/架构技术感兴趣的中高端技术人员，将秉承干货实料（案例）的内容原则，聚焦技术实践，结合业务，邀请业内顶尖的架构师和技术专家，共同探讨海量数据下的应用监控系统建设、异常检测的算法和实现、大数据基础架构实践、敏捷型数据平台的构建及应用、音频分析的机器学习算法应用，以及高可用/高并发/高性能系统架构设计、电商架构、分布式架构/微服务等话题与技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大会前夕，有幸邀请到蘑菇街实时计算平台经理黄大鹏接受CSDN记者专访。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjURcagJwZ6ibjdqGyibM8oRzkjIGYCJ6MaqhXWXTBr8iaZoZXU6M99fMopThyu5Rdbt0GmPbmnt9BHlw/0?wx_fmt=jpeg"/&gt; &lt;br/&gt;&lt;span&gt;蘑菇街实时计算经理（数据平台部） 黄大鹏&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;黄大鹏，2014年加入蘑菇街，现任蘑菇街实时计算平台经理，负责蘑菇街实时数仓的建设。多年大数据从业经验，曾就职于阿里云，参与RDS产品的开发，擅长各类数据库应用以及数据产品开发。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：请介绍下自己和目前从事的工作，以及关注哪些技术领域？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黄大鹏：&lt;/strong&gt;专注于大数据库领域的各类应用，对关系型/非关系型数据库都有涉猎，喜欢捣鼓各类计算框架，之前在阿里云RDS团队做开发，管理过超5000个mysql实例的集群，于2014年10月加入蘑菇街，负责实时计算平台的建设，从零开始搭建实时计算平台，目前服务于多个业务线，比较擅长结合业务场景做数据架构的设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：有别于社交网络、搜索和游戏等网站，电商网站的用户流量有哪些特点？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黄大鹏：&lt;/strong&gt;游戏没接触过不是很了解。社交和搜索的变现大多数情况下都是靠电商，都是给电商引流的工具，比如说蘑菇街，现在是一个社交化的购物平台，上面的用户可以相互
关注，分享，聊天，并且有大量的网红店，在这样一个“电商网站“里，搜索，社交，电商等各类业务场景都有，在这里做用户流量的运营，数据的分析，是要考虑用户在线上的各类需求的，而别的独立的社交网络或者搜索网站更多关注的用户流量变现的一个环节，而我们是需要将社交，搜索，电商串联起来分析用户流量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：能否介绍下蘑菇街实时计算平台的架构？有什么特点？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黄大鹏：&lt;/strong&gt;我们主要围绕着易用性和高可用来搭建我们的实时计算平台，由于实时数据开发难度较高无法直接交给BI同学，像在蘑菇街之前都是由管理维护storm集群的同学来开发的，底层做基础开发的同学对业务的敏感度就相对弱一些，很多统计程序开发出来没多久由于业务逻辑发生了变化，产出的数据口径就不匹配了，而这批同学又要做业务的开发，又要维护集群的稳定性，十分辛苦，不符合专业人做专业事的原则，所以我们的平台降低了实时统计任务开发的难度，用DSL语言的方式使得BI同学能够接手实时统计开发。高可用方面，在数据链路上各个环节我们都有做HA，另外我们重点放在了监控上面，从两个方面做监控：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统层面，包括数据链路，jvm，系统，延迟等各类监控。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;业务监控，包括histogram，同比，环比，总条目数等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：蘑菇街的实时数据平台可以服务于哪些业务场景？不同场景下如何进行技术选型？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黄大鹏：&lt;/strong&gt;场景包括，搜索排序，广告推荐，风控，运营支撑，系统运维等场景。在技术选型方面，我们将实时计算分为四类，每类用不同的数据架构来满足需求，具体包括：&lt;/span&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ad-hoc的实时计算（即席查询），实时体现在计算发生在查询，侧重于计算的实时性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;流式计算，计算模式固定，结果随着输入的变化不断更新。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;增量计算，离线数据+增量的流式数据结果&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实时数据的实时计算，既数据不断更新与此同时计算发生在查询时。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;具体这四类实时计算采用怎样的数据架构，请参考接下来这次会议上我的分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：在数仓平台中，您如何应对数据治理、业务梳理与底层技术三者间的关系？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黄大鹏：&lt;/strong&gt;数据治理主要解决数据打通，获得高质量基础数据的问题，提供数仓的原材料，巧妇难为无米之炊，如果基础数据不准确，或者数据不能关联打通，那么再多的机器，再先进的计算平台都是摆设。而数据要产生价值必须和业务紧密结合，如果业务逻辑混乱，职责划分不清，那么就很难产出口径清晰，可读性高的数据，增大数据使用的难度。底层技术主要要解决数据量，稳定性和计算复杂度的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：在本次SDCC 2016（杭州）大数据峰会上，您分享的话题是？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;黄大鹏：&lt;/strong&gt;我分享的题目是《蘑菇街实时计算平台实践》，分享的内容包括，实时计算技术选型，平台建设和数据治理相关话题的实践经验。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 19 Sep 2016 17:13:12 +0800</pubDate>
    </item>
    <item>
      <title>重新定义计算的边界</title>
      <link>http://www.iwgc.cn/link/2747376</link>
      <description>&lt;p&gt;&lt;span&gt;谈到重新定义，说及计算边界，也许感观上还带有些神秘。但如果谈及信息技术（Information Technology），那信息技术为当前 30 年的社会进步作出的不可磨灭的贡献，相信无人再会质疑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1946 年，第一台电子计算机在美国宾夕法尼亚大学诞生，计算机从此登上历史舞台；辗转至 1971 年，Intel 公司推出全球第一个微处理器，掀起一波计算机领域的革命，几乎是简化并制定了硬件标准；而上世纪 80 年代末，Windows 的横空出世，迅速革新软件模式，一举吃下大部分的软件市场。作为 IT 领域的中坚部队，20 多年的计算市场，几乎被 Intel 与 Microsoft 的软硬强强联手，占领殆尽。你会发现，那时候的计算边界，细想来，不可谓不清晰。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;千禧年前后，全球互联网的潜力开始凸显，由于商业、成本、规模等因素的考量，互联网公司不得以转向当时的开源新锐 Linux。借势，喷薄，可以说是当时对 Linux 最生动的描述。随后，虚拟化、云计算、大数据技术、容器技术等接踵而至，无一不是当时的宠儿，均一石激起千层浪，的确起到助力时代发展的作用，却也并未独领风骚至十年。虚拟化模糊了软件，云计算集中了资源，技术的发展就仿佛是“千层叠”，回过头来再看计算，甚至有点“雾里看花”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果细细体会如今的 IT 现状，是牵一发而动全身，还是一马平川，发展趋势几何，都是规划 IT 投入时不可回避的话题。换言之，IT 发展已经面临十字路口，路口转向何处，哪些可以用来帮助企业 IT 选型，我们不妨仔细来看。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section label="Copyright © 2016 playhudong All Rights Reserved." style="
width:100%;
margin-top:1em;" donone="shifuMouseDownPayStyle(&amp;#39;shifu_t_048&amp;#39;)"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;标准化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;IT 发展，往往会呈现“动态的稳定”，技术的发展，是创新的原力，最终势必趋于秩序化。秩序化的生产模式，是技术理应为社会带来的价值。这种形式，我们也时常称之为“标准化”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;共享经济与移动互联网，最近五年内给社会带来了巨大变化，IT 模式也颇受冲击。野蛮生长成了一个代名词，迅速响应成了业务提出的重要新需求。对于企业运营而言，积淀的文化与流程，或许会成为支撑企业运作的基石；而对于“互联网＋企业信息化”而言，往往会有更多要求。细想而来，信息化新格局无非分为以下四点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更敏捷的业务交付&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更丰富的服务目录&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更弹性的数据中心&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更融合的运营支撑&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;交付的标准化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;十年前，也就是“互联网＋”还没有盛行之时，企业 IT 对于交付的响应速度等，并未达到如今的要求。对于当时的业务需求，软件工程领域也逐渐流行着不少着实高效的软件研发模式，比如瀑布模型。软件研发严格按照设计的一系列阶段顺序展开，往往强依赖于前期需求分析，模型构建等环节的可靠稳定。然而在十年之后的“互联网＋”世界中，明确的需求，稳定的模型，似乎永远是一个“伪命题”。如此一来，业务的交付始终难免存在问题，业务系统也很难抓住市场需求的痛点，有的放矢。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提升业务交付能力，已然成为企业无法回避的挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;近年来，云计算的发展，让企业面对资源的时候，能更加游刃有余，但管理业务时候，始终难以收获效果。我们也明显感觉到，传统“面向资源的云”，如今有必要重新审视，开始转向“面向应用的云”。面向应用的云，绝非空穴来风，为企业带来的价值绝不可估量，这样的云具有的特性是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高速迭代&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;永远可用&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;弹性扩展&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;移动优先&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;自动运维&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;交付的标准化，没有合适的开发模式，几乎没有实践成功的可能性。升级开发模式，自然成为企业首要考虑的问题。开发如何高效产出，流程如何对接代码资源，如何自动化完成测试和构建，如何提高业务的发布能力，如何提高业务系统的高效运营能力，如何迅速响应市场变化持续迭代，都至关重要。企业级业务交付，丰富的实践经验告诉我们，完全遵守“短板效应”，整个的业务交付并不会因为某个环节的卓越突出，而整体提速，往往是某个存在弊病的环节，直接导致交付的延时缓慢，甚至停滞不前。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;合适的开发模式，除了合适的人力资源外，合适的流程也很重要，合适的技术支撑更是不可或缺。技术发展到了 2013 年，容器技术随着 Docker 的兴起，让行业看到了“标准化”的曙光。以容器为标准交付件，打造企业应用商店，实现负载分布式应用的秒级部署，完全可以帮助企业打开拥抱互联网能力的大门。容器技术的实践，结合 DevOps 的理念、微服务架构，一时间成为跃变边界上，最炙手可热的话题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实，交付的标准化，在互联网企业中需求甚广，但并非是互联网领域的专属需求。传统企业的信息化产物交付，都在悄然变化。容器技术从再次被挖掘价值、到如今的红透半边天，其间有不少于五家传统公司找到我，希望尝试使用 Docker 来重新定义软件交付。比如，一些 2B 的制造行业软件提供商，已经拥有成熟的商业模式，然而依然苦于传统的软件交付模式，难以接受巨大且不确定的企业级软件实施成本。容器的盛行，反而是这样的跨界企业在内部驱动下寻求突破，得到强有力的支撑。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;交付的标准化，不仅在互联网领域成为刚需，在跨界领域同样成为信条。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;资源的标准化&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;交付的标准化，常以“应用的云”为中心，但这并不意味传统“资源的云”不再重要。数据中心依然在企业内部扮演着重要的角色，同时数据中心为了支撑业务的健康运作，重新有了新的挑战。数据中心的构建，需要拥有面向业务的运维能力，同时有必要构建面向服务的平台，从基础架构转向以应用为中心的运维架构。面向业务的“数据中心”，如何实现“资源的标准化”，拥有重大意义。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh0oAUrORQcosyCZ5fPpSnRch83nYRKlRibOnrJSrh2f1DGX8eyRuXP9VgkTQHkJZkdCv6AoNcPqcQ/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;lt;图1&amp;gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据中心的技术发展多年，我们看到的是技术“千层万叠”的现状。传统的硬件基础设施不可改变，而后到接受虚拟化技术，接着到三层云计算架构的洗礼，开始在虚拟化数据中心中规划 IaaS 平台，再逐渐完成业务系统管理组建 PaaS 平台，最终构建 SaaS 服务。每一次技术的选型，企业都将投入大量的人力物力，而其中的必要性是否成立，客观上行业也在不断地思考。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh0oAUrORQcosyCZ5fPpSnR67GTHuJKxSwldibx4E30erSq89yQiaU1LxyBfFAwXg1OdMiaicIAIn1Vfw/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;lt;图2&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很有幸，在 IT 技术的发展过程中，我们可以看到容器形态的实际价值。如今的容器形态，让我们看到一个全新的技术边界正在逐渐形成。传统的层级架构中，操作系统、中间件、软件包、软件定义的网络、软件定义的存储，甚至是虚拟化技术，都被囊括进了一个新的边界，进而在这个边界上形成了新的标准。应用云的边界就此上移，容器之上为应用，容器之下为资源，计算的边界由传统的硬件（Hardware）端，走向容器（Container）端。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section label="Copyright © 2016 playhudong All Rights Reserved." style="
width:100%;
margin-top:1em;" donone="shifuMouseDownPayStyle(&amp;#39;shifu_t_048&amp;#39;)"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;去中心化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuh0oAUrORQcosyCZ5fPpSnRzQpDibrcY0ibCYbDVowUdbsVIerfc6OvbtMiaauIvzMSM1fgRFqp1UgFw/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;区块链的面世，让世人见识了“去中心化”的价值，区块链也以开放、安全、易用得到银行和金融业的广泛关注。而在 IT 领域，似乎“去中心化”的理念，也逐渐被实践以及接受。从互联网发展的层面看，去中心化代表了社会化关系的转变，也在重新打造内容产生的形态，自然也将计算的边界开始向 C 端转移，最终互联网更加扁平，内容的多元化得到充分的发挥。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到传统“中心化”的 IT 基础架构，中心化云服务器，网络设备的基础设施与运维成本往往非常昂贵。服务器/客户端模式已经被运用了数十年，但如今的大规模移动场景开始难以为继，更何况是大规模物联网场景下数百亿的设备连接。单纯的C/S通信模式，对于服务器造成的压力太过于庞大，而在电子技术发达的今天，端的能力挖掘不足势必带来能源的巨大浪费以及管理成本的大幅增长。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;去中心化，必将成为趋势。系统计算能力的边界已经从集中化开始转向互联的万物。值得注意的是，以 Docker 为代表的容器，其计算能力，再一次给行业提供了一个很大的可能性。Docker 目前与 Linux 操作系统几乎可以捆绑谈之，容器引擎也几乎已经成了操作系统发行版的标配。如此一来，目前引擎原生支持的分布式集群能力，完全在操作系统层面，即完成了节点之间的互联，完全不需要额外的平台支撑。而 Docker 对于跨平台、跨机器架构等方面的支持，更是将容器生态的边界极大地扩展到其他范围，比如嵌入式领域、物联网场景。未来，借助容器技术实现去中心化，很快即变成一种新的探索道路，技术已经支撑，场景的磨合需要时间。再者，我们可以发现，容器层已经完全承载了业务，面临在一些特殊领域的能耗、资源使用等额外需求，Docker 这样的容器技术，完全有可能促进传统操作系统发行版的变革，发行版有望走向微型、单一、精简，更贴近行业场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;面对困境，没有人会第一个想到使用最复杂的方式解决问题，反而简单高效的方案总是成为首选。容器目前的发展方向，正是以一种大道至简的方式，重新塑造未来去中心化的 IT 模式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section label="Copyright © 2016 playhudong All Rights Reserved." style="
width:100%;
margin-top:1em;" donone="shifuMouseDownPayStyle(&amp;#39;shifu_t_048&amp;#39;)"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;行业的变迁，内部的需求，外力的推动，是一个重新思考计算边界的绝佳良机。计算的力量，推动着人，推动着 IT 移向新的位置。重新定义，人将从低级的信息排列和筛检工作中释放出来，逐渐走向创造和洞悉。徘徊在边界，在跃变的一刻，有人得道蜕变，有人就此留下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;作者：老司机孙宏亮｜毕业于浙江大学，现为 DaoCloud 技术合伙人，在 DaoCloud 主要负责企业级容器云平台的研发工作。数年来一直从事云计算领域，是国内第一批研究和实践 Docker 的工程师，在国内起到重要的 Docker 技术布道作用。目前，拥有个人著作《Docker 源码分析》，同时是 Docker Swarm 项目的全球 Maintainer，并对 Docker 等其他项目有着大量的代码贡献。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;</description>
      <pubDate>Mon, 19 Sep 2016 17:13:12 +0800</pubDate>
    </item>
    <item>
      <title>探索跨平台应用开发的最佳实践</title>
      <link>http://www.iwgc.cn/link/2747377</link>
      <description>&lt;p&gt;成本低、周期短，易于上手，不用重新设计，种种好处让跨平台开发风头无量，数以万计的开发者和开发工具及服务提供商们都在实践中找寻“最趁手”的跨平台开发解决方案。从各大主流移动平台一应俱全的 PhoneGap，用 C# 开发 iOS、Android Apps 的 Xamarin，到当前风头无量的 React Native，以及在国内已多有运用的 Weex 等。&lt;br/&gt;&lt;br/&gt;那么，对于开发者而言，如何做跨平台开发工具选型？如何透过良好的设计实现大部分代码都可复用，并实现服务器端动态更新？如何解决自定义 UI、API 扩展性等问题？在 MDCC 2016 的跨平台开发专场，一起聆听来自 NHN Techorus、阿里巴巴、青云 QingCloud、普元、美团点评的跨平台开发专家们分享各自的跨平台实战经验与解决之道，共同总结出跨平台开发的最佳实践。&lt;br/&gt;&lt;br/&gt;这篇文章将带你全方位地了解 MDCC 2016 的跨平台开发专场。目前大会门票正 8 折优惠中，五人以上团购更有特惠，9 月 23 日 - 24 日，来北京国家会议中心，一起畅谈技术，交流真知（&lt;span&gt;票务详情链接&lt;/span&gt;，&lt;span&gt;8 折优惠，欲购从速！&lt;/span&gt;）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwqia8XUS8CFWStib4Svibt12TVHjRNDNH3Z0OF4f0VctQKAvibrOjsneFv0UBPSlas7XmkUwGkbCGBLjA/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;张臻（Joshua Zhang） NHN Techorus部门经理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwqia8XUS8CFWStib4Svibt12TVGRYN6mOujibcSFCicMIYcHH4yKacBBaJyFfS4h2iaXf2F7oric6iad1hRrw/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;现任前端开发团队 Leader，就职于 NHN Techorus，侧重 Web 技术和互动性的内容开发，主要负责日本 NHN comico集团下各项目的 Web 前端架构设计与开发，最近兴趣专注于利用 React 和 Redux 的移动端 Web 应用开发实践。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;演讲主题：&lt;/strong&gt; 从 React 到 React Native 的尝试&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;主题介绍：&lt;/strong&gt; 借助 React Native，Web 应用的开发者可以通过 JavaScript 调用 iOS/Android 的原生 API，实现许多 Web 所无法实现的功能。这为今后以 Web 为主要平台的开发者带来了很多可能性。&lt;br/&gt;&lt;br/&gt;比如可以迅速将现有的 Web 应用快速包装成原生应用上线。比如添加原生平台的功能来增强用户体验。又比如将 iOS/Android/Web 的 UI 和业务逻辑的代码统一，实现跨平台的代码复用。&lt;br/&gt;&lt;br/&gt;本次演讲将侧重于从 JavaScript 开发者的视点，就上面三点进行介绍，并分享一些实际使用时的经验以及对 React 今后发展趋势的看法。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;陈洋钧 青云 QingCloud 移动平台负责人&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwqia8XUS8CFWStib4Svibt12TVdvaQMwjAInq6tiaA2l06bNz5WGdYlttnhiawkYpXRics1Ljuj2HC1FO0g/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;陈洋钧(yj)，青云QingCloud移动平台负责人，7年开发经验，先后就职于HP、IBM、迅雷。曾负责电信集团HSS网元系统、IBM Docs电子表格Model模型、IBM Docs Mobile前期的架构和开发，后在迅雷负责快盘App的重构工作。现在负责青云QingCloud移动平台的架构和开发。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;演讲主题：&lt;/strong&gt; Mobile 可配置化的跨平台实践&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;主题介绍：&lt;/strong&gt; 青云 QingCloud 作为一家云计算公司，提供了大量的 IaaS 和 PaaS 的产品。目前 Mobile 就已支持了 25 类产品，而新产品还在不断更新和迭代中。随着 AppCenter 生态的扩大，未来产品会呈爆发式的增长。除了公有云用户，我们还需要支持私有云的用户，不同的私有云用户可能又有不同的产品需求。那么如何能在 iOS 和 Android 两大平台里灵活快速地支持这些变化？&lt;br/&gt;&lt;br/&gt;我们需要一个可配置化的跨平台方案帮助解决以上问题，既能减少对平台相关的代码依赖，还能即时完成产品迭代同时保证代码质量，并进一步实现跨平台开发。本次演讲将分享青云 QingCloud Mobile 配置化跨平台实践经验。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;郝振明 普元移动产品线主任架构师&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwqia8XUS8CFWStib4Svibt12TVSibuNoONu9PMcszLCX5poBMQibibsRudFZqewmh51ksCDDhOS1xnLQ1LQ/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;郝振明，现任普元信息移动集成产品部负责人。有十多年IT从业经验，一直专注于企业信息化的工作，近五年间一直从事企业移动信息化、移动互联网化的咨询、产品工作，曾主持参与了Primeton Mobile产品研发、联通集团、广东农信、诺亚财富、中信重工、索菲亚等公司的移动信息化工作，在移动平台建设、移动信息化、移动互联网升级、移动电商等领域有丰富的经验和独到的认识。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;演讲主题： &lt;/strong&gt;驱动原生型移动应用的跨平台实践&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;主题介绍：&lt;/strong&gt; 近两年来，越来越多的公司放弃了以Webkit作为UI渲染的跨平台，转向以原生渲染（比如：React Native）作为跨平台方式。此次讲者将结合普元移动平台团队四五年的相关经验，分享一下过程中的思考、实践以及趟过的坑。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;郑蔚（克爽） 阿里巴巴技术专家&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwqia8XUS8CFWStib4Svibt12TVnsnE5dmdCfuJvLsFksVYC6jh3CbYLF7sh1aVncanVlsdm7RVjIcpnA/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;郑蔚，花名克爽，阿里巴巴技术专家，多年服务端、无线客户端开发经验，曾负责虾米音乐无线客户端架构，2015 年加入手机淘宝团队，后加入 Weex 开发团队，负责框架的架构设计和优化。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;演讲主题：&lt;/strong&gt; Weex移动应用架构设计和实战&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;主题介绍：&lt;/strong&gt; Weex 是手机淘宝团队 2016 年推出的动态化移动应用开发框架，更是在开源后成为国内移动开发领域的热点。Weex 框架在融入最新的前端技术的同时，保留了 Native 技术的高性能，让开发者同时兼顾效率与性能，开发出高性能、高可拓展、动态化的移动应用。本次分享会介绍 Weex 项目的基本情况，重点剖析 Weex 框架的各个核心组成，Thread Model、Rendering、拓展机制等核心模块的架构设计，带领大家一窥 Weex 架构设计中的关键技术。然后结合在手机淘宝、手机天猫等场景下的应用和实践，分享如何使用 Weex 构建优秀的移动产品。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;张宇 美团点评 React Native 项目负责人&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwqia8XUS8CFWStib4Svibt12TVYo2NDYdaurNYCzKCFiaNQGBnU6GQZN01CFmdqR5LUn6zXWSLKv5ZfXg/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2014年加入美团点评，负责商家端 iOS 开发工作，始终以解放生产力为己任，目前致力于 React Native 使用和研究，业余时间热衷于开源社区的学习、讨论和贡献。&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;演讲主题：&lt;/strong&gt; 美团点评 React Native 设计和实践&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;主题介绍：&lt;/strong&gt; 随着美团点评业务的快速发展，业务方对 B 端产品（商家端）版本迭代速度和资源方面提出更高要求，React Native 的出现恰恰解决了这两个问题。时至今日，已经使用 React Native 一年有余，开发了近十余个功能，热更新、一套代码同时支持 iOS 和 Android 两端等方面，都取得了良好的效果，但与此同时，也发现 React Native 还不够成熟。本次分享将从实际项目出发，分享 React Native 在项目中的设计和使用经验，主要包括两点：&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;设计，基于 React Native 技术的移动 App 跨平台架构设计；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;坑，开发中遇到的痛点、解决过程、原理和注意事项。&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;Note：&lt;/strong&gt; 最终内容以现场为准，关于移动开发新技术，更多精彩尽在MDCC2016，详情请查看大会官网：&lt;span&gt;MDCC 2016移动开发者大会&lt;/span&gt;。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwrAQFuZaGZFGiaqDLpJBtE7R767MZhLZic2qNNo1KCiaInywicSptvJu1sKMIKSQphibAAp0KXD0ic3nZDQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;</description>
      <pubDate>Mon, 19 Sep 2016 17:13:12 +0800</pubDate>
    </item>
    <item>
      <title>【SDCC讲师专访】Echo陈健：个性化推荐和版权识曲之路初探</title>
      <link>http://www.iwgc.cn/link/2733211</link>
      <description>&lt;p&gt;&lt;span&gt;2016年9月22日-23日，由CSDN重磅打造的大数据核心技术与实战峰会、互联网应用架构实战峰会将在杭州举行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;iframe class="video_iframe" data-vidtype="1" style="   z-index:1; " height="375" width="500" frameborder="0" data-src="https://v.qq.com/iframe/preview.html?vid=u0329iee7ef&amp;amp;width=500&amp;amp;height=375&amp;amp;auto=0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大会官网宣传视频&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大会前夕，有幸邀请到echo数据组算法工程师陈健接受CSDN记者专访。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjXxsA3G0DwpfEbOmLddfB41pp0BGl7mlpmTZahINEz3FzWbbkicnDzx1ORZIOc89Gibfp2C4gsibLWjg/0?wx_fmt=jpeg"/&gt; &lt;br/&gt;&lt;span&gt;echo数据组算法工程师 陈健&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;陈健，12年毕业于比利时天主教鲁汶大学人工智能专业，先后在百度搜索研发部，晶赞科技任职；现任echo数据组负责人，负责音乐推荐和音乐分析的工作。研究方向为广告算法，推荐系统和音乐分析。目前致力于使用机器学习算法分析音乐的内容，包括music embedding和music tracking等。擅长scala编程以及spark上机器学习模型的开发以及音乐音频分析。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3&gt;&lt;br/&gt;&lt;/h3&gt;&lt;h3&gt;&lt;span&gt;以下为采访正文&lt;/span&gt;&lt;/h3&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：首先请简单介绍下自己以及目前的工作重点。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;陈健：&lt;/strong&gt;我是echo的数据组负责人陈健。目前在echo的工作重点是推荐系统和音乐分析。推荐系统方面，主要是echo的首页瀑布流的歌曲个性化推荐以及歌曲播放详情页的相似歌曲推荐。音乐分析上，目前工作点2个。一个是从音频上分析歌曲的相似度，用于检查echo用户所上传的歌曲，是否属于未收录版权的歌曲，避免版权纠纷。另一个是音乐节奏点提取。目前echo提供了类似于节奏大师和Deemo的音乐打击类游戏，因此需要通过算法抽取音乐中存在的节奏点对信息，包括所在的时间点，音符，音高等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：能否详细介绍下echo的业务体系？其用户流量有什么特点？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;陈健：&lt;/strong&gt; Echo的目标是创造一个属于年轻人的文化品牌，包括音乐，影视，创意和时尚领域。Echo的业务体系主要包括以下：Echo回声，Echo品牌的酒吧咖啡馆M64和Echo嘉年华音乐节。&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Echo回声是一款多元化的音乐APP，有移动端，PC和网页端。Echo APP主要包括三个板块，echo回声歌曲和MV推荐，echo TV直播，echo红人。Echo回声的歌曲有2个特色，一是每首歌曲都会配上相应的精致封面，另一个是音乐环绕感觉的3D音乐。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjXxsA3G0DwpfEbOmLddfB41snJTfJyEaWZdJxOxyxk2rqezPibYV8RYEUWyvkfJHZ0M1iaV2Knsh8Gw/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Echo品牌的酒吧M64位于上海陕西南路，其中酒吧分为2部分区域，位于前部的是音乐小清新的咖啡馆，之后内部是隐秘的酒吧。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Echo嘉年华音乐节每年夏季举办，音乐节会搭建多个舞台，每个舞台的表演各有特色。今年刚刚举办的音乐节邀请的嘉宾就有朴树，蔡依林，孙燕姿，薛之谦，Jessie J和DJ Shadow等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjXxsA3G0DwpfEbOmLddfB41gicW1gSxVjSaNZP0icSIicgO9RB8mH0nhcfnPPnNdJSJAUubwoVr8KeJQ/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Echo的用户品味多样，乐于互动。Echo除了提供的流行歌曲外，echo会采集互联网上备受喜爱的各类特色的音乐，包括爵士，电子和日韩等，来满足用户多样的品味。用户的参与上，除了用户会上传它们精心制作的翻唱或者原唱的歌曲外，echo提供的独特的弹幕音乐，每个用户在收听歌曲的同时，可以互相交流每一时刻或者音符的感受。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：时下，机器学习在大数据生态领域中处于什么地位？在音乐分析中的具体应用有哪些？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;陈健：&lt;/strong&gt;机器学习是实现数据价值的工具。大数据生态领域中，收集数据，存储数据和ETL等，都属于数据预处理的过程，属于将互联网上的数据输出为格式化的数据。但是如果需要挖掘这些数据中存在的模式和商业价值，那么就需要机器学习的方法。比如在线广告的点击率预测，就需要通过机器学习来高效挖掘出数据中的点击率模式，从而完成个性化的定向广告推广。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器学习的方法在音乐分析中也有广泛的应用。音乐分析中的音符提取，首先根据spectral flux方法生成音乐中音高变化明显的所有点，然后使用LSTM-Bidirectional RNN，分析哪些点可能属于真实的音符点。还有在音乐分析中的音频指纹生成，就可以有end to end的方法，输入的是音频的波形数据到多层CNN（卷积神经网络），提取音频数据潜在的频域特征（替代傅立叶变化）生成高阶的特征，然后通过将这些特征再次输入到多层RBM（Restricted Boltzmann machine）中提取特征的分布模式，最终获取到一个feature向量，该向量可以作为音频的广义表达。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;center&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/wvkocF2MXjXxsA3G0DwpfEbOmLddfB41LsDt4jia9DCsFDtPnzp8vRib15sJubC4EOC0G8ktNBjuXYQXXAK312NA/0?wx_fmt=png"/&gt; &lt;br/&gt;&lt;span&gt;配图来源：A Deep Bag-of-Features Model for Music Auto-Tagging ；Juhan Nam, 
Member, IEEE, Jorge Herrera, and Kyogu Lee, Senior Member, IEEE&lt;/span&gt;&lt;/center&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上图中，不同类型的特征的相似矩阵，可以看出随着深度神经网络层数的叠加，不同类别的音乐区分度越高，相似类型的音乐越明显相似。比如电子音乐Electronic和高科技舞曲Techno都依赖于计算机对音效的处理，因而在听觉上是相似的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：echo作为一款3D音乐软件，用户体验非常关键，在产品稳定和用户体验上有哪些值得分享的经验？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;陈健：&lt;/strong&gt;比如echo的测试，为了测试出歌曲播放过程中可能出现的bug，会将一直处于播放状态。比如日志记录上，我们会对每个功能进行埋点，监测用户每个功能使用的时长和可能出现的异常情况。通过这些数据，我们可以挖掘出需要改进的界面或者功能点，也可以挖掘出导致用户流失的原因。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：目前echo已发展相对成熟，未来有哪些需要改进的方向？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;陈健：&lt;/strong&gt; Echo回声的主要方向是让所有的用户参与到音乐中，无论是制作，收听和评论音乐，从而构建基于音乐的娱乐文化社区。目前普通用户制作音乐的成本较高，未来可能在echo回声APP中提供更简洁高效的工具方便用户来创作音乐。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;CSDN：在本次SDCC 2016（杭州）大数据峰会上，您分享的话题是？&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;陈健：&lt;/strong&gt;本地分享的话题是“echo个性化推荐和版权识曲之路”。我会分享echo如何使用Logistic Matrix Factorization进行个性化的推荐和机器学习在音频特征提取上的应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjXxsA3G0DwpfEbOmLddfB414TKf1QKo3OSicP2nmRIrA2t5MXhnp9x3eDqDdSiaib3PByxqG9OGKptGg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Sun, 18 Sep 2016 17:03:02 +0800</pubDate>
    </item>
    <item>
      <title>GoSnaps：如何支持5天50万用户服务器只花100元</title>
      <link>http://www.iwgc.cn/link/2733212</link>
      <description>&lt;p&gt;&lt;span&gt;创业者们似乎有这样一个共识：初创公司应尽快推出MVP(最简可行产品)而不应该把扩展性这样的细节放在心上。总是有人给我说推产品是最高的也实际上是唯一的目标，扩展性这样的问题可以先停留在计划书和PPT上。他们认为在验证产品的市场接受度和融到钱之前搞什么扩展性纯粹是浪费时间。然而这种认识并不正确，而且最近Pokémon GO(宠物小精灵/口袋妖怪GO)的流行又给我们上了一课。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Jonathan Zarra为Pokémon GO开发的聊天应用GoChat只用了5天时间注册用户数就达到了100万。他确实抓住了一个发财的好机会，不过就在他找风投谈变现的时候GoChat的服务器挂了，损失了钱和用户不说，机会也白白浪费了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;他开发GoChat时就是一个MVP，压根没考虑扩展性的事，因为他从来没想过这么短时间就有这么多用户。他请了顾问来帮他解决性能上的问题，最后得出的结论是保持服务器不挂要再花4000美元，而且以后的开销还不清楚有多少。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实从我的经验来看对于一个只有100万用户的聊天应用来说服务器绝花不了4000块。花这么多钱只能说明设计上面出了问题。虽然给几百万用户设计一个既经济扩展性又好的应用不简单但也并不是说都难得不得了了。借助云计算的廉价服务器这是绝对可行的，当然前提是在开发MVP时就将扩展性考虑到位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;GoSnaps: 5天50万用户服务器只花100元&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我自己也开发了一个与GoChat类似的应用GoSnaps，用户可以在应用的地图中分享自己的游戏截图。发布的第一天就有了6万用户，第二天涨到了16万，5天之后涨到了50万。同时在线人数大概1000，已经上传的截图数目接近20万，应用中还包括一个图像检测和缩放工具。所有这些都部署在一个100美元的谷歌云服务器上，而且表现很不错。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;GoChat vs GoSnaps&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GoChat和GoSnaps有一个相似的地方就是会不停地对服务器发起请求以便更新聊天记录和截图。每一次请求在后台都是一个依据地理位置的查询或是搜索，这种查询搜索再加上排序和过滤对服务器的负担是很重的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GoChat跟我们相比不同点在于聊天信息得发送给所有参与者，而且请求更频繁。设置得当的话是没什么问题的，不过对没考虑扩展性的MVP来说可就是灾难了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;GoSnaps的特点则是截图的时效比聊天信息长，不过所有的图片都存储在谷歌的云存储，所以作为开发人员我基本不用操心。我操心的是图像识别和缩放的部分，这些操作对CPU和带宽的消耗比聊天的文本大多了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;综合考虑的话GoChat和GoSnaps复杂程度差不多，但在架构的设计上分别有需要特殊考虑的点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;24小时开发出一个高扩展的MVP&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我开发GoSnaps从头到尾只花了24个小时，典型MVP。我用了一个以前的NodeJS boilerplate项目和MongoDB作为数据库。没用Redis，没用Varnish，没用Nginx，连MongoDB都没用缓存。App本身是用Objective-C开发的，我从Unboxd项目借鉴了一些有关地图的代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果不考虑扩展性就是要开发速度的话，把截图存储在MongoDB最方便了，基本什么都不用做。查询截图也可以对所有已上传的图片直接用查询语句，一个数据集，一个查询语句，够简单吧。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过让我们来看看这个查询语句是什么样的。我们要查询输入的ABCD四点所包围的范围内所有的截图，但要剔除掉敏感的和没处理完的，而且要依据点赞的数目、截图的有效性和上传时间排序。对于小型数据集其实这样查询没什么问题，但如果在生产环境用就肯定不行了。就算将查询语句进行简化也还是不行，因为数据库根本就不该一次对多个索引进行查询。不幸的是Jonathan Zarra在发布应用之前没有看到我这篇文章。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我的做法是在图片进行识别和缩放操作之后将它存储到谷歌云存储上面，这样就避免了截图请求对服务器和数据库的直接冲击。数据库方面我则是按照搜索的条件预先对图片进行了分类，比如点赞最多的、最新上传的等等。有新上传的截图或者对截图有赞踩等操作时这些类别也会检查更新，所以查询搜索时就不用查询所有图片了。其实没什么复杂的地方，但确实避免了复杂的查询语句。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其实做这些提高扩展性的工作只多花了我两三个小时，区别在于一开始有没有考虑这些问题。我开发这款应用就是为了让它成功的所以必须考虑扩展性，如果开发一款应用是为了不要让太多用户用那干脆别开发了。就算是最简可行产品也得有最简可行扩展相对应。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;选对工具&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开发语言的运行速度和框架的重量级会影响所需要的服务器数目。无数次的经验告诉我，PHP配Symfony、Python和Django或者Ruby on Rails就是运行速度慢和框架太重量级的代表。我并不是说这些语言和框架不好，只是对于想省经费的MVP开发者来说不是最理想的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我后台用的是速度较快的NodeJS，ORM工具则用了Mongoose来简化对MongoDB的操作。虽然我知道Mongoose代码挺多的而且我其实也不太精通，不过MVP么怎么方便怎么来。上周末有一次我的四个NodeJS进程让服务器CPU都飙到了90%以上而同时在线人数只有不到一千。我觉得是Mongoose的问题, 所以就把Mongoose的lean()函数打开了，这样传递的就是普通的JSON对象。这样一来CPU瞬间掉到了不到10%。试想一下如果我用的是Symfony和Doctrine恐怕光运行代码就得好几个服务器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既要扩展性又要便宜的话很重要的一点就是选一个速度快又轻量级的语言，不过对MVP要求的开发速度来说可能更重要的是库要多些。我认为现在满足这些条件的语言有NodeJS、Scala和Go。PHP和Java可能就语言来说并不算慢，但框架一般对MVP都太重量级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;经验之谈&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;几年前我创办了一个叫Cloud Games的网页游戏广告网站，几个月活跃用户就达到了100万。这时候我们还在用PHP、Symfony2、Doctrine和MongoDB因为我之前的公司有两亿活跃用户也用的PHP。活跃用户到了十万的时候我们的服务器开始有压力了，虽然我设置都对，APC缓存等等也都用了但这些库确实太大太慢了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过这时候网站还比较简单所以我们用NodeJS转写配合Redis也没花几天时间。架构没变，只换了个语言和数据库瞬间把负载降低到了之前的5%。其实归根结底只有一个原因就是创业艰难缺钱，好在Cloud Games现在经营得很不错。我想当时语言的转换对成功是起到了很大作用的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;MVP和扩展性矛盾吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你能预见你的app可能会哪天突然火起来，请一定在开发MVP时考虑扩展性的问题，因为MVP和扩展性两者并不矛盾。如果因为技术问题像Jonathan Zarra一样眼睁睁看着用户和钱从指间流走就太可惜了。虽然Pokémon GO自己问题也不少，但我们这种小app是没法跟他拼用户的容忍度的。对初创公司来说时间就是一切啊！&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Sun, 18 Sep 2016 17:03:02 +0800</pubDate>
    </item>
    <item>
      <title>MongoDB + Spark: 完整的大数据解决方案</title>
      <link>http://www.iwgc.cn/link/2733213</link>
      <description>&lt;blockquote style="line-height: 25.6px; white-space: normal;"&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;作者：TJ；整理：yingmin&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;来源：MongoDB中文社区&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Spark介绍&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;按照官方的定义，Spark 是一个通用，快速，适用于大规模数据的处理引擎。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通用性：我们可以使用Spark SQL来执行常规分析， Spark Streaming 来来做流数据处理， 以及用Mlib来执行机器学习等。Java，python，scala及R语言的支持也是其通用性的表现之一。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;快速： 这个可能是Spark成功的最初原因之一，主要归功于其基于内存的运算方式。当数据的处理过程需要反复迭代时，Spark可以直接在内存中暂存数据，而无需像MapReduce一样需要把数据写回磁盘。官方的数据表明：它可以比传统的MapReduce快上100倍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大规模：原生支持HDFS，并且其计算节点支持弹性扩展，利用大量廉价计算资源并发的特点来支持大规模数据处理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;我们能用它做什么&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那我们能用Spark来做什么呢？ 场景数不胜数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最简单的可以只是统计一下某一个页面多少点击量，复杂的可以通过机器学习来预测趋势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;个性化 是一个常见的案例，比如说，Yahoo的网站首页使用Spark来实现快速的用户兴趣分析。应该在首页显示什么新闻？原始的做法是让用户选择分类，聪明的做法就是在用户交互的过程中揣摩用户可能喜欢的文章；另一方面就是要在新闻进来时候进行分析并确定什么样的用户是可能的受众。新闻的时效性非常高，按照常规的MapReduce做法，对于Yahoo几亿用户及海量的文章，可能需要计算一天才能得出所有结果。Spark的高效运算可以在这里得到充分的运用，来保证新闻推荐在数十分钟或更短时间内完成。另外，美国最大的有线电视商Comcast用它来做节目推荐，最近刚和滴滴联姻的Uber用它做实时订单分析，优酷则在Spark上实现了商业智能的升级版&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Spark生态系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在我们开始谈MongoDB 和Spark 之前，我们首先来了解一下Spark的生态系统。 Spark 作为一个大型分布式计算框架，需要和其他组件一起协同工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLURtCRq7QRd1Q9AVV6VcV1W0s09cjSqT11U28WYHPldYIMV9DyrAkm1Q/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Hdaoop里面，HDFS作为一个数据层位于其核心部位。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spark是Hadoop生态系统的一颗新星，原生就支持HDFS。大家知道HDFS是用来管理大规模非结构化数据的存储系统，具有高可用和巨大的横向扩展能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而作为一个横向扩展的分布式集群，资源管理是其核心必备的能力，Spark 可以通过YARN或者MESOS来负责资源（CPU）分配和任务调度。如果你不需要Spark管理节点的高可用，你也可以直接使用Spark standalone。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在有了数据层和资源管理层后， 接下来就是我们真正的计算引擎了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hadoop技术的两大基石之一的MapReduce就是用来实现集群大规模并行计算。而现在就多了一个选项：Spark。 MapReduce的特点是，用4个字来概括，简单粗暴。采用divide &amp;amp;amp; conquer战术，我们可以用MapReduce来处理PB级的数据。 而Spark 作为打了鸡血的MapReduce增强版，利用了内存价格大量下降的时代因素，充分把计算所用变量和中间结果放到内存里，并且提供了一整套机器学习的分析算法，在加上很多语言的支持，使之成为一个较之于MapReduce更加优秀的选择。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于MapReduce 是一个相对并不直观的程序接口，所以为了方便使用，一系列的高层接口如Hive或者Pig应运而生。 Hive可以让我们使用非常熟悉的SQL语句的方式来做一些常见的统计分析工作。同理，在Spark 引擎层也有类似的封装，如Spark SQL、 RDD以及2.0版本新推出的Dataframe等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以一个完整的大数据解决方案，包含了存储，资源管理，计算引擎及接口层。 那么问题来了：我们画了这么大这么圆的大饼，MongoDB可以吃哪一块呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLUjZiaoyDSnrNfhKiaib8IBksnoBzWsl1pJmkNgRe0TiagicDNic8icljF9wRiaA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大家可以想象，MongoDB是个什么？是个database。 所以自然而然，MongoDB可以担任的角色，就是数据存储的这一部分。在和 Spark一起使用的时候，MongoDB就可以扮演HDFS的角色来为Spark提供计算的原始数据，以及用来持久化分析计算的结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;HDFS vs. MongoDB&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;既然我们说MongoDB可以用在HDFS的地方，那我们来详细看看两者之间的差异性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在说区别之前，其实我们可以先来注意一下两者的共同点。HDFS和MongoDB都是基于廉价x86服务器的横向扩展架构，都能支持到TB到PB级的数据量。数据会在多节点自动备份，来保证数据的高可用和冗余。两者都支持非结构化数据的存储，等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，HDFS和MongoDB更多的是差异点：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如在存储方式上 HDFS的存储是以文件为单位，每个文件64MB到128MB不等。而MongoDB则是细颗粒化的、以文档为单位的存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HDFS不支持索引的概念，对数据的操作局限于扫描性质的读，MongoDB则支持基于二级索引的快速检索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MongoDB可以支持常见的增删改查场景，而HDFS一般只是一次写入后就很难进行修改。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从响应时间上来说，HDFS一般是分钟级别而MongoDB对手请求的响应时间通常以毫秒作为单位。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;一个日志的例子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果说刚才的比较有些抽象，我们可以结合一个实际一点的例子来理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如说，一个比较经典的案例可能是日志记录管理。在HDFS里面你可能会用日期范围来命名文件，如7月1日，7月2日等等，每个文件是个日志文本文件，可能会有几万到几十万行日志。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而在MongoDB里面，我们可以采用一个JSON的格式，每一条日志就是一个JSON document。我们可以对某几个关心的字段建索引，如时间戳，错误类型等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们来考虑一些场景，加入我们相对7月份所有日志做一些全量的统计，比如每个页面的所有点击量，那么这个HDFS和MongoDB都可以正常处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果有一天你的经理告诉你：他想知道网站上每天有多少404错误在发生，这个时候如果你用HDFS，就还是需要通过全量扫描所有行，而MongoDB则可以通过索引，很快地找到所有的404日志，可能花数秒钟就可以解答你经理的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;又比如说，如果你希望对每个日志项加一个自定义的属性，在进行一些预处理后，MongoDB就会比较容地支持到。而一般来说，HDFS是不支持更新类型操作的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;好的我们了解了MongoDB为什么可以替换HDFS并且为什么有这个必要来做这个事情，下面我们就来看看Spark和MongoDB怎么玩！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Spark + MongoDB&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spark的工作流程可以概括为三部曲：创建并发任务，对数据进行transformation操作，如map， filter，union，intersect等，然后执行运算，如reduce，count，或者简单地收集结果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLU4eVmI59EdfJ3DyaNZX3ft57gdpPFuNp6T9fkkDP2nu4KJI9MZAo7vg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里是Spark和MongoDB部署的一个典型架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spark任务一般由Spark的driver节点发起，经过Spark Master进行资源调度分发。比如这里我们有4个Spark worker节点，这些节点上的几个executor 计算进程就会同时开始工作。一般一个core就对应一个executor。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个executor会独立的去MongoDB取来原始数据，直接套用Spark提供的分析算法或者使用自定义流程来处理数据，计算完后把相应结果写回到MongoDB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们需要提到的是：在这里，所有和MongoDB的交互都是通过一个叫做Mongo-Spark的连接器来完成的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLUFa01BmI7gP0icLzwRwhB7BTRBwzIPZia6sKbDBDYPibO3r4ZOpsE88bHw/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一种常见的架构是结合MongoDB和HDFS的。Hadoop在非结构化数据处理的场景下要比MongoDB的普及率高。所以我们可以看到不少用户会已经将数据存放在HDFS上。这个时候你可以直接在HDFS上面架Spark来跑，Spark从HDFS取来原始数据进行计算，而MongoDB在这个场景下是用来保存处理结果。为什么要这么麻烦？几个原因：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spark处理结果数量可能会很大，比如说，个性化推荐可能会产生数百万至数千万条记录，需要一个能够支持每秒万级写入能力的数据库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;处理结果可以直接用来驱动前台APP，如用户打开页面时获取后台已经为他准备好的推荐列表。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Mongo Spark Connector 连接器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这里我们在介绍下MongoDB官方提供的Mongo Spark连接器 。目前有3个连接器可用，包括社区第三方开发的和之前Mongo Hadoop连接器等，这个Mong Spark是最新的，也是我们推荐的连接方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLU2I4hCzeVyCM0ZgyVoaZAqNkd0mhWGRqu7zZGQUCDq1mpcXQN1aqHhA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个连接器是专门为Spark打造的，支持双向数据，读出和写入。但是最关键的是 条件下推，也就是说：如果你在Spark端指定了查询或者限制条件的情况下，这个条件会被下推到MongoDB去执行，这样可以保证从MongoDB取出来、经过网络传输到Spark计算节点的数据确实都是用得着的。没有下推支持的话，每次操作很可能需要从MongoDB读取全量的数据，性能体验将会很糟糕。拿刚才的日志例子来说，如果我们只想对404错误日志进行分析，看那些错误都是哪些页面，以及每天错误页面数量的变化，如果有条件下推，那么我们可以给MongoDB一个限定条件：错误代码=404， 这个条件会在MongoDB服务器端执行，这样我们只需要通过网络传输可能只是全部日志的0.1%的数据，而不是没有条件下推情况下的全部数据。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，这个最新的连接器还支持和Spark计算节点Co-Lo 部署。就是说在同一个节点上同时部署Spark实例和MongoDB实例。这样做可以减少数据在网络上的传输带来的资源消耗及时延。当然，这种部署方式需要注意内存资源和CPU资源的隔离。隔离的方式可以通过Linux的cgroups。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Spark + MongoDB 成功案例&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前已经有很多案例在不同的应用场景中使用Spark+MongoDB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;法国航空是法国最大的航空公司，为了提高客户体验，在最近施行的360度客户视图中，使用Spark对已经收集在MongoDB里面的客户数据进行分类及行为分析，并把结果（如客户的类别、标签等信息）写回到MongoDB内每一个客户的文档结构里。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Stratio是美国硅谷一家著名的金融大数据公司。他们最近在一家在31个国家有分支机构的跨国银行实施了一个实时监控平台。该银行希望通过对日志的监控和分析来保证客户服务的响应时间以及实时监测一些可能的违规或者金融欺诈行为。在这个应用内， 他们使用了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Apache Flume 来收集log&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Spark来处理实时的log&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;MongoDB来存储收集的log以及Spark分析的结果，如Key Performance Indicators等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在我们国内，东方航空最近刚完成了 一个Spark运价的POC测试。下面我们来看看他们做的事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;东方航空的挑战&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;东方航空作为国内的3大行之一，每天有1000多个航班，服务26万多乘客。过去，顾客在网站上订购机票，平均资料库查询200次就会下单订购机票，但是现在平均要查询1.2万次才会发生一次订购行为，同样的订单量，查询量却成长百倍。按照50%直销率这个目标计算，东航的运价系统要支持每天16亿的运价请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;思路：空间换时间&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前的运价是通过实时计算的，按照现在的计算能力，需要对已有系统进行100多倍的扩容。另一个常用的思路，就是采用空间换时间的方式。与其对每一次的运价请求进行耗时300ms的运算，不如事先把所有可能的票价查询组合穷举出来并进行批量计算，然后把结果存入MongoDB里面。当需要查询运价时，直接按照 出发+目的地+日期的方式做一个快速的DB查询，响应时间应该可以做到几十毫秒。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那为什么要用MongoDB？因为我们要处理的数据量庞大无比。按照1000多个航班，365天，26个仓位，100多渠道以及数个不同的航程类型，我们要实时存取的运价记录有数十亿条之多。这个已经远远超出常规RDBMS可以承受的范围。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MongoDB基于内存缓存的数据管理方式决定了对并发读写的响应可以做到很低延迟，水平扩展的方式可以通过多台节点同时并发处理海量请求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;事实上，全球最大的航空分销商，管理者全世界95%航空库存的Amadeus也正是使用MongoDB作为其1000多亿运价缓存的存储方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Spark + MongoDB 方案&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们知道MongoDB可以用来做我们海量运价数据的存储方案，在大规模并行计算方案上，就可以用到崭新的Spark技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLUu8dc673ktiapuET0xdL8PaBkFSBBZgiba6Cn4WI6VlicXoz89r1SJlqibA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里是一个运价系统的架构图。 左边是发起航班查询请求的客户端，首先会有API服务器进行预处理。一般航班请求会分为库存查询和运价查询。库存查询会直接到东航已有的库存系统（Seat Inventory），同样是实现在MongoDB上面的。在确定库存后根据库存结果再从Fare Cache系统内查询相应的运价。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spark集群则是另外一套计算集群，通过Spark MongoDB连接套件和MongoDB Fare Cache集群连接。Spark 计算任务会定期触发（如每天一次或者每4小时一次），这个任务会对所有的可能的运价组合进行全量计算，然后存入MongoDB，以供查询使用。右半边则把原来实时运算的集群换成了Spark+MongoDB。Spark负责批量计算一年内所有航班所有仓位的所有价格，并以高并发的形式存储到MongoDB里面。每秒钟处理的运价可以达到数万条。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当来自客户端的运价查询达到服务端以后，服务端直接就向MongoDB发出按照日期，出发到达机场为条件的mongo查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;批处理计算流程&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLUpUtrRLgEuB9JzauK30bBzBEeMVIjpMqlvic6hicuqrvlOyl0XCejsZKQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里是Spark计算任务的流程图。需要计算的任务，也就是所有日期航班仓位的组合，事先已经存放到MongoDB里面。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务递交到master，然后预先加载所需参考数据，broadcast就是把这些在内存里的数据复制到每一个Spark计算节点的JVM，然后所有计算节点多线程并发执行，从Mongodb里取出需要计算的仓位，调用东航自己的运价逻辑，得出结果以后，并保存回MongoDB。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Spark 任务入口程序&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spark和MongoDB的连接使用非常简单，下面就是一个代码示例：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLU0kKS1vwE5LcScY7CxhTEPJAVicwiatSrjolmnbct9jYXLneygkrAbgxA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;strong&gt;&lt;span&gt;处理能力和响应时间比较&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这里是一个在东航POC的简单测试结果。从吞吐量的角度，新的API服务器单节点就可以处理3400个并发的运价请求。在显著提高了并发的同时，响应延迟则降低了10几倍，平均10ms就可以返回运价结果。按照这个性能，6台 API服务器就可以应付将来每天16亿的运价查询。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/icNyEYk3VqGmlfT7QD3uClicEE2TibW9KLUP3ClPfrrGkZOWnicedfw3qW9Zaq45M4iaQ5cr7AwibwQazbcicCHF5ovqA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;Spark ＋ MongoDB演示&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接下来是一个简单的Spark+MongoDB演示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;安装 Spark&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="line-height: 25.6px; white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;# curl -OL http://d3kbcqa49mib13.cloudfront.net/spark-1.6.0-bin-hadoop2.6.tgz&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;# mkdir -p ~/spark&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;# tar -xvf spark-1.6.0-bin-hadoop2.6.tgz -C ~/spark --strip-components=1&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试连接器&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="line-height: 25.6px; white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;# cd ～／spark&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;# ./bin/spark-shell \&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;--conf "spark.mongodb.input.uri=mongodb://127.0.0.1/flights.av" \&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;--conf "spark.mongodb.output.uri=mongodb://127.0.0.1/flights.output" \&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;--packages org.mongodb.spark:mongo-spark-connector_2.10:1.0.0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;import com.mongodb.spark._&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;import org.bson.Document&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MongoSpark.load(sc).take(10).foreach(println)&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;简单分组统计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据： 365天，所有航班库存信息，500万文档&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务： 按航班统计一年内所有余票量&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="line-height: 25.6px; white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;MongoSpark.load(sc)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;.map(doc=&amp;gt;(doc.getString("flight") ,doc.getLong("seats")))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;.reduceByKey((x,y)=&amp;gt;(x+y))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; .take(10)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;.foreach(println)&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;简单分组统计加条件过滤&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据： 365天，所有航班库存信息，500万文档&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;任务： 按航班统计一年内所有库存，但是只处理昆明出发的航班&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="line-height: 25.6px; white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;import org.bson.Document&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;MongoSpark.load(sc)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .withPipeline(Seq(Document.parse("{ $match: { orig : &amp;nbsp;'KMG' &amp;nbsp;} }")))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; .map(doc=&amp;gt;(doc.getString("flight") ,doc.getLong("seats")))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; .reduceByKey((x,y)=&amp;gt;(x+y))&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; .take(10)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; .foreach(println)&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;性能优化事项&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用合适的chunksize (MB)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Total data size / chunksize = chunks = RDD partitions = spark tasks&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;不要将所有CPU核分配给Spark&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;预留1-2个core给操作系统及其他管理进程&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同机部署&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;适当情况可以同机部署Spark+MongoDB，利用本地IO提高性能&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面只是一些简单的演示，实际上Spark + MongoDB的使用可以通过Spark的很多种形式来使用。我们来总结一下Spark ＋ MongoDB的应用场景。在座的同学可能很多人已经使用了MongoDB，也有些人已经使用了Hadoop。我们可以从两个角度来考虑这个事情：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对那些已经使用MongoDB的用户，如果你希望在你的MongoDB驱动的应用上提供个性化功能，比如说像Yahoo一样为你找感兴趣的新闻，能够在你的MongoDB数据上利用到Spark强大的机器学习或者流处理，你就可以考虑在MongoDB集群上部署Spark来实现这些功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你已经使用Hadoop而且数据已经在HDFS里面，你可以考虑使用Spark来实现更加实时更加快速的分析型需求，并且如果你的分析结果有数据量大、格式多变以及这些结果数据要及时提供给前台APP使用的需求，那么MongoDB可以用来作为你分析结果的一个存储方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;blockquote style="line-height: 25.6px; white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;完整PPT请移至阅读原文下载。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;版权申明：内容来源网络，版权归原创者所有。除非无法确认，我们都会标明作者及出处，如有侵权烦请告知，我们会立即删除并表示歉意。谢谢。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Sun, 18 Sep 2016 17:03:02 +0800</pubDate>
    </item>
    <item>
      <title>《程序员》：Docker技术商业落地的思考</title>
      <link>http://www.iwgc.cn/link/2691547</link>
      <description>&lt;p&gt;&lt;span&gt;Docker的火热，催生了人们对于其商业模式的探讨，虽然目前Docker还有很多有待完善之处，但这并不妨碍人们对于Docker的追捧，但我们也应理性地看到，Docker并不是万能药，对其商业模式的探讨，将有力促进Docker的健康发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Docker技术虽然刚问世3年，但其发展如火如荼，受到大量企业客户和个人开发者的追捧，作为一项开源技术，Docker有一点和Java很像，那就是它们都是标准。作为标准的企业级应用开发语言，绝大多数企业内部的业务应用都是用Java开发的，而Docker正在成为应用封装的标准，未来企业内部的业务应用大多会封装成Docker的形式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;标准化最大的好处是带来效率的提升。Docker经常被类比为集装箱，集装箱的出现极大地提升了货物装载的效率，集装箱把货物的封装形式标准化，为码头、货轮、卡车等货运全产业链各环节都带来了标准化。类似地，Docker把应用封装成标准化的容器应用，使应用的交付、部署、运行、更新等全生命周期的各个环节都变得标准，极大地提升企业的应用管理效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;新一代PaaS平台将成为Docker技术商业落地的最好形式&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Docker技术火热的同时，人们也在思考如何商业化的问题。本质上讲，Docker技术如何商业化，跟其他任何开源技术商业化没有区别。以Java技术为例，Java技术本身是开源的，Java的标准版、企业版也都是开源的，而基于Java的中间件是商业化的闭源产品，Java中间件提供了企业级Java应用的标准运行环境，解决了Java应用发布（部署war包）、网络通讯（消息队列）、存储访问（数据库连接管理）等多方面需求，方便了企业在生产环境使用基于Java开发的业务应用。Java中间件产品的商业化非常成功，比如WebLogic、WebSphere，直至今天，它们仍然在企业级应用领域占有重要地位。与之相类似，Docker技术本身开源，基于Docker的PaaS平台很有希望成为商业化产品。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常人们把云计算分为三层，IaaS、PaaS、SaaS。IaaS管理资源，提供资源的弹性；PaaS管理应用，提供应用的弹性；SaaS面向服务，提供服务的弹性。过往十来年云计算的发展，主要集中在IaaS和SaaS领域，IaaS领域既有成熟的开源技术（OpenStack）也有商业巨头（AWS），SaaS领域也有商业巨头（Salesforce），但是PaaS领域一直发展得不温不火，其开源技术（CloudFoundry）和商业公司（Heroku）都没有大获成功。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Docker的出现把应用都变成容器应用，使得应用的打包、交付、运行方式变得标准了，这样PaaS平台只需要管理标准的容器应用，为容器应用提供全生命周期的标准化管理，比如打包、测试、分发、部署、运行、更新等。可以说，Docker的出现，使得PaaS平台也变得标准了。在Docker出现之前，PaaS平台要支持各种形式的应用，比如CloudFoundry要支持Java、Python、PHP等各种常见语言，从编译开始构建应用，然后调度运行，由于应用没有标准化，CloudFoundry为了支持各种应用的各种需求，变得异常复杂。Docker成为应用的标准封装、交付、运行方式，推动了PaaS平台的标准化，降低了PaaS平台的复杂度，提升了PaaS平台的易用性。这样基于Docker的新一代PaaS平台，由于更加标准化、更加轻量、更加简便，极大地方便了企业使用PaaS平台来落地Docker。新一代PaaS平台很有可能成为Docker技术商业落地的具体产品形式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;基于Docker的私有PaaS平台成为传统企业新宠&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Docker技术以PaaS平台的形式在不同类型的企业客户落地来实现商业化有不同的方式。比如提供基于Docker的公有PaaS服务，也称为Container-as-a-Service（CaaS）；再比如给企业提供私有PaaS平台。下面主要讨论后面一种方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对私有PaaS平台有需求的客户主要是传统大型企业，比如金融、运营商、能源、广电等。这些传统企业使用私有云平台并不是因为技术原因，主要是由于其行业监管缘故，数据比较敏感，从而无法使用公有云。近年来，传统企业的业务场景发生了变化，其传统业务逐步向互联网相关业务转变，传统企业需要新一代云计算IT架构支撑其互联网业务，对基于云计算的新一代IT架构需求越来越强烈。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统企业的现有IT架构主要还是基于国外的商业化软硬件产品，这些产品搭建的IT基础架构偏传统，跟互联网公司普遍采用的云计算架构相去甚远。原因在于，传统业务跟互联网公司的业务场景不一样，传统业务的日常业务量相对恒定，业务本身不会经常变化，比如银行网点每天的业务量不会变化很大，银行网点自身的业务也不会总是变化，但是互联网业务的业务量变化非常剧烈，比如淘宝双11当天的业务量是平时的数十倍，而且互联网业务的迭代非常快，像Google、Facebook之类的互联网公司每周都会更新业务应用。传统IT架构在设计之初就是面向业务量平稳的场景，因此无法支持业务量剧烈变化的场景，而不可预测的业务量暴增会导致传统IT架构无法承载。再者，传统IT架构也不支持业务应用频繁变化的场景，传统业务的更新频率至少是以月为单位。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于Docker技术的PaaS平台能很好地帮助传统企业支撑其互联网业务。比如基于Docker的PaaS平台能很好地提供应用的弹性，既支持业务应用弹性扩展，又支持业务应用快速迭代更新，非常适合互联网业务场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年初，我们应某TOP3视频网站的要求，以网络春晚抢红包为模拟业务场景，设计了联合解决方案。我们作为“中间件”层，以Docker的方式解决了高并发挑战。一方面，我们拥有基于缓存的解决方案，将依赖于数据库的操作尽量置于缓存中进行，提高应用的性能。另一方面，我们将底层计算资源组成一个资源池，向上承载核心业务，实现组件的横向扩展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，基于Docker的私有PaaS平台提供的容器编排能够帮助传统企业客户将复杂的业务应用以独立的容器组件方式运行，满足客户对于稳定可靠的核心需求。借助容器技术，这种私有PaaS平台实现了应用的快速部署，使应用的交付变得标准，极大地消除技术部署的局限性，提高客户产品的交付及运维效率。上海证券交易所就是一个非常有代表性的客户，上交所在自身业务系统进行了Docker化的探索和实践，非交易类应用，包括软件应用测试平台、行情监控、行情播报等应用正在逐步往容器上迁移。通过将这些应用置于同一个容器平台，上交所使测试平台得以统一，解决了原先异构环境带来的麻烦，资源池化使平台拥有自动化运维的能力，减少后期人力驻场维护的成本，提高应用测试效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;机遇与挑战并存&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;传统企业在落地私有PaaS平台的时候也会遇到各种各样的困难。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先，传统企业已有的IT系统和基于云计算的IT系统在管理和运行方面存在巨大的差异。传统企业常见的IT管理组织架构分为开发中心和数据中心（可能还有测试中心）。开发中心满足业务部门的需求，负责业务需求的实现；数据中心负责运维业务应用，保证业务稳定运行。对于金融、运营商这样的传统企业，保障业务稳定是最为重要的目标。因此，他们采用了严格、复杂的IT管理流程，开发中心和数据中心各司其职，进而保证业务稳定。这种严格、复杂的IT管理流程适用于传统业务，但当传统企业面向互联网业务时，这种流程就不适用了。根本原因是互联网业务处于高度竞争的状态，业务需求频繁变化，相应地要求业务应用能快速响应业务需求变化，但是传统IT系统无法适应这种场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于Docker的PaaS平台，能帮助传统企业实现敏捷开发、微服务架构、持续集成、持续交付、自动化运维等各种源自互联网公司的DevOps方法，快速响应业务需求的变化。但是，传统企业无法直接采用这样一套PaaS平台，因为如果要按照互联网公司那样实现DevOps，促进开发和运维的融合，肯定要改变传统企业已有的IT管理方式和流程，包括组织架构的调整，这对于传统企业绝不是一朝一夕就能做到的。针对这一困难，传统企业也提出了双模架构，所谓“双模”是指传统IT模式和新IT模式，其传统业务仍然采用传统IT模式来管理，其互联网相关新业务采用新的基于云计算的IT模式来管理。这样传统企业可以基于全新的云计算IT架构来支撑其互联网业务，并采用DevOps方法来管理新的IT架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;再者，传统企业对于业务的稳定性非常敏感，新技术的不稳定性是传统企业采用新技术的最大顾虑。Docker技术本身还有一些不成熟和待完善的地方，特别是网络管理和存储管理方面，还很不成熟。Docker目前的网络方案还非常新，缺乏大规模生产实践，最新的Docker 1.12版采用的网络方式是Overlay，也是一种SDN。Docker的Overlay网络性能还不够好，跟常见OpenStack的SDN方案还有很大差距。而且，目前Docker本身还不能对应用的网络带宽使用进行限流，如果一个应用对网络带宽消耗很多，有可能影响其他应用的网络使用。传统企业，特别是金融客户，对网络的需求比较复杂。金融有很多业务应用因为监管的需求，必须要做到网络隔离，保障业务应用的安全。此外，金融的很多业务应用需要保证数据的强一致性，在分布式环境下，比如同城两数据中心双活，这些强一致性的应用对网络的延迟有严格要求，如果达不到要求，那么强一致性就很难保证。Docker的存储管理就更弱了，目前只能支持把宿主机的目录映射到Docker内部来实现持久化存储。基于Docker的一些第三方存储解决方案都很新，比如Flocker，虽然能提供分布式环境下容器应用的数据存储、恢复、迁移，但都还没有大规模生产实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;写在最后&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Docker作为云计算领域最为火热的技术，毕竟只诞生三年左右，其未来的技术发展方向、商业模式等还都处在早期摸索阶段，但Docker技术发展极为迅猛，正在被广大企业客户接受，相信很快就会进入成熟发展期，其技术发展方向和商业模式很快就会明确。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;作者简介：王璞，数人云创始人&amp;nbsp;&lt;/p&gt;&lt;p&gt;本文节选自《程序员》，更多精彩请订阅《程序员》&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 14 Sep 2016 17:30:29 +0800</pubDate>
    </item>
    <item>
      <title>什么是DNA电路及其潜在应用</title>
      <link>http://www.iwgc.cn/link/2691548</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuia3xrFNb24DZw2oPFJbMUFWNXXlGSQVGAibNqeACnP6pYXdz8VDVicra73JcQLA38C5jmZXW2cLCcGA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们见过用黏菌、肥皂膜、水滴计算，甚至用10000台Domino服务机来计算。如今，DNA可以在试管内做加减乘除的数学计算了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;速度并不快，计算需要几个小时才能完成。它的好处在于：它们很小，能在潮湿的环境下工作。试想在你的血管或是细胞内进行运算，如同一堵可编程的防火墙，有针对性地检测和预警健康指标，然后触发一个局部响应。或者，如果你在写科幻小说，也能把海洋变成一台巨型计算机？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;应用产品听起来就像是科幻小说：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;以前控制化学反应网络的设备和DNA治疗产品都被局限于有限状态的控制，模拟DNA电路将允许更复杂的模拟信号处理和控制。DNA机器人技术允许设备自主操作（例如，在纳米结构上行走），但也被有限状态控制所限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相比纯粹的数字控制，模拟DNA电路可以让分子机器人用实时模拟控制电路来提供更复杂的控制。许多动态地从环境中学习的人工智能系统（例如神经网络和概率推理）需要模拟计算，而且模拟DNA电路可用于神经网络、贝叶斯概率推理系统的反向传播计算。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;工作原理&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当在测试管中被混合时，它们合成DNA链，形成一个模拟电路，通过合成或者破坏化学键实现加减法、乘法的运算。DNA电路使用特定的DNA链的浓度作为信号，而不是电压信号。研究人员通过测量反应达到平衡时特定的传出的浓度来解决数学问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我花了些时间找到了一篇免费版的原著论文：Analog Computation by DNA Strand Displacement Circuits。论文写得很好，但价格我承受不起。如果你想了解整个领域的概述，那么这里还有一篇非常好的介绍：DNA Circuits for Analog Computing。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一些摘要：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;DNA计算是什么？&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DNA计算是使用DNA作为硬件来执行计算[1]。计算通常是基于DNA杂交和DNA链位移。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;我们为什么对DNA计算感兴趣？&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DNA是一种基于沃森-克里克碱基对高度可编程的生物材料（A-T，G-C）。我们可以编程控制序列的反应途径和基于DNA系统动力学。以大规模DNA为基础的数字电路已被证明[1]。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;DNA电路在模拟计算中的潜在应用&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;模拟电路需要更少的逻辑门电路来执行算术操作。例如，我们只需要一个门实现模拟系统中的每个算术运算（加法，减法和乘法）。在数字系统中，我们需要几门。此属性使模拟DNA电路在资源有限的环境中非常有用，例如，在活细胞内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;自然界是模拟和数字的混合模式[2]。模拟DNA电路可以作为天然模拟系统的接口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;为什么模拟？&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;模拟电路相比数字电路上有自己的优势。例如，在相同的精度下，模拟电路进行数值计算需要的逻辑门比数字电路更少。基本算术运算，如加、减、乘法是由模拟电路单逻辑门完成，而数字电路需要多个门来完成每个基本的算术运算。这意味着，模拟电路比相应的数字电路消耗更少的资源，这个属性使模拟电路在资源有限的环境中非常有用（例如，在活细胞内）。此外，对于一些应用，模拟电路可以比数字电路更强大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;可以实现的电路&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;计算多项式函数的电路：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;策略：简单地通过编程门的输出链序列将逻辑门连接。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;潜在问题：静态输入与动态输入&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;技巧：所有乘法门的Im2输入使用静态输入，设置G’m3和GM4之间的浓度比。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;泰勒级数与牛顿迭代&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分配给每一个线的公式描述了通过它的信号。每个门被分配一个数字，为了方便地描述电路设计。对gate-2，gate-4，gate-5，gate-6，gate-7和gate-8的输入范围是1。gate-1的输入范围是4。gate-3的输入范围是2。输入范围取决于一个门的输入信号确定的上限，我们按照测试的模拟输入范围来输入信号。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;My Test Tube Filled With DNA Is Better Than Your Mesos Cluster&lt;/p&gt;&lt;p&gt;翻译：赵屹华 审校：刘翔宇&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 14 Sep 2016 17:30:29 +0800</pubDate>
    </item>
    <item>
      <title>【SDCC专访】网易尧飘海：互联网+容器云平台的架构机遇与挑战</title>
      <link>http://www.iwgc.cn/link/2691549</link>
      <description>&lt;p&gt;&lt;span&gt;2016年9月22日-23日，由CSDN重磅打造的SDCC 2016大数据技术&amp;amp;架构实战峰会（杭州站）将在杭州举行。大会前夕，网易云计算架构师尧飘海接受了CSDN专访，谈及了对架构的理解、Docker的使用经验和微服务的案例，以及技术人提升之道等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhX2otvVU7kcT5gl5bicSMymlmCPpPho7URHWc6ClWeEnfR6aUEGwNAgjkjCic8DcAG1l22zJFibIfwA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;网易云计算架构师 尧飘海&lt;/span&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;尧飘海，网易云计算架构师，负责容器云计算平台建设，致力于自动化平台的架构和实践。在互联网产品开发和规范化的系统建设有较多的经验，对分布式系统设计开发、性能调优，系统架构有一定的经验和理解，热爱开源和技术交流。&lt;/span&gt;&lt;/p&gt;&lt;section label="Copyright © 2016 playhudong All Rights Reserved." style="
width:100%;
margin:1em auto;
text-align: center;" donone="shifuMouseDownPayStyle(&amp;#39;shifu_t_050&amp;#39;)"&gt;&lt;section&gt;&lt;/section&gt;&lt;section style="
margin-top: -1em;
"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;采访正文&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：请先和大家介绍下您和目前所从事的工作以及关注哪些技术领域？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;大家好，我从09年毕业后加入网易一直到至今，中间经历过不同的项目的不同职责的转变，从博客、社交、游戏、开源项目、IM到云计算及容器相关的领域，目前主要关注云计算相关知识体系的学习，包括架构、虚拟化、容器及编排等相关的技术领域。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：作为一名架构师，能否谈下您对架构的理解?&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;好的架构需要在理解业务，同时又能预见业务的变化的过程中进行不断的规划设计和实践过程。业务本身不在变化和发展中，好的架构能保证至少未来1年内变化的合理性，如果架构经常在很短的时间内进行变化，对人员的学习成本也会提高，同时对相关领域的内容也可能未得到验证，对团队知识的积累过程也有一定影响，因此需要对业务的熟悉的基础上进行抽象，把通用的框架知识沉淀下来，上层的业务容许合理的进行变化和试错，但也要经过大家的认可。软件的架构和人及组织的架构形式非常相似，即需要在现有的业务上进行发展，也需要进行下一班人员的培养和规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：您觉得作为一名云计算架构师，和互联网公司的后端、前端等架构不同，需要具备哪些能力？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;由于云计算的业务及要求的相关的知识点非常多，就架构师职位的通用的抽象部分关键能力，我个人认为并没有非常大的不同，即有一定的通用性也有对相关知识点的要求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时云计算的范围非常广，就在网易来说，云计算整体都是自主研发和建设的，从机房的规划建设到实施，从IaaS的搭建到PaaS服务（包括安全），甚至部分SaaS的业务都会涉及到，因此从硬件到软件，从底层到上层都有可能涉及到，对这样的一套复杂的系统进行建设，是一个极高复杂度的工程，对架构师具有非常大的锻炼和考验，也不是单个人能完成，需要团队的努力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：可否介绍&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;下网易蜂巢所用&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;到的关键技术以及其平台架构是怎样的?&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;组成网易蜂巢的技术可分为4大块：容器技术、编排技术、PaaS技术、IaaS技术四层。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;容器技术基于当前流行的开源项目Docker，容器是一个完整的软件运行环境，打包了操作系统、库、运行时环境、业务代码，这使得容器作为一个整体一旦构建完成后可随处运行，在网易蜂巢中交付给用户的最小单位就是容器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;容器是蜂巢提供的计算资源最小单位，实现一个可水平扩展的产品服务端架构，则需要不同的容器组合起来，才能组成美丽的花环，这个功能在网易蜂巢中称之为“服务”，服务的运维如发布、回滚、扩容、缩容以及成员管理需要引入编排服务来实现，编排技术目前使用的Kubernetes+自定义插件的方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PaaS服务的技术，主要包括数据库服务、缓存服务、对象存储服务、搜索服务、负载均衡服务、DDoS防御服务等通用服务的封装，减少项目的维护成本。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;IaaS服务的技术基础是虚拟化技术，包括计算、网络、存储的虚拟化技术，目前是基于OpenStack开发的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：以Docker为代表的容器技术在全世界范围内迅速发展，容器云也逐渐被广大开发者所熟知。据悉，网易蜂巢作为容器云服务商开始提供完善的DevOps工具链支持自助运维，帮助开发者提升研发效率。那么网易蜂巢是如何平衡开发、运维以及质量保障部门之间的沟通协作的呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;最早在公司内部我带领的团队负责运维发布平台的建设和实施，主机规模在万台服务器以上，这个系统使用的人员刚好包括开发、运维以及质量保障部门三种角色，每种角色主要承担的职责不会有太多的变化，但是整体的运维效率，沟通成本会降低很多，每个角色都能相应的担当共用的部分的工作，比如环境的搭建和服务的发布，这些都只需要通过自动化的方式就可以，由于这些信息和配置都是标准或透明化，简单明了，大大的减少沟通的成本，从工程化的建设上来看是比较好的实践，内部系统的每月的发布数到达10万次以上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：你如何看待容器技术的发展，在Docker是使用方面有哪些可以分享的经验？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;容器技术很早就存在，最近几年才各公司才开始大规模的流行，尤其是以Docker作为容器技术的倡导者在其中所担当的影响力和生态的建设起到很大的推动作用。从2013年，网易内部开始在千万级别的系统中开始使用Docker技术一直运行到现在，经历了不同的版本的不同问题最才都通过自己和社区的努力解决掉，由于早期的Docker使用的数量越来越多，如何监控和管理这些数量的容器是我们遇到的问题，当时各方面的生态不是很成熟，这个系统由于当时技术及业务选型，因此最早也大部分把容器当成更轻理级别的虚拟机来使用，因此有状态的容器的优雅解决是最早遇到问题之一，到后来编排相关的技术慢慢的发展起来，再到网络平坦化，安全隔离等相关问题，而网络，安全，存储等相关的技术需要和底层的IaaS的充分结合起来才能更好的发挥容器技术的优势。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：如何看待微服务的发展，你们内部微服务改造这块有相关的案例吗？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;微服务的形态很早在国内外公司中进行实践，Martin Fowler大师在12年对微服务的概念进行了统一并充分归纳和总结了其相关的技术特点和优势，然后伴随着容器技术发展越来越火起来，主要是老爷子大师为大家指引了微服务的技术方向，但是没有给出微服务的最佳实践。容器技术在DevOps上的流程上的担当的角色起到了不可变基础设施的交付，好的微服务实践需要完善的基础服务和成熟DevOps工具的的支撑才能起到良性作用，否则不经过评估各种资源的情况就轻易实施微服务架构反而会适得其反。网易内部也很早就开始在这方面进行改造：包括云音乐，考拉，云课堂等产品团队，大部分项目是逐步迭代的，即是整体架构和微服务架构的组合，如果在不同的时期采用不加的架构也是架构师的职责所在，需要好好的设计和把控。网易蜂巢目前就是在基于场景化的服务下提供的专注DevOps工具链和微服务架构支撑的云平台建设，期待和大家一起来共建微服务生态。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：您作为从业多年的技术人员，可否分享下您的学习新知识或技能的方法？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;计算机领域的知识常常变化，云计算方面也是如此，但是基础相关的内容变化点不是很大，因此打好基础肯定是第一步的，然后再根据自身的兴趣点去拓展，包括纵向与横向的发展选择。总之，在这个信息万变的时代，学习新知识或技能需要通过开阔自己眼界，和不同的交流，最后如果变成自己的财富还是只能靠自己来完成，如何系统的把握自己要发展方向和选择也是我常常在思考的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：您也是开源的爱好者，能够分享您的开源经历和理念？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;2011年左右我们的团队开发和开源了基于NodeJs的Pomelo游戏框架，这个开源项目目前也还是很火，在国内至今应该还是排名靠前的。它是基于我们在开发商业的游戏软件过程中的总结和思考，很多的团队如果在开始开发实时游戏项目的时候会遇到各种各样的问题，因此我们总结了我们的最挂实践开源出来服务于大家，后来这个开源项目被应用到不同的项目之中，包括消息推送，聊天应用，云计算服务应用。好的开源需要很多的工作铺垫和投入，之前通过项目和演讲和不同的人沟通交流，总是能带来新的想法和碰撞，非常有意思。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;CSDN：在本次SDCC 2016（杭州）架构峰会上，您分享的话题是？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;尧飘海：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;SDCC杭州架构峰会分享主题是网易蜂巢云计算平台的优化实战，主要是介绍网易蜂巢架构发展过程中碰到的问题及怎么如何使用互用网应用的思维去架构去实现云平台的建设，同时相信会有很多有经验的同行，非常期待能和大家一起交流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhX2otvVU7kcT5gl5bicSMymb0kH7TXzKhAcvS8C64tWmwxkDOxOxuwJU6a1xFahkQu1VicD0yOwHRA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 14 Sep 2016 17:30:29 +0800</pubDate>
    </item>
  </channel>
</rss>
