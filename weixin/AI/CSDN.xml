<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>SDCC 2016北京站高吞吐数据库架构专题讲师议题先睹为快</title>
      <link>http://www.iwgc.cn/link/3204191</link>
      <description>&lt;p&gt;&lt;span&gt;2016年11月18日-20日，由CSDN重磅打造的年终技术盛会，SDCC 2016中国软件开发者大会将在北京举行，大会面向国内外的中高端技术人员，聚焦最前沿技术及一线的实践经验，以助力企业的技术升级和改造、全面提升技术人员的综合实力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgZ5bDxRe3EpvTDrX5ia2feZtkS1pOH6JXruG63Ynvicopx4Oa3yFnBGLb7bWfB00crdtKrIwSfIwA/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本次大会受邀嘉宾均来自科技圈前沿领域，十二大专题分设，议题全面，干货先行，聚焦当下热门话题，精彩纷呈。业界大腕精英齐聚，共同探讨电商架构、高可用架构、编程语言、架构师进阶、微信开发、前端、平台架构演进、基于Spark的大数据系统设计、自动化运维与容器实践、高吞吐数据库架构、移动视频直播技术实践、魅族开放平台开发者大赛等内容。才思凝萃，热点碰撞，饕餮盛宴，不虚此行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;较之单向传输，技术大会更倾向于双向交流，在与会者之间搭建起沟通的桥梁，致力于创造同技术大牛零距离交流的机会，智慧碰撞，灵感交互，更多意想不到的收获，尽在SDCC 2016北京站，还在犹豫什么？赶紧点击报名传送门，业界巨匠，触手可及。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为本次大会十二大专题之一，高吞吐数据库架构专题将邀请国内外的数据库专家，共同探讨MySQL、NoSQL、Oracle、缓存技术、云端数据库、智能数据平台等领域的前瞻性热点话题与技术，尤其是在高数据量情况下实现高吞吐数据库的设计。本专题演讲嘉宾、议题等相关内容现已火热发布，抢先奉上，一睹为快：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;大牛集结号（持续更新中）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;SDCC 2016·北京站的高吞吐数据库架构专题上，你将会看到这些业界老司机：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;金官丁 热璞科技CTO&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;马进 网易&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;研究院资深开发工程师&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;莫晓东 微信支付高级DBA&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;谭磊 NABA北美区块链协会联合发起人&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;李跃森 腾讯云首席PostgreSQL数据库架构师&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;王义林 京东金融杭州研发中心数据库中间件研发&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;张冬洪 微博研发中心DBA&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;颜世光 百度高级软件架构师&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;古雷 央视网络 技术事业群DBA&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们不仅在讲师层面有内部沟通会，而且现场会设置专门的提问环节、现场微信群优先获得会议课件、讲师结束后微信群进行答疑……&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;锁定热门话题，全程高能，进入一级备战状态（持续更新中）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;1. 演讲主题：分布式数据库DDB性能优化实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; DDB自06年开始为网易各大互联网应用提供稳定可靠的分库分表服务，是云音乐、考拉、博客等网易知名产品的背后功臣，同类型的系统有阿里TDDL、DRDS、开源系统Mycat等。本次分享会带大家了解DDB的基本功能，设计哲学和架构变迁，同时，作为杭研十年一剑的分布式中间件系统，DDB积累了大量的性能优化实践，这次选择了一些典型普适的优化案例，帮助大家理解在高并发高吞吐场景下，一些卓而有效的优化思路。最后跟大家聊聊DDB在“轻量云”时代的发展规划。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;2. 演讲主题：分布式数据库和区块链2.0&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;本次分享将剖析分布式数据库的原理和区块链技术的原理，他们之间的区别，以及如何可以把这两类技术有机结合在一起。帮助听众大致了解区块链技术，及如何把区块链的理念引入到分布式数据库之上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;3. 演讲主题：微信支付商户系统数据库探秘&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;分享内容主要从两大方面展开：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PGXZ 分布式数据库架构介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PGXZ技术揭秘：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PGXZ的动态扩容解决方案，业务无感知的动态扩容&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据倾斜解决方案，有效应对严重的数据倾斜问题&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;海量数据高速排序算法实现，上亿条数据快速排序输出&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高效的内置集群分区表，高效处理分区表&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;冷热数据分离，长尾业务数据成本治理&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据高可用保证，两地三中心的自动容灾能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;4. 演讲主题：分库分表中间件CDS-原理与实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题介绍： &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;CDS（Completed Database Sharding）是京东金融自主研发的高性能、高可靠分库分表中间件。围绕高吞吐数据存取需求，介绍并分享CDS各项特性、产品的演进过程、具体解决的问题，以及在实施过程中的有益实践。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;5. 演讲主题：微博Redis定制化之Tribe系统介绍&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;演讲划分为四个部分：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微博Redis的使用介绍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Tribe系统设计的考量&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Tribe系统性能测试对比&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Tribe系统运维点滴&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;6. 演讲主题：百度万亿量级数据库的构建与应用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;搜索引擎每天处理几万亿的超链与网页数据，过去多数工作由MapReduce完成，从一篇网页产生到网民能搜索到有天级延迟。2014年开始，百度对核心搜索架构进行了大规模重构，设计实现了海量实时数据库Tera，并以此为基础，构建了第三代抓取与索引系统，将网页收录延迟降低到分钟级。核心数据库Tera存储了全网数万亿的链接与网页信息，支撑了每天近十万亿次的实时查询与更新操作，当前已经在GitHub开源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本次议题主要介绍Tera的设计思想，以及研发应用过程的性能坑，探讨混合乐观和悲观锁提高分布式事务吞吐的解决思路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多专题、更多精彩，陆续更新中，详情追踪，尽请关注大会官网，惊喜，从未间断。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;【阅读原文】&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;即刻抢票！大会报名：如今，有一张小小的门票，你在这头，大牛们的顶级盛会在那头。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 24 Oct 2016 17:23:38 +0800</pubDate>
    </item>
    <item>
      <title>《程序员》Motan：支撑微博千亿调用的轻量级RPC框架</title>
      <link>http://www.iwgc.cn/link/3152455</link>
      <description>&lt;blockquote style="line-height: 25.6px; white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;本文为《程序员》原创文章，未经允许不得转载，更多精彩请订阅2016年《程序员》&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan（&lt;span&gt;https://github.com/weibocom/motan&lt;/span&gt;）是微博技术团队研发的基于Java的轻量级RPC框架，已在内部大规模应用多年，每天稳定支撑微博上亿次的内部调用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;RPC调用优势&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着公司业务发展，微博内部调用和依赖越来越多，传统方式逐渐显现出弊端。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;jar包依赖调用使得服务间耦合太紧，相互影响，同时也存在跨语言调用问题；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;HTTP依赖调用在协议上比较重，常在性能和效率上出现瓶颈。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;越是大型复杂的系统，越需要轻量的依赖调用方式，RPC依赖调用很好地解决了上述问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;典型RPC框架对比&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前，业界RPC框架大致分为两类，一种偏重服务治理，另一种侧重跨语言调用。服务治理型的RPC框架代表是Dubbo和DubboX。前者是阿里开源的分布式服务框架，实现高性能的RPC调用同时提供了丰富的管理功能，是一款应用广泛的优秀RPC框架，但现在维护更新较少。后者则是当当基于Dubbo扩展，支持REST风格的远程调用、Kryo/FST序列化，增加了一些新功能。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这类RPC框架的特点是功能丰富，提供高性能远程调用、服务发现及服务治理能力，适用于大型服务的解耦及治理，对于特定语言（如Java）项目可以实现透明化接入。缺点是语言耦合度较高，跨语言支持难度较大。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;跨语言调用型RPC框架有Thrift、gRPC、Hessian、Hprose等。这类框架侧重于服务的跨语言调用，能支持大部分语言，从而进行语言无关调用，非常适合多语言调用场景。但这类框架没有服务发现相关机制，实际使用时需要代理层进行请求转发和负载均衡策略控制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan倾向于服务治理型，跨语言方面正在尝试与PHP调用集成。与Dubbo系列相比，功能或许不那么全，扩展实现也没那么多，但更注重简单、易用以及高并发高可用场景。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;功能特点&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan是一套轻量级的RPC框架，具有服务治理能力，简单、易用、高可用。其主要特色如下：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;无侵入集成、简单易用，通过Spring配置方式，无需额外代码即可集成分布式调用能力；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;集成服务发现和服务治理能力，灵活支持多种配置管理组件，如Consul、ZooKeeper等；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;支持自定义动态负载均衡、跨机房流量调整等高级服务调度能力；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于高并发、高负载场景优化，具备Failover、Failfast能力，保障RPC服务高可用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan的架构设计，分为服务提供方（RPC Server）、服务调用方（RPC Client）、注册中心（Registry）三个角色，Server向Registry注册声明所提供的服务；Client向Registry订阅指定服务，与Registry返回的服务列表的Server建立连接，进行RPC服务调用；Client通过Registry感知Server的状态变更。三者的交互关系如图1所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTESxplUSSk0M1Fq4pq64AntLOH0licibjJAtar1t132BLjC7ADuutHGjaQ/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1 Motan架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务模块化设计方便灵活扩展，Motan主要包括register、transport、serialize、protocol、cluster等，各个模块都支持通过SPI进行扩展，其交互如图2。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTE93aUibY9KfDRjiaGCCU9DFbBzW07b0NJ4vgo4nbI7el8tfIBMibqIlicNg/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图2 模块交互&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;register模块：用来和注册中心进行交互，包括注册服务、订阅服务、服务变更通知、服务心跳发送等功能；Server端会在系统初始化时通过register模块注册服务，Client端在系统初始化时会通过register模块订阅到具体提供服务的Server列表，当Server列表发生变更时也由register模块通知Client。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;protocol模块：用来进行RPC服务的描述和RPC服务的配置管理，这一层还可以添加不同功能ﬁlter用来完成统计、并发限制等功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;serialize模块：将RPC请求中的参数、结果等对象进行序列化与反序列化，即进行对象与字节流的互相转换；默认使用对Java更友好的hessian2进行序列化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;transport模块用来进行远程通信，默认使用Netty NIO的TCP长链接方式。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;cluster模块：Client端使用的模块，cluster是一组可用的Server在逻辑上的封装，包含若干可以提供RPC服务的Server，实际请求时会根据不同的高可用与负载均衡策略选择一个可用的Server发起远程调用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在进行RPC请求时，Client通过代理机制调用cluster模块，cluster根据配置的HA和LoadBalance选出一个可用的Server，通过serialize模块把RPC请求转换为字节流，然后通过transport模块发送到Server端。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;服务配置化增强了Motan的易用性，Motan框架中将功能模块抽象为四个可配置的元素，分别为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;protocol：服务通信协议。服务提供方与消费方进行远程调用的协议，默认为Motan协议，使用hessian2进行序列化，Netty作为Endpoint以及使用Motan自定义的协议编码方式。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;registry：注册中心。服务提供方将服务信息（包含IP、端口、服务策略等信息）注册到注册中心，服务消费方通过注册中心发现服务。当服务发生变更，注册中心负责通知各个消费方。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;service：服务提供方服务。使用方将核心业务抽取出来，作为独立的服务。通过暴露服务并将服务注册至注册中心，从而使调用方调用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;referer：服务消费方对服务的引用，即服务调用方。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan推荐使用Spring配置RPC服务，目前扩展了6个自定义Spring XML标签：motan:protocol、motan:registry、motan:basicService、motan:service、motan:basicReferer，以及motan:referer。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;高可用是Motan的一大特点，支持多种服务治理和高可用机制，包括：灵活多样的集群负载均衡策略，支持ActiveWeight/Random/RoundRobin/LocalFirst/Consistent等6种策略，并支持自定义扩展；自动集成Failover、Failfast容错策略，实现故障节点自动摘除，自动探测恢复，有效进行服务故障隔离，远离服务卡死及雪崩；连接池自定义控制，根据业务场景灵活配置；支持多机房间调用流量压缩、动态流量调整，实现真正的跨IDC的高可用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于高并发、高负载场景的优化，具备在高压力场景下的高可用能力，基准测试情况如下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Server端，并发多个Client，连接数50、并发数100的场景：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;空包请求：单Server TPS 18W&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;1K String请求：单Server TPS 8.4W&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;5K String请求：单Server TPS 2W&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Client端（场景对比如图3所示）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTE4k1o91icZicJ1sw8nEaARNTiaxch4BBbGnMvmzUbMPe3wFdjlHzgxh8lg/0?wx_fmt=png"/&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图3 场景对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan提供了基础性能测试框架，欢迎使用者进行性能评估，源码请参考Benchmark文档&lt;span&gt;https://github.com/weibocom/motan/tree/master/motan-benchmark&lt;/span&gt;。使用及易用性方面，使用Spring进行配置，业务代码无需修改，工程依赖只涉及核心5个模块，且可以按需依赖。关于项目中的具体步骤，请参考快速入门文档&lt;span&gt;https://github.com/weibocom/motan/blob/master/docs/wiki/zh_quickstart.md&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;是否重复造轮子&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前文提到，当前业界已有一些优秀的RPC框架，微博技术团队为什么要再造一个RPC框架呢？也正如上文所述，当前业界可供选择并持续维护的优秀RPC框架并不多。同时鉴于微博的内部调用量非常大，有很多定制化场景，要做到平滑迁移到这些RPC框架也需要做不少定制化改造，最终我们决定自主研发。主要从以下4个方面考虑：&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;框架的性能和可用性需要定制化。微博内部调用量级非常大，业界很少有类似场景应用经验可以借鉴，需要针对高并发和复杂逻辑场景定制优化，如Motan的Failover和Failfast机制等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;尽量做到平滑迁移。线上业务迁移需要保障业务改造尽量少，支持可快速回退，这个必须具备有效的机制保障，如Motan的inJvm机制等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;未来多语言兼容接入诉求。微博整体技术体系包括Java和PHP，还有部分Erlang、C++等，未来希望能通过这套服务框架解决整体内部依赖调用问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;技术积累储备及掌控力。微博具有一批实战经验丰富的技术专家，有实力又熟悉微博场景。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;发展及开源&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan当前在微博内部已广泛应用，每天支撑着上亿的内部调用，这也是个持续改进优化的过程。从服务发现、服务容错、快速失败、故障降级等多方面，针对复杂业务架构及高并发场景进行不断定制优化改进。随着虚拟化技术的兴起，弹性调度成为成熟技术框架不可或缺的能力，新的Motan框架技术负责人也适时对其增加了数据流量压缩、动态流量调整、多注册中心支持等功能，让它能适应时代的变化。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了方便其他团队的复用，针对Motan核心功能进行抽离和封装，去除掉微博自身依赖，形成今天的开源版本，希望能发挥开源社区的力量，进 一步发展和发挥Motan的价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;期待&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这唯快不破的互联网时代，软件的开发速度前所未有。这得益于软件已有模块的大规模复用。在过去的几年里，开源软件无疑在这方面做出了巨大的贡献。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微博技术团队的快速成长，受益于开源社区，同时也希望能为开源社区贡献自己的力量。Motan是经过大规模实践的轻量级RPC框架，希望未来 能有更多优秀的开源人进一步完善优化。也期待更多的公司可以享受它带来的便利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;Q &amp;amp; A&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;与业界已有的RPC框架，如Dubbo相比，Motan有什么优势？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Dubbo功能较丰富，与Dubbo的分层来对比，Motan的模块层次更简单，没有exchange和directory等。从压测的结果来看，在微博的业务场景下Motan的性能比Dubbo要好些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;现在的版本能用于生产环境吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Motan支持了微博的绝大部分底层核心业务，目前看来比较稳定。但是不排除会有一些使用环境不一致造成的问题，建议测试一下再应用到生产环境。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Motan支持跨语言调用吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前暂时只支持Java应用，针对PHPYAR框架的支持已在开发中，未来会支持更多语言。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;开源版Motan与微博内部的版本功能一样吗？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;开源版包含了内部版本中的大部分功能，主要是去除了内部的依赖组件相关的功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Motan支持异步调用吗，如何实现？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;请求在传输层面为异步调用，不需要额外配置，Motan本身还不支持异步调用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;在使用Motan时遇到了问题，应该去哪里提问？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可以在GitHub提交Issue（&lt;span&gt;https://github.com/weibocom/motan/issues&lt;/span&gt;）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;作者：&lt;/strong&gt;李庆丰，微博研发中心研发总监，负责微博消息箱及开放平台的技术研发工作。微博Motan RPC框架项目负责人。十年互联网架构研发及技术管理经验，专注高性能高可用架构。&amp;nbsp;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;订阅2016年程序员（含iOS、Android及印刷版）请访问&amp;nbsp;&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 122, 170); text-decoration: underline; font-size: 14px; line-height: 25.6px; max-width: 100%; background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span&gt;http://dingyue.programmer.com.cn&lt;/span&gt;&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz/Pn4Sm0RsAuj7pr8VDo3fPwSTL9lPuAxwZdhygL8iaXgRdmVaAWOf6nyKzU2TxhDzoqDO3AZyP8ORyjsVYo69rdA/640?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;订阅咨询：&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在线咨询（QQ）：2251809102&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;电话咨询：010-64351436&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;更多消息，欢迎关注&lt;span&gt;“&lt;/span&gt;&lt;a target="_blank" style="color: rgb(0, 122, 170); text-decoration: underline; max-width: 100%; box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;span&gt;程序员编辑部&lt;/span&gt;&lt;/a&gt;&lt;span&gt;”&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuiaBCibnicg87kue5JEYw7TTYF2l1Sfflft5pXMySicibQmEk8NXYrK7JmdMXpLG3FpgAVXCsp1XJ4hqJQ/640?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 20 Oct 2016 17:25:59 +0800</pubDate>
    </item>
    <item>
      <title>聚焦热门框架、架构、工程化 SDCC前端专题讲师强大阵容曝光</title>
      <link>http://www.iwgc.cn/link/3152456</link>
      <description>&lt;p&gt;&lt;span&gt;2016年，SDCC（中国软件开发者大会）相继走进了上海、深圳、成都、杭州各地。11月18日-20日将在北京完美收观，届时年度最受欢迎的企业、讲师将在这里齐聚一堂，约百位讲师将围绕电商架构、编程语言、前端开发、微信开发、视频直播、推荐算法等方面，总结分享过去一年自己感触最深、最具参考价值的实践探索，并畅想未来，把脉市场发展先机，是软件开发者、广大互联网人士及行业相关人士最具价值的交流平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;前端开发已成为近两年的热门技术领域，为了帮前端开发者把脉技术发展动向、借鉴行业领先企业研发实践、规划职业发展路线，SDCC 2016一如继往开设了前端开发专题论坛。本专题再次邀请到w3ctech &amp;amp;&amp;amp; 前端圈发起人周裕波担任出品人，特别邀请到台湾知名前端技术专家、澳大利亚悉尼企业Stackla前端团队Leader蒋定宇，Ruff架构师周爱民，QQ音乐&amp;amp;全民K歌高级工程师袁聪（eddyyuan），饿了么Node Team负责人黄鼎恒、360奇舞团前端工程师钟恒，58到家高级前端工程师周俊鹏担任大会讲师，将围绕热门框架实践（React Native、Vue.js）、工程化、核心技术（Node.js）、选型参考、职业生涯等方向展开深入分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;大会组委会今日正式公布前端开发专场讲师名单（排名不分先后）。&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;出品人：周裕波，w3ctech&amp;amp;前端圈发起人&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTEMBiaM0dtNeI611mjnnG48lW0WxZ1Ark1MpHL2Z5JibMzavHuLXy3mkVw/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;w3ctech&amp;amp;前端圈发起人 周裕波&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;周裕波，w3ctech &amp;amp;&amp;amp; 前端圈发起人，任职于奇虎360 奇舞团，SDCC 2015、SDCC 2016两界大会前端开发专题论坛出品人。有多年的前端开发经验及前端大会组织经验。曾先后组织举办过Web标准化交流会、走进名企、拥抱HTML5、JavaScript专题会议、Webreubild北京、Mobile开发者专题大会、CSS大会及FEDay，活跃于前端技术社区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;寄语：前端技术发展日新月异，稍一松懈就会被甩在队尾，常聆听并与前辈面对面交流经验，追踪与借鉴一线企业的研发实践， 是保持与时俱进的最有成效的办法。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为SDCC 2016大会前端技术开发专场的出品人，我将在讲师邀请，议题审核上，秉承技术干货分享、优先焦点企业技术骨干、紧扣当前热点难点的三大原则 ，会场增强交流环节，让大家不虚此行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;蒋定宇，Stackla前端团队Leader&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTEMKrgsPGcAUKyGTD2ThM6kZD1XNSwY8DE0HkbryMRQiaMckxxKPRnpxQ/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Stackla前端团队Leader 蒋定宇&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;蒋定宇，作为SDCC的老朋友，有着多达12年的前端开发经验。曾担任雅虎前端工程师与传教士，目前在澳大利亚悉尼的 Stackla 担任前端团队 Leader。专注于持续改善架构、开发环境、注重维护性、规范、模组化、自动化等技术方向。喜好与人分享，成立“台湾开发者在澳洲”社群，曾在SDCC、WebRebuild 等研讨会上进行分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;演讲主题：不断归零的前端人生&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题简介：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在台湾工作多年，两年半前决定离开熟悉的环境，到澳大利亚探寻不一样的生活。过往的经验及生活都得从零开始，而此时前端技术开始了史无前例的快速更迭，在如些变化剧烈的环境下让我在技术、产品、生活都领会到不少事情。本演讲将与大家分享过去这段日子的诸多心得。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在澳大利亚当个工程师: Get things done、MVP、Copy &amp;amp; Paste&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重新思索最佳实践: React、Webpack、CSS Strategies&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;渐进式改变 1：一人前端，如何引入新技术 React、Webpack&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;渐进式改变 2：三人前端，代码猴子做重构 ESLint、CSS Module&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;技术更迭：从 Promise 到 RxJS、从 Redux 到…?&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;保持开放的态度、做出取舍并欢迎变化。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;听众收益：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;放眼看世界，了解国外的前端发展状况；演讲内容极其丰富，包括各类热门前端技术解析、对比与思考，前端团队与时俱进的管理经验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;周爱民，知名JavaScript专家、Ruff架构师&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTEXJaibscsbj3swO77yvUDXCr5hR1PrTpYQ466CX4w8IiaCbn5bb90Ac5w/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Ruff架构师 周爱民&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;周爱民(Aimingoo)，Ruff架构师。有17年的软件开发、项目管理、团队建设的经验。曾任多家软件公司高级程序设计师、项目经理、部门经理、区域总经理等职，前支付宝（中国）公司业务架构师，前盛大网络平台架构师，豌豆荚架构师。著有《Delphi源代码分析》、《JavaScript语言精髓与编程实践》、《大道至简》、《大道至易：实践者的思想》等专著。系前端组织W3CTech特约技术专家，也是多届CSDN的SD2大会、Erlang China大会（CN Erlounge）、前端D2大会、W3CTech前端交流会、上海ThinkInLAMP架构师大会(首届)、MSUP/MPD等多个大会的特约讲师、评委。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;演讲主题：有前端思想的物联网系统架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;袁聪（eddyyuan），QQ音乐&amp;amp;全民K歌高级工程师&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTEaLJ1fgXbOSAQLICPFTYbgqEdl0jp471a93CJ9F3oiaicz7YhOmNwyOQw/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;QQ音乐&amp;amp;全民K歌高级工程师 袁聪（eddyyuan）&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;袁聪（eddyyuan），QQ音乐&amp;amp;全民K歌高级工程师，五年Android开发经验，对新技术、性能优化有着浓厚兴趣，乐于分享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;演讲主题：全民K歌React Native最佳实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题简介：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;本演讲重在分享React Native在全民K歌中的应用实践。以解析React Native原理开始，包括启动流程、通信机制、渲染机制等，并重点针对性能优化这一开发痛点展开深入探索，并给出内存、层级、启动、网络、包大小等多个方向的性能优化方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;听众受益：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;透彻理解React Native工作原理、运行机制，在开发过程中心有明镜、游刃有余。知名企业React Native应用实践案例分享，值得借鉴，对今后研发工作有很好的指导。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;黄鼎恒，饿了么Node Team负责人&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTEfH7ibyTwygWXXy6FjBWJSsSDMRX6UD9C4iaLQYQCl5MtiaowaRG2mvhWA/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;饿了么Node Team负责人 黄鼎恒&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;黄鼎恒，Node/C程序员，时任饿了么Node Team负责人，饿了么前端实时监控系统主要开发者。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;演讲主题：纯手工搭建一个高性能实时监控系统&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题简介：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;前端代码发出去之后会出什么样的问题？错误如何报警？性能如何监控？func(URL, TimeDuration) = data，本演讲将分享饿了么是如何利用该公式解决这些问题的。同时也将分享在实现实时、快速聚合的需求中，所遇到的坑及解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;听众受益：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;带您全面了解前端性能监控系统的核心研发细节、重点考虑要点及完整的研发过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;钟恒，360奇舞团前端工程师&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTEMwgJ34vldw4Jp57gwXBZBarlXiaiaEw9KU1lNUfWdaDxm6u0wGyNoicMg/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;360奇舞团前端工程师 钟恒&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;钟恒，360奇舞团前端工程师，负责声享前端基础架构及参与产品Node.js开发，同时对微信开发有深入研究。《响应式Web设计：HTML5和CSS3实战（第2版）》译者。毕业于中山大学，曾在w3ctech上翻译多篇关于Service Worker文章。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;演讲主题：使用Vue.js 2.0开发高交互Web应用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题简介：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;为了应对愈来愈复杂的Web应用需求带来的问题，组件化开发一直是众多前端团队合作开发中秉承的理念。产品的快速迭代，意味着频繁的需求变更、样式交互性的增多往往意味着组件的增多，各种状态的增多。这种状况下，如何确保组件的复用性、可维护性、原子性就成了一道难题。同时，在产品的快速迭代中，需求的变更、样式的更改如何面对？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在组件化开发中仍然会面临众多的难题：如何划分组件以确保应用可维护性？如何增强组件的复用性？如何进行组件间的交流而又不造成组件间过分耦合？如何顺畅地引入第三方插件？……Vue.js这一轻量化框架使组件化开发更加简便，让我们能够很好地解决上述问题。本演讲将分享使用Vue.js 2.0开发高交互Web应用的经验和对上述问题的解决过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;听众受益：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;掌握组件化开发核心难点，更深入了解研发过程。热门框架之一Vue.js的实践案例分享，启迪您思考及更进一步探索，改善当前研发过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;周俊鹏，58到家高级前端工程师&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTElOtzzJuBsVPG1lGny88CJTphll6tRd1GwA2OiawEDutmEBtnIibB6jSA/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;58到家高级前端工程师 周俊鹏&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;周俊鹏，58到家高级前端工程师，曾就职于携程网、优酷网，对前端工程化有一定研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;演讲主题：基于webpack的前端工程解决方案&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;主题简介：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;前端开发面临着诸多问题，比如，语言规范与浏览器实现；CSS的弱编程能力；依赖后端API调试；测试环境与生产环境代码不同，修改繁琐；部署，上传繁琐；提测&amp;amp;上线流程不规范等等。而webpack因内部集成了许多资源依赖处理的细节，可很好地解决前端资源依赖管理问题，已成为搭建前端工程解决方案的重要选择工具。本演讲将以webpack为核心，分析它可以解决及难以解决的问题，及58到家以webpack为核心搭建前端工程解决方案的实践过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;听众受益：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;全面了解webpack各个细节；助力所在企业前端工程解决方案的搭建。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTEkIia1Nib6fdB5GuL28BzU8aN1iavXibUMP6T82erJmst1dR405COqmABXQ/0?wx_fmt=gif"/&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于前端开发专场的讲师，您有什么期待？还有更希望的演讲方向吗？最期待听哪个讲师分享？欢迎大家在下面评论，各抒己见。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，为了让更多的技术人参与到这场技术盛宴中，SDCC目前五折售票，不到2000元的门票，团购更有优惠，三天只需1400元，是给辛勤工作一年的你，年终最好的礼物，或许这样，SDCC才能更真切地服务好开发者。【&lt;span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;/span&gt;立即注册参会】&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;除前端开发专题外，还开设有11大技术专题&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;电商架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;双11异常火爆，不管是销售数字，还是用户体验，这次全民购物狂潮再次刷新了过去的所有记录。而在这一切背后，需要稳定高效的系统架构设计来提供有力支持。本专题揭示了国内各大知名电商架构设计的最佳技术实践。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;架构师进阶之路&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;怎样学习才能成长为一名合格的架构师，或者说一名合格的架构师应该有怎样的技术知识体系，这不仅是一个刚刚踏入职场的初级程序员也是工作三五年之后开始迷茫的老程序员经常会问到的问题。本专题内容来自CTO、首席架构师等眼中的架构师，他们将给你最全面最权威的回答。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高可用架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;理论结合实践，案例式讲述，深入剖析架构设计的高可用性，快速提升设计和架构能力，让大家系统性的掌握一线互联网公司高可用架构设计的方法论，并应用于实际工作中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基于Spark的大数据系统设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Spark是目前热门的大数据分布式编程框架之一，现已成为Apache顶级项目，受到业界的广泛关注和使用。本专场主要讨论的话题有：利用基于Spark的大数据系统设计来促进信息时代的智能化，有效结合Spark和其他热门大数据工具并加以利用；应用目前的Spark技术实现大数据在各行业的全面渗透；以及通过实际案例和场景来探讨Spark与大数据的互动创新。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;微信开发&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微信仍以迅猛势头火速发展，并已跨入海外市场，服务着全球亿万用户。作为技术开发者，除了时刻关注领域技术发展外，更应紧盯、深挖掘该行业所蕴藏的巨大商机。目前微信开发成为SDCC大会的重要分论坛之一，2014年北京和深圳两场微信开发者大会、2015 SDCC微信开发专题论坛，吸引了不少领域技术专家参与分享，受到了广大微信开发者的一致好评。2016年，SDCC微信开发论坛将持续精彩，携手更多技术高手、创业精英，共研技术难点，碰撞创新点子。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;架构演进&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本专题涵盖各类互联网后台、移动、直播等热门架构的演进过程，在架构变迁中遇到的痛点和解决方案，从而带给参会者以启发。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高吞吐数据库系统设计要领&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本专题将邀请国内外的数据库专家，共同探讨MySQL、NoSQL、Oracle、缓存技术、云端数据库、智能数据平台等领域的前瞻性热点话题与技术，尤其是在高数据量情况下实现高吞吐数据库的设计。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;自动化运维与容器实践&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;DevOps并非你想的那么简单，如今，您经常听周围的人谈论DevOps，但真正理解并能执行的人极少。其实，采纳DevOps的文化壁垒非常高，这是一个值得探索的漫长过程。DevOps论坛邀请国内DevOps行业顶级专家，和大家共同探讨DevOps具体应用场景、如何在企业实施DevOps、DevOps实际案例、DevOps如何加速企业创新等热点话题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;移动视频直播技术&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;移动直播技术属于今年最热的前沿领域，在移动直播技术专场邀请到多位直播技术专家深度阐述直播连麦技术；在热门时段大主播高峰值情景下，如何优化直播礼物系统？面对延迟、卡顿等诸多难题，全互动直播技术的最佳解决方案；基于第三方CDN，我们该如何实现直播质量监控。更多精彩的直播技术，尽在本专题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个性化推荐&amp;nbsp;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据算法是大数据得以有效应用的基础，能够在保证推荐准确性的同时增加推荐的多样性，满足用户多种需求，还能够实现实时反馈，强化推荐算法。本专场主要讨论的话题有：利用大数据算法来实现组织的运营能力；通过推荐算法分析有效打通不同算法间的固有壁垒；应用目前的大数据算法来提升企业IT效率；以及通过实际案例和场景来探讨推荐算法的应用分析能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTECo2d6fBariae5ITYF543N24P2504D3Zwe9HPBzljCXMhk6icaXZ7C4FQ/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 20 Oct 2016 17:25:59 +0800</pubDate>
    </item>
    <item>
      <title>飞天进化，互联网、数据和计算的聚变</title>
      <link>http://www.iwgc.cn/link/3152457</link>
      <description>&lt;p&gt;&lt;span&gt;首先要说明的我标题中的“互联网、数据和计算的聚变”来自王坚博士的《在线》一书，连续参加过三届阿里云栖大会，每年都有新的感触，也总是尝试着用某些关键词或者一条线来将每次峰会的脉络串起来，今年，用互联网、数据和计算的聚变来概述，我觉得更加合适。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为阿里巴巴年度重头戏的2016杭州云栖峰会在万众瞩目下在杭州隆重召开，根据主办方提供的数据显示，今年的阿里云栖峰会吸引了4万人到场参会，更有600万人通过在线的方式观看了直播，盛况空前，阿里云栖峰会已经成为全球IT领域最大盛会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每年的云栖峰会都会产业界、开发界等带来很多新的思想和思考，今年也一样，从阿里巴巴董事局主席马云提出的电子商务将消失，新五通一平将引领未来，到王坚博士带来的飞天进化，再到让人眼花缭乱的新品发布以及数不尽的战略合作发布，拨开纷繁复杂的表象，我们不难得出，互联网、数据和计算的聚变催生的计算经济时代已经到来。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最吸引我关注的是阿里巴巴技术委员会主席王坚发布的新书《在线》，一个普通到有些俗气的书名吸引了众多人的关注，被外界视作阿里巴巴技术体系总设计师的王坚出版的第一本著作，吸引了众多参会者的兴趣。在本文的最后，我也尝试从这本书的字里行间搜寻出阿里云过去的发展历程、如今的自身定位以及未来的战略考量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;手握两大重器，阿里追求的普惠科技和无法计算的价值&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;互联网有边界吗？阿里巴巴似乎无处不在，腾讯也似乎无处不在，Facebook也一样，针对这样的问题，马云表示，互联网没有边界，它就像电一样，无处不在，互联网是一种技术、一种思想，一种未来。同时他也指出，互联网经济或者电子商务并不是虚拟经济，它是一种未来的经济。“互联网在冲击各行各业”，“电子商务打击、摧毁或者冲击了传统商业”。马云认为，电子商务没有冲击传统的商业，更没有打击传统商业，电子商务只是把握了互联网的技术、互联网的思想，抓住了互联网的技术，并利用互联网创造出一个适应未来的商业模式，那就是电子商务。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是，马云强调，作为阿里巴巴最传统的电子商务业务，很快将被淘汰，实际上，从明年开始，阿里巴巴内部将不再提“电子商务”的概念。因为电子商务只是一条“摆渡”的船。在马云看来，未来有五个全新发展将深刻地影响中国、世界和所有人。这五个“新”，指的是新零售、新制造、新金融、新技术和新能源，马云称将对各行各业造成巨大的影响，成为决定未来成败的关键。未来政府招商，也必须关注新的“五通一平”，一平是指提供一个公平创业的环境和竞争的环境。“我不希望把它变成危言耸听的警示，而是当作改变自己的机遇，从现在开始。”他在云栖大会上说。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;仔细思考不难看出，新五通一平背后的数据战略，新零售、新制造、新金融、新技术和新能源背后其实都面临着如何利用和挖据海量数据价值的问题。幸运的是阿里巴巴在这新一轮的科技竞争中握有“数据和计算”这两大重要的法宝，来自购物、支付、物流、金融等产生的海量数据，无论从哪个角度看，都给人无尽的想象空间，可怕的是阿里巴巴多年打造的飞天系统，成就阿里计算能力的核心技术，因此，阿里巴巴要做的就是如何利用这样的价值，而现在，正是时候。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最新的计划是杭州政府公布了一项“疯狂”的计划：为这座拥有2200多年历史的城市，安装一个人工智能中枢——杭州城市数据大脑。城市大脑的内核采用阿里云ET人工智能技术，可对整个城市进行全局实时分析，自动调配公共资源，修正城市运行中的Bug。在萧山区部分路段中，城市大脑通调节红绿灯，车辆通行速度最高提升了11%。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia1lE76vkicKiafe3PySjmLTElZt4pwtpGWOvoXqJ97RoGCNe7PPCDJfhvnSQ0zrZzq6wibM7WWxDgkg/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除此之外，2016杭州云栖大会上，中科院国家天文台与阿里云在云栖大会上宣布结为战略合作伙伴，双方将成立“国家天文台-阿里云天文大数据联合研究中心”，共同完成中国虚拟天文台上云项目，打造全生命周期的天文大数据管理与开放共享平台。其中郭守敬望远镜（LAMOST）巡天数据将作为试点，率先实现数据上云和共享。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今年 9 月，被誉为「中国天眼」的 FAST 在贵州落成启用。FAST 是世界最大单口径、最灵敏的射电望远镜。FAST 进入正式科学观测后，每天将产生 50TB的数据。阿里云总裁胡晓明表示：中国射电望远镜的能力，加上中国的计算能力，将通过互联网分享给全世界的天文科研工作者及爱好者。这正是我们所追求的普惠科技和无法计算的价值。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;strong&gt;&lt;span&gt;飞天进化&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今年大会的主题是“飞天进化”，不得不说这个主题非常具有科技含量，首先，进化让我们联想到人类的进化，达尔文的进化论，人工智能等，所以，从主题可以想象到今年人工智能绝对是大会的重头戏之一，事实也是如此，比如上文所说的人工智能ET技术打造的杭州城市大脑。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;据了解，“城市大脑”由五大系统组成——超大规模计算平台、数据采集系统、数据交换中心、开放算法平台、数据应用平台。“城市大脑”的内核为阿里云ET人工智能技术，底层技术基础设施为阿里云及飞天操作系统。在城市大脑项目中，数以百亿计的城市交通管理数据、公共服务数据、运营商数据、互联网数据被集中输入，这些数据成为“城市大脑”的智慧之源。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为“城市大脑”底层基础设施的飞天系统所有的服务对应的是同一个系统内核，同一套分布式文件系统，谈及飞天，其实她是亲近水的一位神的名字，是可以为人们带来幸福和吉祥，而系统中的各个模块也被赋予了上古诸神的名字：分布式文件系统是开天辟地承载一切基础之神——盘古（Pangu）；负责任务调度和资源管理模块的是占卜和预测之神——伏羲（Fuxi）；从底层上监视和处理导致集群性能下降的集群诊断系统——华佗（Huatuo）；负责网络连接的模块——夸父（Kuafu）；监控系统——神农（Shennong）；集群部署——大禹（Dayu）……以诸神之名，映射出的是背后的理想主义色彩。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从2009年初的第一行代码到飞天5k，再到如今的为杭州城市大脑以及和国家天文台的合作，飞天系统的进化之旅充满传奇色彩，正如王坚所说：“回顾飞天的进化之旅，其实我们只是增加了一个科技创新的变量，这个变量帮助我们做到过去不敢做的事情。”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;span&gt;“在线”时代和计算经济&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10月13日，阿里巴巴技术委员会主席王坚在2016杭州·云栖大会上发布新书《在线》。江苏省委书记李强、阿里巴巴集团董事局主席马云、鸿海/富士康科技集团总裁郭台铭为新书作序，对王坚其人以及这本书都给予很高的评价。马云看问题的角度和深度以及王坚博士对未来的把握都是笔者甚是佩服的对象，这次王坚博士的新书《在线》又会给读者带来哪些思考呢，我们试图从本书的字里行间找到一些蛛丝马迹，解读王坚眼中的“在线”世界。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2008年9月加入阿里巴巴集团担任首席架构师，带领创建了阿里云通用计算平台和YunOS操作系统，2012年被任命为阿里巴巴集团CTO，一直被外界视作阿里巴巴技术体系的总设计师，但在2009年阿里云创建之初，云计算并不被看好。正是王坚的坚持，使得阿里云在八年之后成为全球前三的云计算服务商，在计算能力上一举打破4项世界纪录。马云在序言中说，假如10年前我们就有了王坚，今天阿里的技术可能会很不一样。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;那么“在线”背后有哪些思考，王坚认为”连接”不等于”在线”，”在线”很难用一句话定义，他也拒绝现在做这样的定义，但他认为“在线”是一片新大陆，就像当年的美洲大陆，我们还需要深入探索。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;谈及”在线”就不得不谈为”在线”而生的操作系统YunOS，如果说云计算和移动互联网是一枚硬币的两面，那么YunOS和阿里云就是阿里巴巴这枚硬币的两面，从去年完成的3000万激活量到YunOS4.0交付给阿里巴巴的汽车合作伙伴，无不在说明阿里做操作系统是认真的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;YunOS作为阿里巴巴在IoT时代的关键棋子，虽然尚未像阿里云那样带来真金白银，然而，YunOS对于阿里巴巴的重要性恐怕将不亚于阿里云。在本次云栖大会上，YunOS又联合夏普、海尔发布了YunOS for TV新品。笔者认为YunOS更像是一张网，在万物互联网时代，实现数据的采集、处理以及利用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;回到“在线”的话题，当互联网变成基础设施，数据成为新的生产资料，计算变成公共服务，这三者结合聚变的结果是新经济的出现，王坚把它称为计算经济，它是“在线时代”的经济。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;“在线”是基本，不在线的东西不具有经济价值，计算经济时代的到来，使得人们的想象力和创造空间不受限制，而这才是阿里巴巴真正追求的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正如马云在大会上说的，“不是技术冲击了你，而是传统思想、保守思想、昨天的观念冲击了你，不是电子商务冲击了传统商业，而是你对未来的不把握冲击了你的商业。”那么计算经济时代，你准备好了吗？阿里已经出发！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 20 Oct 2016 17:25:59 +0800</pubDate>
    </item>
    <item>
      <title>大数据技术人年度盛事! BDTC 2016将于12月8-10日在京举行</title>
      <link>http://www.iwgc.cn/link/3136831</link>
      <description>&lt;p&gt;&lt;span&gt;2016年12月8日-10日，由中国计算机学会（CCF）主办，CCF大数据专家委员会承办，中国科学院计算技术研究所和CSDN共同协办的&lt;span&gt;&lt;strong&gt;2016中国大数据技术大会&lt;/strong&gt;&lt;/span&gt;（Big Data Technology Conference 2015，BDTC 2016）将在北京新云南皇冠假日酒店隆重举办。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9Wiatenx7ZPcvCS6FVOLIC4MHibjfOgWgZaNb1Fy7xKkm9ibTib7qicA8Wuqb0sw/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中国大数据技术大会（BDTC）的前身是Hadoop中国云计算大会（Hadoop in China，HiC）。从2008年仅60余人参加的技术沙龙到当下数千人的技术盛宴，目前已成为国内最具影响力、规模最大的大数据领域技术盛会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;作为极具实战价值的专业交流平台，已经连续成功举办九届的中国大数据技术大会见证了中国大数据生态系统的建立、发展和演变。在去年大会上，吸引了超过100家媒体现场报道，包括CCTV1、CCTV2、央视外语频道、BTV财经、中国国际教育电视台、海淀电视台等电视媒体纷纷报道大会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;今年，2016中国大数据技术大会为期三天，聚焦行业最佳实践，数据与应用的深度融合，关注热门技术在行业中的最佳实践和深度应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;除Keynote以外，主办方还精心策划了16场+专题技术和行业论坛，涵盖了大数据分析与生态系统、大数据云服务、高性能计算（HPC）大数据、推荐系统、数据安全与隐私保护、人工智能、网络与通讯、政策法规与标准化、工业与制造业、数据库、金融、精准医疗与健康、智慧城市、交通旅游与出行等主题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;100多场技术演讲，累计邀请超过130位技术专家担任演讲嘉宾。预计数千名大数据行业精英、技术专家及意见领袖将齐聚2016中国大数据技术大会，分享最新技术与实践的洞察与经验，共商大数据时代发展之计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;中国大数据技术大会，以谈干货实料著称，分享内容覆盖面广，紧扣当前技术实践，获得业界一致好评。&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2008 Hadoop in China Salon——Hadoop使用经验心得研讨&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2009 Hadoop in China Salon（2nd HaCS）——发扬开源精神 促进Hadoop技术与应用&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2009 Hadoop in China——推广Hadoop实践心得 体验云计算先进成果&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2010 Hadoop in China——分享Hadoop技术应用 交流云计算实际需求&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2011 Hadoop与大数据技术大会——海量数据掘宝&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2012 Hadoop与大数据技术大会——大数据共享与开放技术&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2013 中国大数据技术大会——应用驱动的架构与技术&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2014 中国大数据技术大会——大数据技术与应用深度结合&amp;amp;落地实践&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;2015 中国大数据技术大会&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;历届大会上，我们曾邀请到多位在国内外大数据领域的重量级专家到会进行主题报告，其中包括（部分）：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Doug Cutting，Hadoop之父，Cloudera首席架构师&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Ion Stoica，UC Berkeley计算机教授， Co-Founder of Databricks&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Eric Baldeschwieler，Hortonworks CTO&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Michael Stack，Apache HBase项目管理委员会主席&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高文，中国工程院院士&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;王坚，阿里巴巴集团技术委员会主席&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;孙少陵，中国移动苏州研发中心CTO&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为严格保证会议内容质量，由超过20位行业专家组成的论坛主席团和大会程序委员会将在主题策划、讲师邀约、议题审核等方面把关，力求为与会者带来一场高水平的技术交流盛会。各分论坛主席和出品人为（&lt;span&gt;排名不分先后，更新中&lt;/span&gt;）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;政策法规与标准化论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;公安部第三研究所所长助理、首席科学家 金波&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中国电子技术标准化研究院高级工程师 吴东亚&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;数据库论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;华东师范大学数据科学与工程研究院院长 周傲英&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;柏睿数据创始人、董事长兼CTO 刘睿民&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;金融大数据论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;平安科技大数据产品总监 王健宗&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;海通证券 徐楠&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;精准医疗与健康论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;国防科技大学研究员 彭绍亮&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中科院计算所生物信息PI 赵屹&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;大数据云服务论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;亚信数据大数据云平台部总经理 何鸿凌&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;人工智能论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中科院计算所副研究员 郭嘉丰&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中科院计算所副研究员 兰艳艳&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;网络与通讯论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;华为大数据产品部部长 穆鸿&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;工业与制造业大数据论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;清华大学数据科学研究院管委会副主任、副院长 王建民&amp;nbsp;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;宝钢首席研究员 郭朝晖&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;交通旅游与出行论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;滴滴出行高级副总裁 章文嵩&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;大数据分析与生态系统论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中科院计算所副研究员 查礼&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;数据安全与隐私保护论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;炼石网络创始人、CEO 白小勇&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;推荐系统论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;AdMaster技术副总裁 卢亿雷&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;&lt;span&gt;高性能计算与大数据融合论坛&lt;/span&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中科院计算所计算机体系结构国家重点实验室研究员 张云泉&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更详细的会议日程和相关信息请随时关注大会官网（&lt;span&gt;持续更新中&lt;/span&gt;）：&lt;strong&gt;http://bdtc2016.hadooper.cn&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在2016年10月31日24点前完成报名和付款可享受六折优惠价，团购更可享受额外折扣，。具体信息请直接【&lt;span&gt;阅读原文&lt;/span&gt;】直达报名页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;2016中国大数据技术大会，不见不散！&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 19 Oct 2016 17:29:54 +0800</pubDate>
    </item>
    <item>
      <title>《程序员》：携程移动端架构演进与优化之路</title>
      <link>http://www.iwgc.cn/link/3136833</link>
      <description>&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;本文为《程序员》原创文章，未经允许不得转载，更多精彩请订阅2016年《程序员》&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;导读： 目前携程 75％ 以上订单来自移动端，App 几乎承载了整个集团的所有业务形态。那么无线服务端和客户端底层架构如何支撑如此复杂灵活多样多变的业务，并顺利接入整个集团十几个不同研发团队开发的代码，让这么多团队协同开发，无缝集成在同一个 App 内，还能确保其质量和性能？这对移动端架构提出了非常严峻的挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;从2013年开始，我们先后进行了不同路径的多样性架构探索，在实践过程中也经历了各种曲折与压力，最终实现了2015年的这个全新架构，实现了无线服务端基于API Gateway的架构框架、客户端的模块化开发、测试与部署，支持运行期间的模块实时加载、按需Lazyloding、Remote加载，从而实现模块级动态升级以及代码级热修复，并&lt;/span&gt;&lt;span&gt;且逐步推动数百人的客户端研发团队由不堪重负、效率低下的大版本大火车开发模式向模块间独立迭代、发布轻量级的开发方向演进。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时在架构探索期间，携程做了App相关的很多性能优化，比如底层网络通道治理的优化、应用层插件容器加载启动速度以及存的优化、业务中间件Hybrid的优化等等，逐步保证随着业务的不断的迭代，能保证用户的比较好的优化体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section style="
background-color: #ffffff;
display: inline-block;"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;App服务端架构变迁&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;早期App服务端架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;早期App服务端架构使用了传统的PC无线开发架构，即在PC Web应用基础上增加一些无线端的REST接口直接供给App访问，没有考虑架构的扩展性、 灵活性、安全型等因素。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiateGK0g2JyT60Oolt8KRichF5fEZ8SLLAklwDtyTRHvE5MDD5V54Ef0uUg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图1 携程无线服务端架构V1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图1所示，服务端系统一方面以Web应用的方式提供给PC端浏览器访问，另一方面为支持移动，在Web应用基础上增加一些REST接口直接供App访问。相应地，无线接口和Web应用作为同一工程开发，作为同一个应用部署，这种架构设计思路是很直接和自然的，可以快速把PC端功能复制到App上，其思想设计是在现有Web应用上打补丁，体现的是PC思维无线化，把App简单作为PC端应用的翻版，并把两者物理上捆绑在一起，在早期也能满足当时的业务需求，但是随着平台化的发展，以及业务越来越复杂和多样性，这种架构设计带来的一些列的问题逐步暴露出来，其中最突出的急需解决的有三个问题：耦合、重复造轮子、系统稳定性，具体如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;强耦合&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无线接口和Web应用紧耦合，Web端的修改会影响无线接口，Web端的发布导致无线接口被动连带发布，Web端的Bug影响无线接口的可用性，反过来也一样，无线接口的任何变化会影响Web应用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外其中酒店无线接口和机票的无线接口，或者其他BU无线的接口，也存在着较为严重的耦合问题，这种耦合带来的问题，最严重最明显的就是这个BU的接口调整或者修改Bug，有可能会影响其他BU接口的稳定型，从而带来每次发布，要带来更多的测试回归工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;重复造轮子&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无线接口除了给App提供业务数据，还需要考虑一系列非功能性因素的接口功能验证，如通讯协议和数据格式封装、安全控制、日志记录，性能监控等，这些对每个无线接口都适用。如果App和后端系统直连，意味着每个后端系统都需要单独支持这些通用功能，导致重复开发。一旦这些通用需求有变化（如对数据传输进行加密增强），所有后端系统都要强制同步修改和上线，给项目管理和产品发布带来很大挑战。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;稳定性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;App和多个后端系统直连，只要一个系统出问题，就会影响App的可用性，比如酒店服务出了问题比如变慢或者耗用CPU过多资源，其机票服务或者其他服务会受到一定影响，其典型的弊端就是缺乏故障隔离机制，缺少负载均衡、缺少监控、缺少熔断等影响后端稳定性的问题，导致App的健壮性很差，非常脆弱。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;携程App服务端架构V2.0&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于架构V1.0三个比较严重的缺点，于是我们开始尝试使用一种新的无线架构V2：基于API Gateway的无线服务端架构。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于如图2所示的无线API Gateway架构，具备如下功能特点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;对等隔离&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;App实际上和PC端浏览器是对等的，PC端应用有服务端，App也需要自己独立的服务端，两个服务端都需要针对自身的特点，独立开发，独立部署，同时实现逻辑和物理层面的解耦，从架构层面彻底摆脱PC思维无线化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;统一服务&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;核心逻辑从Web应用剥离出来，进行服务化改造，服务实现时不区分PC和无线，App和Web应用都依赖于这些服务，一套接口，多方调用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;统一无线API Gateway网关入口，保持系统的稳定性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;提供统一的无线网关，所有App调用指向此网关，网关包括通用层、接口路由层、适配层。通用层包括通讯协议适配、数据封装、安全、监控、日志、隔离、熔断、限流、反爬这些系统级功能，每个接口调用都需要同样逻辑，这些功能统一由网关前置处理，避免重复开发。具体实现时，每个通用处理逻辑封装成拦截器，遵循统一的过滤接口，并且做到可配置，网关依次调用这些拦截器，这样可以支持通用逻辑的灵活扩展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;无线API Gateway应该目前很多公司都有自己的实现，目前市场上也提供了很多开源项目Zuul、Archaius、Hystrix、Eureka等帮助我们去实现自己的Gatway。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;API Gateway具备的功能特点&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiatepbmouWgsNvDHZyaTEOOTBBu6vG3iaWdoyyhfInI0YwAHts9Aw3ibzxpg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图2 携程无线服务端架构V2.0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;携程基于Netflix的开源项目Zuul开发了无线APIGateway架构如上图2所示，其Gateway的职能是负责接收来自无线端的所有API请求，并将他们路由到正确的目标应用服务器，并且提供限流、隔离、熔断等功能，保证了无线服务的长期稳定运行，拥有的弹性容错机制也减少了日常运维工作。同时该Gateway提供了多维度的监控数据，并与报警系统对接，实时监控线上情况，达到运维自动化。其API Gateway具有的几个核心职能：路由、隔离、限流、熔断、反爬、监控报警，具体如下所示：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;接口路由：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;核心功能，需要根据各种条件将请求路由到正确的目的地。在实现上采用了路由服务，Gateway定期从路由服务获取路由表，达到了解耦、实时更新的效果；经过通用逻辑预处理后，无线接口请求将进一步分发给后端处理（各个Adapter）。URL和Adapter在配置文件里做映射，分发逻辑根据请求中的URL信息，找到对应的Adapter，然后把请求交给Adapter处理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;隔离：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;由于Gateway接收了所有业务请求，请求多种多样，当某类请求出问题时，不能影响其他请求处理。对此，Gateway实现了资源隔离，防止某类请求将资源耗光，继而影响其他服务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;限流：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;对于任何一类请求，都设置了容量上限，并不能无限制处理。Gateway可以为每类请求设置并发上限，当到达上限时，Gateway将不在转发请求，而是直接返回，保护后端服务。如果在后端服务过载的情况下，仍然转发请求，只会恶化问题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;熔断：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;当一个服务在不能提供服务时，Gateway如果断续向它转发请求，不但不能解决问题，往往还会恶化问题。Gateway引入了一个熔断机制，当某一服务在过去一段时间内的错误比率到达一个阈值，Gateway则停止向该服务转发请求，称之为熔断，特定时间过去后，Gateway会探测此服务是否恢复正常，正常则开始正常转发，若不正常继续熔断。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;反爬：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Gateway积极对接安全接口，会根据IP、clientId、以及算法校验阻断非法请求，保护后端服务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;监控报警：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;Gateway接入了Cat、Clog、并对接了运维报警工具。当出现问题时，会及时报警，尽早发现问题，减少损失。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;API Gateway 智能升降级&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Gateway支持集中管控的同时，也带来单点问题。假设后台某个服务接口，由于某种原因，性能有严重问题，对应Adapter处理很慢，那么网关所在服务器的线程很快被耗尽，导致单个接口拖垮整个系统。这种问题，单纯通过增加机器，水平扩展网关数量是解决不了的，实践中，我们引入了智能升降级机制来快速隔离单个接口的影响，从而实现了接口的自动隔离熔断机制，其实现原理如图3所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiateqQsvicpCwNTo3zJqyzNwAFHEWyqDzPDh8HhaHE3KJNial2wQef4Ra2UA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图3 Gateway接口自动升级降级流程图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;针对特定一个接口，如果在一定时间间隔内（比如5分钟），它的超时失败率到了一定比例（比如5%），网关会对该接口做降级处理，随机抛弃部分流量，比如只允许50%流量通过。下一个5分钟再评估，如果失败率还没有改善，允许通过的流量降到25%，以此类推。如果成功率好转，网关对该接口做升级处理，提升通过的流量比例，为了快速恢复，一般提升到原流量4倍，然后在下一个时间段再评估是否触发升降级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;整个过程全自动智能处理（为防止误判，可支持人工干预），这样单个接口出问题，不会影响整个网关的处理能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;携程App服务端架构演进总结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;携程App服务端架构通过一系列的拆分和整合，既优化了公司整体应用架构，又为App做大做强奠定良好基础，其带来的好处是全方面的，增加了架构的可扩展性、健壮性、稳定性、灵活性，并且提高了团队的开发效率和团队长远的收益，其具体表现在：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;实现PC端应用和移动端应用分离，使两者彻底解耦，各自独立发展，App从寄生藤变成并蒂莲。携程在做Gateway架构的第一步就是做PC端和无线端的业务解耦，以及各BU之间的业务解耦，实现各BU无线业务和PC业务的独立部署、独立发布。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;底层核心的SOA服务基于统一业务规则提供逻辑和数据，接口不区分PC、无线或其他渠道（如Open API），避免重复开发，避免业务逻辑被污染。所有前端一视同仁，而且如果以后增加其他端，也不需要做过的改动，其扩展性和灵活性能满足新业务拓展的需要。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据无线本身的特点，支持系统层面的集中处理和业务层面的分散处理。通用逻辑支持插件化扩展，可以根据需要逐步补充；Adapter实现内外部接口的无缝转换，可以针对无线场景，做逻辑增强（如服务聚合，客户端性能埋点、接口性能监控）等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;移动研发团队和各业务线研发团队各司其职，每个团队专注于自己擅长部分，移动团队负责App客户端和网关通用逻辑处理，PC服务端负责PC相关的业务逻辑处理，H5服务端负责H5相关的业务逻辑处理，各个研发团队独立研发和发布，不耦合，即各业务线研发团队负责底层SOA服务及前端Adapter适配。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section style="
background-color: #ffffff;
display: inline-block;"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;携程App客户端架构变迁&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;App早期架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;携程App的第一个版本在2011发布，那时候App架构很简单，基本上就是在传统的MVC的架构基础上封装了一个数据服务层即代理数据层，如图4所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiateqWwI6eHcCN3GWGHL3H0W4OtOMG2wmGoViaEqLmFNajnCcfSjJnuaOiaQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图4 携程早期客户端架构V1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在携程业务发展的早期，移动App经历从无到有的阶段，为了快速上线抢占市场，其移动App开发的MVC架构成了“短平快”思路的首选。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在如上图4所示的MVC的体系架构中，业务控制层负责整个App中主要逻辑功能的实现；业务逻辑Model层则负责数据结构的描述以及数据持久化的功能；数据服务层作为数据的代理媒介层，主要负责与Control层进行数据通信，包括实现基础框架数据通信，序列化和反序列的机制等；而移动界面UI View层作为展现层负责渲染整个App的UI。这种架构分工清晰，简洁明了，并且这种系统架构在语言框架层就得到了Android和iOS的支持，所以非常适用于App的startup开发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是这种架构在开发的后期会由于其超高耦和性，从而造就庞大Controller层，而这也是一直被人所诟病。最终的MVC都从Model-View-Controller走向了Massive-View-Controller的终点，其最严重的结果就是Control层的代码越来越多，在携程内部很多类，早期都超过了2000行，同时Control层和View层之间存在一些较高的耦合。其对应的App工程结构架构如图5所示：当时无论iOS和Android工程，都只有一个工程结构CtripWireless。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9Wiatep3icHjYicUQCS5yY2ONBk0qznN7yibowQibI9qI6ZGYQkeNSasicJVCYJtg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图5 携程前期App工程架构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;单个工程去实现一个App的好处就是各个业务线的接口通信方便，调用简单随意，可以随意使用工程中的任何公共和业务组件，并且接入学习成本低。但是随着业务越来越复杂，以及各BU业务通信交互的需求越来越多，其各个BU的业务耦合越来越严重，这个直接为后期插件化Bundle架构埋下了伏笔。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于携程业务不断快速发展，后来活跃用户已经超过1亿，日活用户千万，很快触及到了当时Android虚拟机机制的设计缺陷，即移动端在Android上面临了两个比较严重的问题，这两个问题导致的严重后果就是在2.3的系统里面，用户直接都不能安装和使用。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一是单dex 65535方法数限制，二是线性内存分配器（LinearAlloc）限制。今天的Android开发者看到这两个限制都不会陌生。前者是因为Android的早&lt;/span&gt;&lt;span&gt;期设计中，对dex文件中方法id用16位整型标记，单个dex文件中的方法数无法超过65535，eclipse环境中生成不了未做过proguard的deBug apk。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后者则是dalvik虚拟机用来加载类的堆内存大小被硬编码了，2.3以下是5M，2.3以上是8M，致使App无法安装的原因就是因为这个堆内存被耗尽导致dexopt失败。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在来看肯定大家都觉得不是问题，因为Google已经给出了一些可靠的解决方案，辅以更加先进的gradle + Android Studio，开发者们可能根本不会再遇到这两个经典问题，官方的MultiDex分dex机制解决了方法数限制的问题，其中main dex最小化原则，结合dalvik LinearAlloc heap size调整（修改&lt;/span&gt;&lt;span&gt;到了16M），使得dexopt的失败几率大幅下降。而ART的出现彻底不再存在LinearAlloc这样的限制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;但是我们回过来再看，那个在用户Android 2.3还占50%的时代里，是如何通过软件架构调整解决这个问题的，其中的经验有我们值得借鉴和学习的地方。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;App V2.0架构&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于上述我们遇到的问题，我们在原来的传统架构上又做了重新调整和优化，提出了移动端架构V2.0，其主要设计思路就是：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在业务快速发展过程当中，发展到5.0的时候App上已经承载了很多业务功能，但其中一些功能用户使用频率比较低，并且之前快速试错被证明效果不佳的一些功能也大量存留在现有版本中。这些不常使用的功能不应该始终占用程序资源，所以从架构上进行纵向分离，保证主要重要场景的体验，是这一时期的主要设计思路，这时期的架构设计图如图6所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9Wiatelm4ribcHDqZaLic33BMOfvjXUibBOILqiahibnrkG76mZsqJ2nnoxriaXxCQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图6 携程移动架构V2&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要实现这个架构，第一步就是进行各个BU业务线的功能解耦，这个工作花费了整个团队大概3个月时间3个App大版本的周期去进行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进行功能解耦的重要思想，就是实行轻重分离，主次分明的思想；在代码模块的组织架构上进行重要的调整，保证主要重要的App功能快速迭代和性能稳定，将附属的使用频率不高的新功能，使用H5容器进行动态加载，所以在V2.0的架构上，携程App就是个典型的Hybrid App ，可以看到刚开始就核心模块酒店和机票采用Native 进行开发，其他模块基本是采用H5去实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;V2.0架构基础上，做了一系列的工作就是将App中比较鸡肋的功能比如客户价值和转化率低的功能转成H5实现。这样做的好处就是集中精力去优化Native业务体验，同时也能减小Android因为方法数超标的限制压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在V2.0这个阶段还做了一件事情去解决dex 65535的问题，即将工程项目里面出现的不再使用的类和不再使用的方法进行了集中清理，这样的好处是代码也整理干净了，如果方法数超出的不是太多的话通过清理就可以让方法数减少到65536以下，同时还清理了不使用的jar包、重复引入的jar包以及对第三方jar包进行瘦身，一般来说jar里面的方法数最好，清除一两个无用的jar包就能大大的减少方法数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时这个阶段还定义了一个原则，一些信息说明展示或者活动优惠页面，非用户主流程的页面都是采用H5去实现，一方面减少开发成本，同时也是为了应对方法数增多的压力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;上面三种方法都是从传统的技术防守的角度即防止引入更多的方法和类，以及在原有工程角度上去瘦身，但是这两个方法都不能本质上去解决单dex 65535方法数限制App不能安装的问题，要想根本解决这个问题，就必须减少单个Dex的大小，使用新的技术进攻的手段去一劳永逸的去解决这个问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以接下来做了比较重大的决定就是各个BU进行解耦，每个BU单独独立一个工程，每个独立插件有独立的UI界面逻辑和资源、存储及网络通信数据处理逻辑，通过共用统一的基础库接口访问网络服务、图片库、定位库等。V2.0架构对应的App工程结构如图7所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiatedVLRTJGBsWE5xTtVgkT7qy4ZgYf2DQ6TunFvQnqbBH8WYia4N8nic7wg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图7 架构V2.0对应的工程结构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;携程Dex动态加载方案实现&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在当时为了彻底解决方法数溢出的问题，基于上面解耦的基础上采用了多Dex分包方案，当时携程的做法是借鉴Facebook提供的方案去动态分包，将一个apk中的dex文件分割成多个，然后动态加载dex文件。首先简单描述下Facebook的思路：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Dex形式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;携程与Facebook的dex形式完全一致，这是因为我们也是使用Facebook开源工具buck编译的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Dex类分包的规则&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Facebook将加载Dex的逻辑放于单独的nodex进程，这是一个非常简单、轻量级的进程。它没有任何的ContentProvider，只有有限的几个Activity、Service。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;android:name="com.facebook.nodex.startup.splashscreen.NodexSplashActivity"&amp;gt;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以依赖集为Application、NodexSplashActivity的间接依赖集即可，而且这部分逻辑应该相对稳定，我们无须做动态扫描。这就实现了一个非常轻量级的依赖集方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;加载Dex的方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;加载Dex逻辑也非常简单，由于NodexSplashActivity的intent-f ilter指定为Main与LAUNCHER。首先拉起nodex进程，然后初始化NodexSplashActivityActivity，若此时Dex已经初始化过，即直接跳转到主页面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Facebook加载Dex的方案，其加载流程图如图8所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiateL8YDYQI1t1PTcjOHsfNGaQOPC6ber4bLh7IaJdK9p3HSsfWn7DroIg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图8 Facebook 加载 Dex 流程图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这种方式好处在于依赖集非常简单，同时首次加载Dex时也不会卡死。但是它的缺点也很明显，即每次启动主进程时，都需先额外启动一个nodex进程。尽管nodex进程逻辑非常简单，但是也需要加载时间100ms以上。但是携程对这个启动时间非常敏感，当时推动产品很难会去采用这个方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于这个方案的缺点，我们在其基础上进行了优化方案，即能不能主进程直接加载Dex方案，具体定的方案策略如下。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Dex形式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Dex形式并不是重点，假定我们使用当前的Dex形式，即assets/secondary-program-dex-jars/secondary-N.dex.jar。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;Dex类分包的规则&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主Dex应该保证简单，即类似Facebook，只需要少量与Dex加载相关的类即可，并且这部分代码是相对稳定。我也无须去更改任何非加载相关的代码。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;加载Dex的方式&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个是重点，我们应该通过什么加载方案去实现这样的分包规则。首先大家明确若是点击图标，的确无须再起一个进程是可行的方案，但是问题就在于在Application初始化时，或是在attachBaseContext时，我们无法确保即将进入的是主界面Activity。可能系统要起的是某一个Service或Receiver或者Notification，这种跳转方式是不行的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiatejnmnxDJz3HaALsj4StWgLZsniadTEVialbJFicQ38tglPtOpUR9WQNAiaQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图9 Multiple Dex 加载流程图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图9所示，有两个关键问题需要解决：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通过何种方式挂起主进程？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;挂起主进程过程中，是否会产生ANR？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于问题1，进程同步可以使用pthread_mutex_xxx、 pthread_cond_xxx,但是mutex或cond要放于共享内存中，这种实现方式较为复杂，所以我最后实现时采用的是一个最简单的方法即每隔95ms去检测TempFile是否存在，如果存在则直接进入主程序，同时在加载dex的工作线程中去判断，如果加载dex成功，则创建TempFile。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;关于问题2，在挂起主进程的同时，去启动一个工作线程去加载dex，也就是这个线程是非UI主线程，不会造成阻塞UI主线程的情况，经过多次测试，也确实没发生ANR现象，这个通过分析ANR现象的本质就能得出这个结论。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于Facebook的基础上我们优化实现了动态加载Dex的方案，比较完美彻底地解决了因为方法数超标而无法安装的问题，同时也不用担心随着业务发展，代码中方法越来越多的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时在这个阶段，也就是2015年初的时候，携程开始全面由Eclipse工具迁移到Android studio + Gradle的构建方式，同时由于Google支持了MutilDex方&lt;/span&gt;&lt;span&gt;案，所以后来就直接使用了官方提供的方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;V2.0架构解耦之后，不同BU工程的依赖是解除了，良好的解决了以前各个不同BU相互依赖的问题，同时也可以支持多个团队进行并行开发。但是这个阶段的阶段架构存在以下两个明显严重的问题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;源码依赖&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;即会存在如果其他BU的工程修改了，如果没及时通知对方人员，全全局报错，整个工程编译都无法通过，影响到其他BU的正常开发工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;构建编译速度慢&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;打包不可配置，构建编译速度慢，因为携程BU很多，业务也很全而复杂，大概解耦成有10几个工程，因为不可选择所以需全量编译，所以造成一次构建速度最慢的时候差不多30分钟，一般10分钟以上，所以整个开发效率比较低，开发人员的体验感也比较差。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;App架构V3.0&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于上述缺点，我们在V2.0的架构基础上又进行了优化，提出了V3.0的架构，具体的架构图如图10所示。V3.0架构在V2.0的工程解耦升级的基础上去完成了，V3.0架构是基于Bundle的动态加载插件化架构，即几乎工程中的任何组织形态都可以看成Bundle, 而最终携程App 由一系列的Bundle组合而成，运行在可以容纳加载的Bundle容器DynamlicLoader中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiateaLdxiaIY9KB4qyNjVITFUEX7scZOHDdVDDFkMvJPmItAz95ibUPArv3Q/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图10 V3.0架构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图10所示，应用层的酒店、机票、火车票等都是一个个独立的APK，它们之间独立开发，互相不受影响。最终统一以插件的方式集成到统一的携程APK里面。酒店和机票之间通迅方式采取两种方式，BUS数据总线跳转 和 URL Scheme跳转。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;V3.0架构对应的工程结构图如图11所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9Wiatexk4HpR2Ac14YD5ewzLhVbdpkFJAKow1JuIAltYdzsia15Hgn1v3Ib4Q/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图11 架构 V3.0对应的工程结构图&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如图11所示，现有的工程结构，有超过30个Bundle（apk），并且随着未来业务的发展，其Bundle是越来越多。为了解决Bundle过多造成编译速度过慢的问题，我们采用配置文件去动态灵活配置，各个BU需要使用什么Bundle，通过简单的一句配置，将其加到工程中即可，同时其他不需要打进来的Bundle支持aar（.a）和源码依赖，按需添加依赖即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了一劳永逸解决我们V2.0遇到的Dex方法数超标的问题，我们内部基于目前携程App的现状研发实现了一个动态加载的插件化框架DynamicLoader，支持即时加载，按需加载，远程加载三种方式。即时加载，即刚开始就直接加载进来，按需加载是使用的时候才去加载，远程加载即刚开始没有这个工程，然后用户通过远程安&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;装就可以直接使用这个功能。这种机制同时也支持了我们后续使用到了Hotfix机制。在这里首先简单总结下目前市场上出现了比较著名的开源的插件化框架如表1所示。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;表1 市场主流插件化技术对比&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9Wiate6bSJZP4iaiaHhUfiakjL5aTuZqBSgRSWlXAicTnfDAK4kzFWC7wfeUEoGQ/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如表1所示，携程在2015上半年开始着手研究自己的插件化框架，同时也对当时市场上的插件化技术做了调研，最终得出结果，当时市场上的主流框架都不能满足携程当时工程结构的现状和当时插件化的需求，也就是接入其插件化之后，携程的各个BU团队需要很多额外的开发成本去实现整体迁移，同时还不能有效保证后续的插件化稳定性，基于此背景下，携程的插件化应运而生，其实现原理是通过系统的ClassLoader动态加载类，通过系统的AssetManager去动态加载插件的资源，同时通过修改aapt的源码去替换系统的Appt解决各BU资源之间冲突的问题。关键是各BU原有的代码和现有的开发模式都不需要额外的去改动从而增加额外的开发成本，插件化的思想即一切皆Bundle组件的思想，每个Bundle有自己的版本号，通过BundleManager 去管理Bundle的升级。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在V3.0架构推进阶段，为了需要支持按需加载的时候，其Bundle加载的速度，我们约定了一个规则：即每个Bundle加载的时间不需要超过500ms。所以需要对大Bundle进行拆分，比如酒店和机票内部又拆分了自己的6个Bundle。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;V3.0架构就比较适合中到大型团队，并且解耦之后，可以支持多个团队的并行开发，也可以满足多个版本的同时开发和发布。每个BU团队所做的工作就是在发布之前提供一个Bundle即可，然后到发布集成阶段，将其集成到携程的统一APK里面。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;进入到2015年后，携程在软件架构上逐渐趋于平稳。在V2.0原有插件加载基础上，研究了更多行业内Android应用的技术架构，并且也结合官方MultiDex的实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;V3.0在V2.0解耦的基础上，自己实现了动态加载插件化框架，并且在此基础上增加动态热补丁功能，通过携程内部的Hotfix发布平台，实现了携程客户端补丁版本更新直接覆盖，用户无需安装新版本就可以将严重的Bug修复掉。类似阿里的AndFix热修复技术框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section style="
background-color: #ffffff;
display: inline-block;"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;App架构V4.x&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;V3.0架构已经可以支持多个团队的快速高效并行开发，但是技术永远在前进，所以未来的V4.x架构我们还在进一步推进探索中，比如我们做Native App能否像Web网站一样随时部署，即用即取，能否做到跨平台的体验良好的Native App开发，能否实现数十个工程秒级部署编译，从而大大提高开发效率，这些问题是我们Native开发人员一直在探索追求的话题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前携程正在推进和已经进行的技术架构：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;推出了基于ReactNative的Moles框架；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于FreelLine和LayoutCast的热部署方案；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Bundle的更加轻量级组件化、服务化；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;基于MVP和AOP的框架设计。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;section style="
background-color: #ffffff;
display: inline-block;"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;总结&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构是非常值得分享和讨论的，好的技术架构能够持续支持伟大的商业梦想。但是无论什么优秀的可扩展性好的技术架构，都不能脱离于业务而存在，最终都会随着业务的不断发展，而同时其架构也在进行不同程度的演进与优化。一个好的架构首先是必须是能解决公司遇到的现实技术问题和符合满足公司目前架构技术现状，其次能带来技术性的革新从而引领业务的发展。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次做架构之前，要想清楚这样设计的目的是什么，通过架构设计使程序模块化，做到模块内部的高聚合和模块之间的低耦合，做到基本符合迪米特、依赖倒置、里氏替换、接口隔离等原则。这样做的好处是使得程序在开发的过程中，开发人员只需要专注于一点，提高程序开发的效率，并且更容易进行后续的测试以及定位问题。但设计不能违背目的，对于不同量级的工程，具体架构的实现方式必然是不同的，切忌犯为了设计而设计，为了架构而架构的毛病。&lt;/span&gt;&lt;/p&gt;&lt;section label="Copyright © 2015 playhudong All Rights Reserved." style="
margin:1em auto;
border-style: none;" donone="shifuMouseDownCard(&amp;#39;shifu_c_005&amp;#39;)"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;作者简介：&lt;/strong&gt; 南志文，携程研发经理，曾负责App整体技术框架的架构研发与实践，现负责酒店业务的迭代更新及App架构、性能优化。曾先后就职于阿里巴巴、巨人网络。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;了解最新移动开发相关信息和技术，请关注mobilehub公众微信号（&lt;span&gt;ID: mobilehub&lt;/span&gt;)。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhgu3XqyyTeFIhjNFN9WiatepTtIbXl8wYzNBsfjV9Dho3TGytgxdDmx5R2yFwB6WB3UDWJib1nBG5w/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuiaBCibnicg87kue5JEYw7TTYF2l1Sfflft5pXMySicibQmEk8NXYrK7JmdMXpLG3FpgAVXCsp1XJ4hqJQ/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 19 Oct 2016 17:29:54 +0800</pubDate>
    </item>
    <item>
      <title>仅用8个虚拟机，PayPal是如何扩展至日处理数十亿事务的</title>
      <link>http://www.iwgc.cn/link/3136834</link>
      <description>&lt;p&gt;&lt;span&gt;仅在8台虚拟机上，就实现了原本需要100台虚拟机才能实现的工作。甚至当CPU占用高达90%时仍能快速响应，这种Paypal前所未见的事务处理密度，却仅需之前十分之一的时间。在降低成本的同时，还考虑到了无需增加相应的计算基础架构就能获得企业成长——Paypal日处理数十亿事务的系统是如何打造出来的？&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugjYjrcyx1GVC9I76kSfvvMEYL3xdVgqKle59fj38fKKpcp8o8ROawic7jqiasIAoAiaLTT5Zvn3afAA/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Paypal已经迁移至基于&lt;span&gt;Akka框架&lt;/span&gt;的Actor模型上，在&lt;span&gt;《squbs：Paypal构建应用的全新响应式方法》&lt;/span&gt;一文中，Paypal讲述了整个演变经历，目前他们对squbs进行了开源，&lt;span&gt;点击这里便可查看源码&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在选择项目需采用的实现方式时，我们对有状态服务的考虑还是不够。想要了解更多关于有状态服务的内容，请参考基于Caitie McCaffrey的精彩演讲所撰写的这篇文章&lt;span&gt;《如今构建可扩展有状态服务的案例》&lt;/span&gt;，如果还不够令人信服的话，我们可以看看这个案例：&lt;span&gt;《Facebook斥资190亿美元收购WhatsApp的架构》&lt;/span&gt;，其中WhatsApp使用Erlang（Akka的竞品）达成了惊人的吞吐量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文推荐这两篇的文章的原因在于，Paypal的文章在架构细节上并未提及太多，大多是在他们选择Akka的原因，以及迁移到Akka上的好处。不过，在激励我们不甘于现状、勇于创新方面，这篇文章仍是很有价值的案例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;采用很多虚拟机来提供服务的方案到底有什么问题呢？&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;提供服务时使用的虚拟机规模很小，每台虚拟机的吞吐量也很低&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;：基于Actor的反应系统在有效地利用计算资源方面非常出色，因此我们可以缩减系统规模，而无需依赖于典型粗暴的自动缩放机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;对网络和路由选择架构造成很大压力&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 随着各项服务趋于互联化，请求经过重重传递之后会造成延迟增加、用户体验下降的后果。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;规模越大，成本越高昂&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 由数百台虚拟机联合提供的服务，由于管理、监控以及无效缓存的问题，势必会造成昂贵的开销。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;规模越小，敏捷性越高&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 跨越数百台虚拟机部署服务需要花费很长的时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;每台虚拟机的CPU利用率更高&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 由于CPU的处理速度不会增加，所采用的架构需要提高虚拟机CPU的利用率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;需要在松散耦合、易于维护和可快速构建的超微服务（nanoservice）基础上建立起微服务&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;： 我们不希望结构体系层层叠叠过于复杂，而是需要对服务所做的工作有清晰的可见性，在了解服务功用时无需深入到深层代码之中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;考虑到以上因素，&lt;span&gt;&lt;strong&gt;PayPal需要的系统应当拥有如下特质&lt;/strong&gt;&lt;/span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可扩展：可横向扩展到数百个节点，也可纵向扩展为多个处理器，以实现日处理数十亿个请求的性能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;延迟低：在非常细化的颗粒度中实现可控性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对故障具备弹性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在调整服务边界时具有灵活性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;借助编程模型与企业文化，促进可扩展性与简易性的实现，包括在处理故障与错误时更为简洁。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很明显PayPal需要更薄的堆栈，他们不希望堆栈中的层次与可移动部件过多。一般来说，Akka以及基于状态的系统很适合这一需求，因为这类系统可以将大块的堆栈分解为某一种技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PayPal选择了Akka而不是Erlang的原因在于，他们在Java方面的经验更丰富，而Akka正是运行在Java之上的。对于很多人来说，从头学习Erlang并不合适。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;通过Akka，他们可以做到&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;编写易于诠释的代码；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;编写易于测试的代码；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;相对于用于JVM的传统模型来说，更为自然地处理错误与故障情境；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;以流线型的错误处理机制编写速度更快、具有弹性、更为简洁、bug更少的代码。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，PayPal立即在Akka顶层构建出了自己的框架——squbs，并通过它创建了一个模块化的层面，以构建被称为“cubes”的超微服务。cubes彼此对称，之间存在着松散对称的相互依赖性，并且只暴露Akka已经提供的信息接口。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;PayPal的文章还提及了程序员在适应Akka代码的非线性本质时所遇到的困难，因此在采用这类系统时，所雇人员必须能够适应Akka/Scala培训。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于很多服务都在做类似的工作——接收请求、发送数据库调用以读取/写入数据库信息、对其它服务进行调用、调用规则引擎、从缓存中拿取数据、向缓存写入内容等，这些服务能够通过类似Orchestrator Pattern与Perpetual Stream之类的模式来进行抽象。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Squbs已成为PayPal的标准做法，用以构建基于Akka的反应式应用。因此，如果你的团队尚未考虑有状态系统，可以对此了解一下。目前PayPal、Facebook、Uber和微软均已采用了这种系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;原文链接：How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs（译/孙薇 责编/钱曙光）&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;2016年11月18日-20日，由CSDN重磅打造的年终技术盛会&lt;span&gt;&lt;strong&gt;SDCC 2016中国软件开发者大会&lt;/strong&gt;&lt;/span&gt;将在北京举行，大会秉承干货实料（案例）的内容原则，本次大会共设置了12大专题、近百位的演讲嘉宾，并邀请业内顶尖的CTO、架构师和技术专家，与参会嘉宾共同探讨电商架构、高可用架构、编程语言、架构师进阶、微信开发、前端、平台架构演进、基于Spark的大数据系统设计、自动化运维与容器实践、高吞吐数据库系统设计要领、移动视频直播技术等。目前仍是&lt;span&gt;&lt;strong&gt;五折抢票&lt;/strong&gt;&lt;/span&gt;，最低1400元，&lt;/span&gt;&lt;span&gt;&lt;span&gt;&lt;strong&gt;【阅读原文】&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;注册参会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 19 Oct 2016 17:29:54 +0800</pubDate>
    </item>
    <item>
      <title>PostgreSQL 使用advisory lock或skip locked消除行锁冲突, 提高几十倍并发更新效率</title>
      <link>http://www.iwgc.cn/link/3120828</link>
      <description>&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjU6I8l23mvF81naF7mTY7nTmtlibzgPOYe1Etqdp9MTLWlDV0vEZlQ3DhBd2L6m9lXgpy1icY9o03yg/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;背景&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常在数据库中最小粒度的锁是行锁，当一个事务正在更新某条记录时，另一个事务如果要更新同一条记录（或者申请这一条记录的锁），则必须等待锁释放。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;通常持锁的时间需要保持到事务结束，也就是说，如果一个长事务持有了某条记录的锁，其他会话要持有这条记录的锁，可能要等很久。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果某张表的全表或者大部分记录要被更新的话，有几种做法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 在一个事务中更新需要更新的记录，很显然时间可能很长，因为没有了并发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 在多个事务中更新不同的记录，使用高并发来缩短更新的时间，但是就需要解决并发更新时存在的行锁冲突的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文将要给大家介绍两种解决并发更新行锁冲突问题的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;场景描述&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试表，单条记录越大，更新单条记录的时间越久（例如更新亿级别的超长BIT类型）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个人群都有一个唯一的ID，即parallel_update_test.id。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;create unlogged table parallel_update_test(id int primary key, info int[]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;测试数据&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;insert into parallel_update_test select generate_series(1,10000), (select array_agg(id) from generate_series(1,100000) t(id));

postgres=# \dt+ parallel_update_test 
 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;List of relations
 Schema | &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; Name &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; | Type &amp;nbsp;| &amp;nbsp;Owner &amp;nbsp; | &amp;nbsp;Size &amp;nbsp; | Description 
--------+----------------------+-------+----------+---------+-------------
 public | parallel_update_test | table | postgres | 3961 MB | 
(1 row)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更新需求，每条记录都有更新&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;例如我存储的数组是USERID，每条记录代表某个属性的人群数据，这个属性的人群数据不断的在变化，因此会不断的需要更新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;update parallel_update_test set info=array_append(info,1);

单个事务更新耗时80秒 &amp;nbsp; 
postgres=# begin;
postgres=# update parallel_update_test set info=array_append(info,1);
UPDATE 10000
Time: 80212.641 ms
postgres=# rollback;
ROLLBACK
Time: 0.131 ms
postgres=# vacuum parallel_update_test ;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;使用并发的手段提高更新效率。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方法1 advisory lock&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个人群都有一个唯一的ID，即parallel_update_test.id。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以只要保证并行的会话更新的是不同的ID对应的数据即可，同时需要避免单次重复更新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何避免更新同一个ID？&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用advisory lock可以避免并发更新同一条记录。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;如何避免重复更新同一条记录。&lt;/span&gt;&lt;/strong&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用扫描式的获取advisory lock，保证不会重复获取即可。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码如下:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;create or replace function update() returns void as $$
declare
 &amp;nbsp;v_id int;
begin
 &amp;nbsp;for v_id in select id from parallel_update_test &amp;nbsp;-- 扫描式
 &amp;nbsp;loop &amp;nbsp;
 &amp;nbsp; &amp;nbsp;if pg_try_advisory_xact_lock(v_id) then -- 获取到ID的LOCK才会实施更新，否则继续扫描
 &amp;nbsp; &amp;nbsp; &amp;nbsp;update parallel_update_test set info=array_append(info,1) where id=v_id;
 &amp;nbsp; &amp;nbsp;end if;
 &amp;nbsp;end loop;
end;
$$ language plpgsql strict;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;设计上尽量保证ID全局唯一，否则获取advisory lock的冲突可能性会增多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;测试，使用100个并行度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;vi test.sql
select update();

pgbench -M prepared -n -r -f ./test.sql -c 100 -j 100 -t 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并行更新耗时4秒&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;pgbench -M prepared -n -r -f ./test.sql -c 100 -j 100 -t 1
transaction type: ./test.sql
scaling factor: 1
query mode: prepared
number of clients: 100
number of threads: 100
number of transactions per client: 1
number of transactions actually processed: 100/100
latency average = 4407.490 ms
tps = 22.688650 (including connections establishing)
tps = 22.708546 (excluding connections establishing)
script statistics:
 - statement latencies in milliseconds:
 &amp;nbsp; &amp;nbsp; &amp;nbsp;3078.170 &amp;nbsp;select update();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;方法2 skip locked&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这个方法需要9.5以及以上版本支持&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码如下:&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;create or replace function update() returns void as $$
declare
 &amp;nbsp;v_id int;
begin
 &amp;nbsp;select id into v_id from parallel_update_test order by id limit 1 for update skip locked;
 &amp;nbsp;update parallel_update_test set info=array_append(info,1) where id=v_id;
 &amp;nbsp;loop
 &amp;nbsp; &amp;nbsp;select id into v_id from parallel_update_test where id&amp;gt;v_id order by id limit 1 for update skip locked;
 &amp;nbsp; &amp;nbsp;if found then
 &amp;nbsp; &amp;nbsp; &amp;nbsp;update parallel_update_test set info=array_append(info,1) where id=v_id;
 &amp;nbsp; &amp;nbsp;else
 &amp;nbsp; &amp;nbsp; &amp;nbsp;return;
 &amp;nbsp; &amp;nbsp;end if;
 &amp;nbsp;end loop;
end;
$$ language plpgsql strict;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用100个并行度&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;并行更新耗时4秒&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;&lt;span&gt;pgbench -M prepared -n -r -f ./test.sql -c 100 -j 100 -t 1
transaction type: ./test.sql
scaling factor: 1
query mode: prepared
number of clients: 100
number of threads: 100
number of transactions per client: 1
number of transactions actually processed: 100/100
latency average = 4204.439 ms
tps = 23.784386 (including connections establishing)
tps = 23.813193 (excluding connections establishing)
script statistics:
 - statement latencies in milliseconds:
 &amp;nbsp; &amp;nbsp; &amp;nbsp;3074.488 &amp;nbsp;select update();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/h2&gt;&lt;h2&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;小结&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在实时推荐系统中，通常可以使用数组或者比特位来标记人群，而每个人群都在不断的发生变化，也就是说，整张表都是热表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了提高更新的效率，本文给大家提供了两种并行消除行锁冲突更新的方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用PostgreSQL提供的skip locked 或者advisory lock特性，消除行锁冲突，提高并行度，从而提高更新效率，发挥机器的最大能力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;2016 PG大象即将召开，可点击阅读原文查看详情并报名。&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjU6I8l23mvF81naF7mTY7nTQBNsMLibzjPdRUvVOiaQzJZn47LzMTW0p3pVFgbb2TtmpSamQ3uba1uQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 18 Oct 2016 17:32:35 +0800</pubDate>
    </item>
    <item>
      <title>Uber是如何通过Mesos和Cassandra实现跨多个数据中心每秒100万的写入速度的？</title>
      <link>http://www.iwgc.cn/link/3120829</link>
      <description>&lt;p&gt;&lt;span&gt;每隔三十秒就会有位置数据返回，包括来自于司机和乘客应用的各类数据，需要实时使用的实时数据非常之多，那么Uber是如何存储这些位置数据的呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Uber的解决方案非常全面：他们在Mesos顶层构建了自己的系统，运行Cassandra。Uber的软件工程师Abhishek Verma有一个演讲，题为《Uber跨多个数据中心运行在Mesos上的Cassandra》（&lt;span&gt;阅读原文查看PPT&lt;/span&gt;），便对这个解决方案做了全面的解释。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们是否也该这么做呢？在聆听Abhishek的演讲时，这样的想法涌入脑海。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如今，开发者有许多艰难的选择要做，我们是否应当将所有的内容放在云端？应该用哪一个云？不会太贵吧？我们是否担心锁定的问题？或者应该兼容并包，精心构思一个混合型框架？还是应当自行解决存储问题，而不使用云端——以免达不到50%的毛利。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Uber决定自行构建，更准确的说法是：他们决定通过融合两个很有用的开源组件，拼合出自己的系统。这样一来，只需要找出办法让Cassandra和Mesos能够协调运作，这也是Uber所做的事情。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于Uber来说，这个决定并没有太过艰难，他们的财务不是问题，也能够接触到顶尖的人才与资源库，来创建、维护、更新这种类型的复杂系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;由于Uber的目标是在99.99%的情况下有能力解决任何人在任何地点的交通出行问题，因此，在目标无限广阔的时候，有能力控制开支便很重要了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过在聆听演讲时，我们还是会发现制作这类系统所付出的努力有多么惊人。普通的公司能做到这些么？实际上很难。如果你也对云秉持拒绝态度，希望大家都凭空从头建立自己的代码，那么请记得这一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;通常来说，用金钱换时间是笔不错的交易，用金钱换技术是绝对必要的。&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果Uber的目标是可靠性——请求失败率只有万分之一的话，他们需要许多数据中心。由于使用了Cassandra来处理跨数据中心的大量载入与处理工作，在选择数据库时我们要考虑这一点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果想为所有人在任何地方都能提供可靠的交通出行，我们要高效地利用自己的资源，这就是Uber选择Mesos这样的工具作为数据中心OS的原因。通过统计，在同一台机器上使用多路复用服务，可以减少30%的机器以节省开支。而具体选择Mesos的原因在于：在作出选择时，Mesos是唯一能够在上万台机器所构成的集群上运行的产品，而这一点正符合Uber的需求。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其中一些比较有趣的发现包括：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: square;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以在容器中运行有状态服务。Uber发现，这样做几乎没有差别。直接运行Cassandra，与在容器中由Mesos管理着运行Cassandra，其开销相差只有5-10%。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;性能十分优秀：读取延迟（13毫秒）和写入延迟（25毫秒）都很低。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在最大的集群上，系统能支持每秒超过100万的写入和约10万的读取吞吐量。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;敏捷比性能更加重要。使用这类架构，Uber获得了敏捷性。想要跨集群创建和运行工作负载都非常容易。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;下面是本文作者对该演讲的注释：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;➤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;起初&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;针对不同的服务，有不同的静态分区机器。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可能有50台机器专门负责API，50台负责存储等等，彼此工作并不重叠。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;➤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;现在&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;所有工作都要运行在Mesos上，包括那些有状态的服务，比如Cassandra和Kafka。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Mesos是一个数据中心OS（Data Center OS），允许使用者将数据中心视为单独的资源池来编程。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由于Mesos可运行在数万台机器上，这正是Uber的需求之一，因此他们选择了Mesos，不过如今Kubernetes可能也能达到同样的效果。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Uber在MySQL顶层构建了自己的分片数据库Schemaless。Cassandra和Schemaless就是Uber的两个数据存储选项。已有的Riak实现会被转移到Cassandra之上。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;单独的机器可以运行不同类型的服务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据统计，在同一台机器上使用多路复用服务能够缩减30%的机器，这是谷歌在Borg上测试得出的发现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;举个例子，如果一个服务占用大量的CPU，而另一个服务占用大量的存储或内存，两个服务就可以高效地运行在同一个服务器上，因此机器的利用率得到提升。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;目前Uber拥有大约20个Cassandra集群，并有计划扩展到100个。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;敏捷比性能更加重要。我们需要有能力管理这些群组，并以平滑的方式对其执行不同的操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;为什么在容器中运行Cassandra，而不是在机器上直接运行？&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们要存储数百GB的数据，还想跨多台机器、甚至跨数据中心执行复制。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同时希望在不同的集群之间实现资源和性能隔离。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在一个单独的共享集群上获得所有这些效果是很难的，举个例子，如果创建一个有一千个节点的Cassandra集群，它是无法扩展的，或者不同集群之间也会有性能干扰。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;➤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;在生产环境中&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在两个数据中心（美国西部和东海岸）中有大约20个集群负责执行复制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最初在中国还有4个集群，不过与滴滴合并后，那些集群就关闭了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;两个数据中心有差不多300台机器。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;最大的两个集群拥有每秒过100万的写入&amp;amp;约10万读取能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这些集群中有一台存储着位置信息——每隔30秒由司机和乘客的客户端发出的位置信息。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;读取延迟平均为13毫秒，写入延迟为25毫秒。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;大多使用LOCAL_QUORUM的一致性级别，也就是高度的一致性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;➤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Mesos后台工具&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Mesos不考虑机器的CPU、内存和存储。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在编程时，我们面对着不是单独一台机器，而是一个资源池。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;线性扩展：可以运行在数万台机器上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高可用性：使用Zookeeper在可配置数量的副本中选出leader。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以运行Docker容器或Mesos容器。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可插拔的资源隔离：Linux使用Cgroups内存与CPU隔离器，还有Posix的隔离器，针对不同的OS有不同的隔离机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;两级调度器：将Mesos代理的资源用于不同的框架中，各个框架在这些资源顶层自行安排任务。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;➤&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;Apache Cassandra后台程序&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Cassandra十分适合Uber的用例。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可水平扩展：添加新的节点，便可线性地扩展读取和写入吞吐量。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;高可用性：针对可调整的一致性级别，系统具有容错性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;低延迟：在同一个数据中心中，延迟可达到毫秒级别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;操作简单：所有集群都属于同质化集群，没有主服务器，在集群中没有特殊的节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;足够丰富的数据模型：包含列、复合键、计数器、次索引等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;与开源软件集成良好：Hadoop、Spark、Hive都有能与Cassandra对话的连接器。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;➤&lt;/span&gt;Mesosphere + Uber + Cassandra = Dcos-Cassandra-Service&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Uber与Mesosphere协作生成了mesosphere/dcos-cassandra-service，这是一个自动化的服务，使得在Mesosphere DC/OS上执行部署和管理非常简单。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuiaH7Imiab3PXQf3b0LFnnSTmshNiaFibUrGYelcPhA3u2aU3qCOoIZf1QkNXZnPia02tWkttQlpHxdbqw/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;顶层是Web界面或者控制面板API。可以指定想要的节点数量和CPU数量，指定Cassandra配置，然后提交到控制面板API。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Uber的开发系统是在Aurora顶层启动的，用于运行无状态服务，以及引导载入dcos-cassandra-service框架。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在案例中，dcos-cassandra-service框架有两个集群与Mesos主服务器会话。Uber在系统中使用了五个Mesos主服务器，并通过Zookeeper来选出leader。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;同时使用Zookeeper来存储框架的元数据，包括：运行哪些任务，Cassandra配置，集群的健康度等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在集群的每台机器上都有Mesos代理运行，负责向Mesos的master提供资源，然后master再负责以离散的方式进行分发。框架可以接受或拒绝这些资源，同一台机器上可以运行多个Cassandra节点。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这里使用的是Mesos容器，而不是Docker。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在配置中有5个端口被重写，分别是torage_port、ssl_storage_port、native_transport_port、rpcs_port、jmx_port，这样在同一台机器上就可以运行多个容器了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由于使用了持久卷，可以将数据存储在沙盒目录的外部。如果Cassandra出错，在持久卷中仍保留有数据，可以提供给刚才崩溃重启的任务使用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这里使用了动态预留的方式，以确保在重启失败的任务时资源可用。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Cassandra的服务操作&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Cassandra有一个概念，就是种子节点的存在。种子节点用于在新节点加入集群时协助进行引导。典型的种子节点provider会在Mesos集群中自动铺设Cassandra节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在Cassandra集群上的节点数量可以通过REST请求来增加。它会开启额外的节点，给它发送种子节点，并引导额外的Cassandra后台程序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;所有Cassandra的配置参数都能修改。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用API可以替换失效的节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在副本间同步数据时需要修复，不过是在以节点为基础的主要键值范围中执行修复，不会影响到性能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;清除程序会移除不需要的数据。如果节点添加成功，数据转移到新节点之后，系统会命令清除程序删除这些冗余数据。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在这个框架中，多个数据中心的副本也是可配置的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多数据中心支持&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;每个数据中心都安装有独立的Mesos，以及独立的框架实例。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;框架与各个部分对话，并周期性地交换种子节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;这就是Cassandra所需内容。通过引导其它数据中心的种子，节点会在拓扑中分布，并得出这些节点的内容。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;数据中心之间ping的往返延迟为77.8毫秒。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按照第50百分位计算，异步复制延迟为44.69毫秒；按照第95百分位计算，是46.38毫秒；按照第99百分位计算则是47.44毫秒。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;计划执行&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以总结为计划、阶段和模块。规划好的计划包含不同的阶段，每个阶段包含多个模块。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;第一阶段就是协调，系统会找出在Mesos之外已经运行的程序。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在部署阶段，系统会检查配置中的节点数是否已经在集群中呈现，并在需要时进行部署。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;模块就是Cassandra节点的具体规范。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;另外还包含其它阶段：备份阶段、恢复阶段、清理阶段与修复阶段，具体要取决于命中的是哪个REST端点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;集群的开启速度为每分钟一个新节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;我们希望每个节点的启动时间达到30秒，&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在Cassandra上不能并发启动多个节点。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;通常，每个Mesos节点会分配2TB的磁盘空间与128GB的RAM。给每个容器分配100GB，给每个Cassandra进程分配32GB的堆栈。（注意：这个数据可能会有细节错误）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;系统使用CMS来替代G1垃圾回收器，这个垃圾回收器无需任何调优，便可以达到按第99.9百分位计算更为优秀的延迟和性能。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;➤&lt;/span&gt;裸机直接运行 VS Mesos管理下的集群&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用容器的性能开销如何？裸机代表着Cassandra不运行在容器中。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;读取延迟，几乎没有任何区别：5-10%的开销&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在裸机中，平均为0.38毫秒，而在Mesos中是0.44毫秒。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按第99百分位计算，裸机是0.91毫秒，而使用Mesos则是0.98毫秒。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;读取吞吐量差别很小。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;写入延迟。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;裸机平均值为0.43毫秒，而使用Mesos平均是0.48毫秒。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;按第99百分位计算，裸机是1.05毫秒，使用Mesos则是1.26毫秒。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;写入的吞吐量差别也很小。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;span&gt;原文链接： How Uber Manages A Million Writes Per Second Using Mesos And Cassandra Across Multiple Datacenters（译/孙薇 责编/钱曙光）&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年11月18日-20日，由CSDN重磅打造的年终技术盛会&lt;/span&gt;&lt;span&gt;&lt;strong&gt;SDCC 2016中国软件开发者大会&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;将在北京举行，大会秉承干货实料（案例）的内容原则，本次大会共设置了12大专题、近百位的演讲嘉宾，并邀请业内顶尖的CTO、架构师和技术专家，与参会嘉宾共同探讨电商架构、高可用架构、编程语言、架构师进阶、微信开发、前端、平台架构演进、基于Spark的大数据系统设计、自动化运维与容器实践、高吞吐数据库系统设计要领、移动视频直播技术等。10月14日仍是&lt;/span&gt;&lt;span&gt;&lt;strong&gt;五折抢票&lt;/strong&gt;&lt;/span&gt;&lt;span&gt;，最低1400元，注册参会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 18 Oct 2016 17:32:35 +0800</pubDate>
    </item>
    <item>
      <title>【附获奖名单】SDCC 2016北京站等你来约，出品人信息和12个专题大公开（五折购票中）</title>
      <link>http://www.iwgc.cn/link/3120830</link>
      <description>&lt;p&gt;&lt;span&gt;2016年11月18日-20日，由CSDN重磅打造的年终技术盛会，SDCC 2016中国软件开发者大会将在北京举行，大会面向国内外的中高端技术人员，聚焦最前沿技术及一线的实践经验，从而助力企业的技术升级和改造、全面提升技术人员的综合实力。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZW3rpMfhRT7FiasYKgHZwr5yUnDhCIP6L81UrNfAZc6DiavmTicCAzdF4A/640?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SDCC 2016中国软件开发者大会秉承干货实料（案例）的内容原则，本次大会共设置了12大专题、近百位的演讲嘉宾，并邀请业内顶尖的CTO、架构师和技术专家，与参会嘉宾共同探讨电商架构、高可用架构、编程语言、架构师进阶、微信开发、前端、平台架构演进、基于Spark的大数据系统设计、自动化运维与容器实践、高吞吐数据库系统设计要领、移动视频直播技术、个性化推荐等，旨在推动软件开发实践的深入交流与分享，为软件开发者、广大互联网人士及行业相关人士提供最具价值的交流平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;p&gt;&lt;span&gt;好消息！日前Erlang最初的设计者和实现者&lt;span&gt;Joe Armstrong&lt;/span&gt;确认了会参加本次大会并带来主旨演讲，他也是Erlang OTP系统项目的首席架构师。他拥有瑞典皇家理工学院博士学位，是容错系统开发领域的世界级专家。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;strong&gt;出品人首曝光，清一色老司机&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;张立刚 1号店&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZgjhIlWCUWfIsagggcg0BkvjnY7rH27LpsHCqNyUdEYEbLoqTAXtEgA/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;张立刚 1号店 技术部-电商云平台技术总监&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：电商架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; 2012年7月加入1号店，先后担任过1号店订单、库存、拆单、运费、第三方平台订单等电商核心交易系统负责人，致力于电商平台产品化、智能化、云化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;期间主导并参与了1号店SOA治理、订单Service化、订单水平拆库&amp;amp;去Oracle迁Mysql、无线性能优化及拆pool、运费体系重构、库存准确率优化等重要项目，负责1号店与Tmall、百度、当当、B2B2C平台等第三方平台订单业务，从0开始建立了1号店完善的订单监控、预警、履单体系。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;对高可用高并发高性能的电商核心交易系统及SOA架构有深入的理解和实践，熟悉电商核心产品、订单、库存等业务，将以OMS为核心规划构建新一代电子商务云平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;周爱民 南潮（Ruff）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZdzGiaU9aJ1JiceqZEeVSkSY9xXL3XI9ZZ5H0OIdKiagtV5aHoXYLdLzlQ/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;周爱民 南潮（Ruff） 架构师&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：架构师的进阶之路&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;现任南潮（ruff.io）架构师。从 1996 年开始涉足商业软件开发，在软件开发、软件工程、团队建设以及部门管理方面经验丰富，曾任支付宝（中国）公司业务架构师，盛大网络平台架构师，豌豆荚架构师等职。著有《Delphi 源代码分析》、《JavaScript 语言精髓与编程实践》、《大道至简》、《大道至易》等专著，其中《大道至易：实践者的思想》是一本以架构思想为基础，综合讨论软件工程、开发技术与系统架构三者间的关系与组织方法的著作。自 2008 年以来，一直作为《程序员》特约专家负责软件工程、架构方面的二审工作。系前端组织 W3CTech 特约技术专家。是多届 CSDN 的 SD2 大会、InfoQ 的 QCon 大会、Erlang China 大会(CN Erlounge)、前端 D2 大会、W3CTech 前端交流会、上海 ThinkInLAMP 架构师大会(首届)、MSUP/MPD 大会特约讲师、评委。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;&lt;strong&gt;周裕波&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7Z5F0K4FBlqxqkm8mhaOIRrPhQXEzSz8pS6VXsxUYjNKxJA0LWRmbDgw/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;周裕波 w3ctech 发起人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：前端开发&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; w3ctech &amp;amp;&amp;amp; 前端圈发起人，任职于奇虎360 奇舞团，SDCC 2015、SDCC 2016两界大会前端开发专题论坛出品人。有多年的前端开发经验及前端大会组织经验。曾先后组织举办过Web标准化交流会、走进名企、拥抱HTML5、JavaScript专题会议、Webreubild北京、Mobile开发者专题大会、CSS大会及FEDay，活跃于前端技术社区。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;沈剑 58到家&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZsTmJ7Vn5dh7HQibSHWQ3Err9DKqAGmC33EHsvnjkmFGwYgvx6fnI5Bw/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;沈剑 58到家 技术委员会主席&amp;amp;技术总监&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：高可用架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;互联网架构技术专家，“架构师之路”公众号作者。曾任百度高级工程师，58同城高级架构师，58同城技术委员会主席，58同城C2C技术部负责人，58同城技术学院优秀讲师。现任58到家技术委员会主席，技术总监，负责架构、平台、中台等多个后端部门。本质，技术人一枚。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;陈超 七牛云&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7Zql5h1OwtfaBdv5otyaokmqGr7eGaUV3bFPORdPsVBibSaHSpDuRJ94A/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;陈超 七牛云 技术总监&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：基于Spark的大数据系统设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;全面负责七牛所有数据产品的设计与研发，近年来一直专注于分布式计算与机器学习等领域。有非常丰富的分布式系统设计与实现的经验，在分布式数据库方面也有深入研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;柳峰 贵州多米科技&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZVrSSKPqHpZNlvrf4HiaqXPNctiaeV65EPQxtRjNR4HqwOfv1HCvn9EkQ/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;柳峰 贵州多米科技 创始合伙人兼CTO&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：微信开发&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;刘运强，网名柳峰，计算机硕士研究生，畅销书《微信公众平台应用开发：方法、技巧与案例》作者，CSDN博客专家，CSDN学院讲师，贵州派盛教育首席讲师。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;杨芳贤 IBOS&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7Z5ibE5sz27myZm0v8ftpmodjFXESbet4MkvKcuicoKpqiaN4pvew6KwaBA/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;杨芳贤 IBOS 创始人/产品经理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：微信开发&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;微信企业号核心伙伴，中国移动办公专家顾问团成员。2014年微信开发者大会分享《企业微信大战略之企业号篇》得到业界广泛关注，现专注IBOS-酷办公（开源的企业协同管理平台）与微信公众号、企业号融合应用的研究。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;史海峰 当当网&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZFTh25mcoCu5Vq5voK4rqlWvSHibiaeVduU5LibuhRsXJo12ZYSWcGKvxQ/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;史海峰 当当网 架构部负责人&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：架构演进&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍： &lt;/span&gt;&lt;/strong&gt;&lt;span&gt;2001年毕业于北京化工大学计算机科学与技术专业，曾在神州数码、亚信联创长期从事电信行业业务支撑系统集成工作，参与中国移动、中国联通多个项目，具有丰富的大型业务系统研发实施经验。 2012年加入当当，负责总体架构规划、技术规范制定和技术预研推广，善于把握复杂业务需求，提出创新性解决方案，参与了近年当当多个重点项目的方案设计，在项目中对系统架构进行持续改造优化。负责技术委员会组织管理工作，发掘最佳实践、推动技术革新，组织内外部技术交流。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;金官丁 热璞科技&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7Zmbk2bqDkbS7dy1dqtFwYvJj8bwwnhvNkibww8ibeG8MXcu33U6yTEJRA/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;金官丁 热璞科技 CTO&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：高吞吐数据库系统设计要领&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;曾在阿里巴巴负责开源分布式数据库架构探索与实践，阿里系第一个专职MySQL DBA，后离开加入风靡全球创业团队开心农场。现创办热璞科技担任CTO一职，负责分布式数据库产品HotDB的产品规划及去IOE解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;杜玉杰 华为&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7Zsqf0mzD7UqS2mbHIqw7I4IBHr81QWHNl5PotQuu9bBUupoR3uRxb0w/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;杜玉杰 华为 华为开源软件能力中心、华为开源战略管理核心团队（OSCT）专家成员&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：自动化运维与容器实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;开源布道师，Growth Hacker，曾组织和发起过首届开源云OpenStack上海峰会以及2012 COSUG开发者大会，联合CSDN共同组织了OpenStack亚太峰会：2012 OpenStack亚太技术峰会上海站纵览 ，当选OpenStack基金会董事：OpenStack基金会和董事们的那些事。目前就职于华为开源软件能力中心、华为开源战略管理核心团队（OSCT）专家成员，15年负责华为容器生态技术团队推动成立了OCI和CNCF基金会，并荣获P&amp;amp;S战略与业务发展体系最佳业务发展与产业竞合奖 。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;陈举锋 阿里巴巴&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZfkswG1e43RQ4CdWnJMPTDk3Ww7ibvFBpaJ4GFdGSibTskbgOMYAN7bicw/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;陈举锋 阿里巴巴 高级无线技术专家&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：移动直播&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;花名丰火，阿里巴巴高级无线技术专家，多年无线客户端开发经验，曾负责iPhone版QQ客户端架构，2015年加入手机淘宝团队，目前负责淘宝直播的研发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;卢亿雷 Admaster&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7ZVg8tNe7PQevkwhmOd7lvLSPe82ZjwO393JWzsbn4SRQ5w0e9dD7W0Q/0?"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;卢亿雷 Admaster 技术副总裁&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;出品专题：个性化推荐&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个人介绍：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt; AdMaster技术副总裁兼总架构师，大数据资深专家，CCF大数据专委委员，北京航空航天大学特聘教授。主要负责数据的采集、清洗、存储、挖掘等整个数据流过程，关注Hadoop/HBase/Storm/Spark/ElasticSearch。有超过10年云计算、云存储、大数据经验。曾在联想、百度、Carbonite工作，并拥有多篇大数据相关的专利和论文。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;strong&gt;SDCC 2016·北京站将与你见面的12个热门技术专题&lt;/strong&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;电商架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;双11异常火爆，不管是销售数字，还是用户体验，这次全民购物狂潮再次刷新了过去的所有记录。而在这一切背后，需要稳定高效的系统架构设计来提供有力支持。本专题揭示了国内各大知名电商架构设计的最佳技术实践。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;架构师进阶之路&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;怎样学习才能成长为一名合格的架构师，或者说一名合格的架构师应该有怎样的技术知识体系，这不仅是一个刚刚踏入职场的初级程序员也是工作三五年之后开始迷茫的老程序员经常会问到的问题。本专题内容来自CTO、首席架构师等眼中的架构师，他们将给你最全面最权威的回答。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;前端&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;随着新一代前端技术的发展，给前端开发者带来巨大的创新应用实践机会，本专题是为HTML5、CSS3、JavaScript等前端技术的互联网开发者所举办的，内容涵盖网络游戏、电商、旅游、媒体、社交、技术服务等多种互联网业态的技术经验分享，将会涉及各种WEB前端开发技术。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高可用架构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;理论结合实践，案例式讲述，深入剖析架构设计的高可用性，快速提升设计和架构能力，让大家系统性的掌握一线互联网公司高可用架构设计的方法论，并应用于实际工作中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;基于Spark的大数据系统设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;Spark是目前热门的大数据分布式编程框架之一，现已成为Apache顶级项目，受到业界的广泛关注和使用。本专场主要讨论的话题有：利用基于Spark的大数据系统设计来促进信息时代的智能化，有效结合Spark和其他热门大数据工具并加以利用；应用目前的Spark技术实现大数据在各行业的全面渗透；以及通过实际案例和场景来探讨Spark与大数据的互动创新。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;微信开发&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;微信仍以迅猛势头火速发展，并已跨入海外市场，服务着全球亿万用户。作为技术开发者，除了时刻关注领域技术发展外，更应紧盯、深挖掘该行业所蕴藏的巨大商机。目前微信开发成为SDCC大会的重要分论坛之一，2014年北京和深圳两场微信开发者大会、2015 SDCC微信开发专题论坛，吸引了不少领域技术专家参与分享，受到了广大微信开发者的一致好评。2016年，SDCC微信开发论坛将持续精彩，携手更多技术高手、创业精英，共研技术难点，碰撞创新点子。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;架构演进&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;本专题涵盖各类互联网后台、移动、直播等热门架构的演进过程，在架构变迁中遇到的痛点和解决方案，从而带给参会者以启发。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高吞吐数据库系统设计要领&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;本专题将邀请国内外的数据库专家，共同探讨MySQL、NoSQL、Oracle、缓存技术、云端数据库、智能数据平台等领域的前瞻性热点话题与技术，尤其是在高数据量情况下实现高吞吐数据库的设计。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;自动化运维与容器实践&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;DevOps并非你想的那么简单，如今，您经常听周围的人谈论DevOps，但真正理解并能执行的人极少。其实，采纳DevOps的文化壁垒非常高，这是一个值得探索的漫长过程。DevOps论坛邀请国内DevOps行业顶级专家，和大家共同探讨DevOps具体应用场景、如何在企业实施DevOps、DevOps实际案例、DevOps如何加速企业创新等热点话题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;移动视频直播技术&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;移动直播技术属于今年最热的前沿领域，在移动直播技术专场邀请到多位直播技术专家深度阐述直播连麦技术；在热门时段大主播高峰值情景下，如何优化直播礼物系统？面对延迟、卡顿等诸多难题，全互动直播技术的最佳解决方案；基于第三方CDN，我们该如何实现直播质量监控。更多精彩的直播技术，尽在本专题。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; font-size: 16px; line-height: 25.6px; white-space: normal; max-width: 100%; color: rgb(62, 62, 62); background-color: rgb(255, 255, 255); box-sizing: border-box !important; word-wrap: break-word !important;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;个性化推荐&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据算法是大数据得以有效应用的基础，能够在保证推荐准确性的同时增加推荐的多样性，满足用户多种需求，还能够实现实时反馈，强化推荐算法。本专场主要讨论的话题有：利用大数据算法来实现组织的运营能力；通过推荐算法分析有效打通不同算法间的固有壁垒；应用目前的大数据算法来提升企业IT效率；以及通过实际案例和场景来探讨推荐算法的应用分析能力。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，我们也接受讲师申请，详情点击：&lt;span&gt;&lt;strong&gt;http://geek.csdn.net/news/detail/106595&lt;/strong&gt;&lt;/span&gt;。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SDCC 2016中国软件开发者大会秉承干货实料（案例）的内容原则，本次大会共设置了12大专题、近百位的演讲嘉宾，10月21日前仍是五折购票，最低1400元，扫描下方&lt;span&gt;&lt;strong&gt;二维码&lt;/strong&gt;&lt;/span&gt;或【&lt;span&gt;&lt;strong&gt;&lt;span&gt;阅读原文&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;】立即抢票。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujLBa1fFNZA70jAT3tm0J7Z50UHcnxiawI4Av7icJeu33l82nw8asTdWlPzsfiaLNgtPicWich7v8EjNxA/640?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAuiaH7Imiab3PXQf3b0LFnnSTmuyrVxFXtmBzwvfzKOJAkOK1dHLCeDIATfaeukKoLKgicfFYp3IfM4Vg/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面附上本次截图赠书活动&lt;span&gt;&lt;strong&gt;中奖名单&lt;/strong&gt;&lt;/span&gt;咯！因参与人数远超预期，故抽取范围特申请扩大，具体获奖明细如下（微信ID）：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; line-height: 25.6px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;犇犇&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;笑傲江湖&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;耳东&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;恶来。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Quiter&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Hoffman&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;卍&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;杨兜兜&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;杨金平&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Dawu&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;恭喜以上用户获赠书籍，也感谢其他参与的小伙伴，咱们下次再约！&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 18 Oct 2016 17:32:35 +0800</pubDate>
    </item>
  </channel>
</rss>
