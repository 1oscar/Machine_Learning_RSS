<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>CSDN大数据</title>
    <link>http://www.iwgc.cn/list/1933</link>
    <description>CSDN分享Hadoop、Spark、NoSQL/NewSQL、HBase、Impala、内存计算、流计算、机器学习和智能算法等相关大数据观点,提供云计算和大数据技术、平台、实践和产业信息等服务.</description>
    <item>
      <title>聚类分析总结 &amp;amp; 实战解析</title>
      <link>http://www.iwgc.cn/link/2595352</link>
      <description>&lt;p&gt;聚类分析是没有给定划分类别的情况下，根据样本相似度进行样本分组的一种方法，是一种非监督的学习算法。聚类的输入是一组未被标记的样本，聚类根据数据自身的距离或相似度划分为若干组，划分的原则是组内距离最小化而组间距离最大化，如下图所示：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjWuiaBLCSw4ibib2eUKU0vquX5hdYVXTecxZPPSpgX6eMupEJp7SquFYm76sQ9iawIgQdT33ox7JuFYjw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;常见的聚类分析算法如下：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;K-Means：&lt;/strong&gt; K-均值聚类也称为快速聚类法，在最小化误差函数的基础上将数据划分为预定的类数K。该算法原理简单并便于处理大量数据。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;K-中心点：&lt;/strong&gt;K-均值算法对孤立点的敏感性，K-中心点算法不采用簇中对象的平均值作为簇中心，而选用簇中离平均值最近的对象作为簇中心。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;系统聚类：&lt;/strong&gt;也称为层次聚类，分类的单位由高到低呈树形结构，且所处的位置越低，其所包含的对象就越少，但这些对象间的共同特征越多。该聚类方法只适合在小数据量的时候使用，数据量大的时候速度会非常慢。&lt;/p&gt;&lt;p&gt;下面我们详细介绍K-Means聚类算法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;K-Means聚类算法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;K-Means算法是典型的基于距离的非层次聚类算法，在最小化误差函数的基础上将数据划分为预定的类数K，采用距离作为相似性的评价指标，即认为两个对象的距离越近，其相似度就越大。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;算法实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;选择K个点作为初始质心&lt;/p&gt;&lt;p&gt;&lt;strong&gt;repeat&lt;/strong&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;将每个点指派到最近的质心，形成K个簇&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;重新计算每个簇的质心&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;until 簇不发生变化或达到最大迭代次数&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;K如何确定&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;与层次聚类结合，经常会产生较好的聚类结果的一个有趣策略是，首先采用层次凝聚算法决定结果粗的数目，并找到一个初始聚类，然后用迭代重定位来改进该聚类。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;初始质心的选取&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;常见的方法是随机的选取初始质心，但是这样簇的质量常常很差。&lt;/p&gt;&lt;p&gt;(1)多次运行，每次使用一组不同的随机初始质心，然后选取具有最小SSE(误差的平方和)的簇集。这种策略简单，但是效果可能不好，这取决于数据集和寻找的簇的个数。&lt;/p&gt;&lt;p&gt;(2)取一个样本，并使用层次聚类技术对它聚类。从层次聚类中提取K个簇，并用这些簇的质心作为初始质心。该方法通常很有效，但仅对下列情况有效：样本相对较小;K相对于样本大小较小。&lt;/p&gt;&lt;p&gt;(3)取所有点的质心作为第一个点。然后，对于每个后继初始质心，选择离已经选取过的初始质心最远的点。使用这种方法，确保了选择的初始质心不仅是随机的，而且是散开的。但是，这种方法可能选中离群点。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;距离的度量&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;常用的距离度量方法包括：欧几里得距离和余弦相似度。欧几里得距离度量会受指标不同单位刻度的影响，所以一般需要先进行标准化，同时距离越大，个体间差异越大;空间向量余弦夹角的相似度度量不会受指标刻度的影响，余弦值落于区间[-1,1]，值越大，差异越小。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;质心的计算&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于距离度量不管是采用欧式距离还是采用余弦相似度，簇的质心都是其均值。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;算法停止条件&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;一般是目标函数达到最优或者达到最大的迭代次数即可终止。对于不同的距离度量，目标函数往往不同。当采用欧式距离时，目标函数一般为最小化对象到其簇质心的距离的平方和;当采用余弦相似度时，目标函数一般为最大化对象到其簇质心的余弦相似度和。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;空聚类的处理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果所有的点在指派步骤都未分配到某个簇，就会得到空簇。如果这种情况发生，则需要某种策略来选择一个替补质心，否则的话，平方误差将会偏大。&lt;/p&gt;&lt;p&gt;(1)选择一个距离当前任何质心最远的点。这将消除当前对总平方误差影响最大的点。&lt;/p&gt;&lt;p&gt;(2)从具有最大SSE的簇中选择一个替补的质心，这将分裂簇并降低聚类的总SSE。如果有多个空簇，则该过程重复多次。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;适用范围及缺陷&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;K-Menas算法试图找到使平方误差准则函数最小的簇。当潜在的簇形状是凸面的，簇与簇之间区别较明显，且簇大小相近时，其聚类结果较理想。对于处理大数据集合，该算法非常高效，且伸缩性较好。&lt;/p&gt;&lt;p&gt;但该算法除了要事先确定簇数K和对初始聚类中心敏感外，经常以局部最优结束，同时对“噪声”和孤立点敏感，并且该方法不适于发现非凸面形状的簇或大小差别很大的簇。&lt;/p&gt;&lt;p&gt;克服缺点的方法：使用尽量多的数据;使用中位数代替均值来克服outlier的问题。&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;实例解析&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjWuiaBLCSw4ibib2eUKU0vquX5NaRbdGwPRGXhA9UDkXCeII9jq8mHsPVXYjLZqDcec56ugQ9BwXlgPw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;下面我们用TSNE(高维数据可视化工具)对聚类结果进行可视化&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjWuiaBLCSw4ibib2eUKU0vquX52Tt9ianxAoITPM2oSaKunibM0gNMeOyjgr70UzMQHPTC0D3fRqIm8sEQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;聚类效果图如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjWuiaBLCSw4ibib2eUKU0vquX5fj0KEZibRcH502JsuKokHW5HibWW5hHkbkz821zCicshV6HB7s0hbPfKA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;下面我们用PCA降维后，对聚类结果进行可视化&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjWuiaBLCSw4ibib2eUKU0vquX5akLVMf1dbXSVLpxJbryqasFjLicZ5wyZiayu3licq7uqCXGia0T0xlQZyw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;聚类效果图如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjWuiaBLCSw4ibib2eUKU0vquX5UcaYs8hbzl3uYiahtNUD06rEKic2hn7bpMsRkuycbLFdCK7RoZhZYsEw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3&gt;&lt;strong&gt;Python主要的聚类分析算法总结&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;在scikit-learn中实现的聚类算法主要包括K-Means、层次聚类、FCM、神经网络聚类，其主要相关函数如下：&lt;/p&gt;&lt;ul class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;KMeans: &lt;/strong&gt;K均值聚类;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;AffinityPropagation:&lt;/strong&gt; 吸引力传播聚类，2007年提出，几乎优于所有其他方法，不需要指定聚类数K，但运行效率较低;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;MeanShift&lt;/strong&gt;：均值漂移聚类算法;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;SpectralClustering&lt;/strong&gt;：谱聚类，具有效果比KMeans好，速度比KMeans快等特点;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;&amp;nbsp;AgglomerativeClustering&lt;/strong&gt;：层次聚类，给出一棵聚类层次树;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;DBSCAN&lt;/strong&gt;：具有噪音的基于密度的聚类方法;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;BIRCH&lt;/strong&gt;：综合的层次聚类算法，可以处理大规模数据的聚类。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些方法的使用大同小异，基本都是先用对应的函数建立模型，然后用fit()方法来训练模型，训练好之后，就可以用labels_属性得到样本数据的标签，或者用predict()方法预测新样本的标签。&lt;/p&gt;</description>
      <pubDate>Wed, 07 Sep 2016 17:08:35 +0800</pubDate>
    </item>
    <item>
      <title>参加年度开发者大调查 Macbook Air等你来拿</title>
      <link>http://www.iwgc.cn/link/2595353</link>
      <description>&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;大家的月薪是多少？在近一年增长幅度是多少？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;是否有跳槽计划？会选择什么类型的公司？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;什么开发语言使用最多？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在哪些Web开发工具使用的较多？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;......&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相信不少开发者都会有上述的疑惑或遇到类似的问题，为了勾勒出中国软件开发者当前最真实的生存状态和行业现状，2016年9月5日-10月10日CSDN发起“2016年中国软件开发者有奖大调查”活动，了解当下开发者的技能状态、开发工具配置、新技术应用等内容，希望能为软件开发者这一专属群体把脉。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;本次大调查将于2019年9月5日到10月10日在CSDN官网进行&lt;/span&gt;&lt;/strong&gt;&lt;strong&gt;&lt;span&gt;。&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;&lt;span&gt;不论是否CSDN用户均可参与，&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;CSDN还将从参与者中抽取幸运用户赠送丰厚大奖，回馈大家的辛苦付出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;奖项设置&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;特等奖两名 Macbook Air 11寸（1名），科大讯飞语音开发板（1名）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;一等奖两名 Apple Watch Sport&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;二等奖四名 叮咚智能音箱&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;三等奖40名 IKBC键盘&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;四等奖100名 程序员2016年全年电子刊物&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;鼓励奖140名 程序员2016年10月刊一本&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;获奖规则&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;所有奖项都将通过随机抽取的方式产生（使用CSDN ID登录参与调查，概率增加一倍哦），获奖名单将通过@CSDN 新浪官方微博以及CSDN微信公众号公布，请参与者随时关注我们的微博以及公众号，谢谢参与！（搜索微信号CSDNnews，即可关注CSDN微信）&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAughm6icIMqoTcZVSeiclRaQLBoDjbKmSSJaeGvwwqgzAcXR9Hy2RKynbaMuwicaEGpTicwbF6yRSmiaBOw/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;span&gt;&lt;section&gt;温馨提示&lt;/section&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAughm6icIMqoTcZVSeiclRaQLB9VfLXIHQScmVbxGZuLuiaIibgPRsDcNDc9Wk5mibUK6ic3Yt6JiaArbpeEw/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;section&gt;填完本份调查问卷约需10~15分钟，无效问卷参与者不会纳入到抽奖环节中，谢谢合作。&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;【&lt;span&gt;点击原文，参与问答&lt;/span&gt;】&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 07 Sep 2016 17:08:35 +0800</pubDate>
    </item>
    <item>
      <title>如何运用微服务来创建资产管理集成系统</title>
      <link>http://www.iwgc.cn/link/2595354</link>
      <description>&lt;p&gt;&lt;span&gt;在酒店行业，由于各类系统太过分散，进行整合势在必行。公司系统要与来自不同提供商的各类系统进行交互，这些系统的应用程序接口（API）也各不相同。此外，随着系统中录入的酒店客户增加，涉及的情况也越来越多，必须对其进行管理。由于这一行趋向互联化，资产管理系统（PMS）逐渐成为各大酒店的核心系统，而整合更是重中之重。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要想提供适用于酒店行业的软件解决方案，必须建立起与PMS供应商的双向集成系统。其中的挑战在于：我们需要大规模构建与管理这些联网的内容，并应对涉及多家酒店、多个PMS系统的情况。想要实现这些整合，有几种办法，本文将会介绍一个用于集成系统基础构建的简单架构设计方法。随着酒店发展，投资回报率（ROI）也会得以增加，而这种方法就使用到了微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;微服务是什么？&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;企业软件设计的思想领袖Martin Fowler曾为微服务下过一个全面的定义：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在过去几年中，“微服务架构”（Microservice Architecture）一词被广泛用于描述软件设计的某种特殊方式，即设计出一套独立的、可部署的服务。尽管这种架构风格尚无明确的定义，但在围绕着业务能力、自动化部署、终端智能、语言及数据的非集中控制方面，却有某些共同特征。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;本质来讲，微服务实际就是若干很小的软件组件，各个组件只专注于一件工作做好。不同于大型整体式的应用，使用微服务的应用各个部分可以拆开，每个部分只负责指定领域中每部分只需要在指定领域内专注管理一项功能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;正因如此，它们是各自独立且自治的。一项服务的变化也不会影响其他服务，不需要求其他部分一同进行变化。所以，当你慢慢壮大成熟时，不需要担心一旦有变化会影响到其他微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务的特点：小而专注、低耦合、高内聚&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;为何微服务如此强大?&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务架构能提供众多好处，主要有：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;可扩展性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;根据不同的属性，单一的系统需要同多个PMS实体进行融合。假设需要与1000个属性进行融合，那么即使它们运行的是同一供应商提供的同一PMS系统，也需要对1000个不同的集成进行显示管理。为了添加更多的复杂性，这些实体可以是来自于不同的供应商。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;当你加入更多的PMS实体和属性后，这一规模扩展得更大。如果你运行的是一个整体应用程序，那么你需要衡量所有事宜，因为它们是一个大整体。尤其是在访问量高峰期间，要想知道性能瓶颈在哪比较困难，而此时微服务会有更多的透明度。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;如果你利用的是微服务，那么在运行过程中是哪个服务出现了性能问题就一清二楚，而你也可以轻松地调整它们的容量（基础硬件），无需为正常运行的其他服务增加容量。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤弹性设计&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;酒店PMS系统可能会出现故障或有性能问题，但不会影响系统的性能或正常运行时间。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可以按需部署微服务，想部署多少都可以。部署的越多，容错性以及对变化的管理手段就越多。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤独立技术栈（Tech Stack Independence）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;你可以有多个技术栈，每项服务也配备了最适合的技术栈。你的顾客资料一般会在存储关系型数据库内，而相关请求却会放在非关系型数据库（NoSQL）中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;此外，没有一个特定的技术栈是长期适用的，毕竟，技术栈有很多个。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤添加、变更、消除特性及重构&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;微服务是一些很小的服务，通常只有几百行的代码。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由于这些代码的内聚性使得它们简单易懂，也就是它们每个服务都运行在自己的进程中。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其中一个的变化对其他的服务不会有直接的影响。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;删除整个微服务系统也比较容易，基本没有什么风险。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤部署&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;酒店想要提供额外的服务，但必须在系统正常、无故障的情况下才能实现，比如正常将客户登记的信息以及更新状态的请求发送给PMS系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;回滚也比较容易。假使过程中出现错误，相对于在整体单一式的数据库中回滚整个系统，通过自己的数据库回滚恢复到上一个微服务的操作也比较简单。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;另外，对整体单一式的应用来说，部署下一个版本非常痛苦，即便只是新增一个单一特性，也需要对整个程序进行部署，而且一次性部署所有事宜也是很具有风险性的。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意：如果只是与一个PMS集成，微服务就是大材小用了，但如果在大规模集成的情况下，微服务架构的好处就体现出来了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;传统方法：整体单一式的应用程序&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当然，整体单一式的应用对开发新产品和开展新业务来说是比较有利的，因为它的操作简单。但在此期间，你仍需了解目前所在的领域，以及将它们集成整合到一起的方法。运用整体单一式的应用在开发和部署时更简单，也更方便模拟预订服务，以及在客户资料的微服务版块内实现顾客资料模块的设计。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过随着公司的发展，整体规模也会迅速增长；因此随着规模的增大，系统的运行也越来越困难，需要增加新的特性和代码。而随着系统内容的增加，系统逐渐会不受控制，从而不能很好地执行运维。由于整体单一式的应用通常既不内聚也不耦合，变更系统时需要更多的回归测试，以确保新特性不会破坏系统的其他部分。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另外，由于代码之间互相依赖，会增加故障诊断与调试的难度。在更新服务时，需要对共享的基础设施代码执行修改，如果中间出现bug就会出问题。而且，这么大的代码库也很难在短时间内让新晋的开发人员熟练掌握。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，它对部署也有影响：应用程序越大，启动的时间就越长。也许新增更多的服务，并对其进行复制十分简单，但要记得我们只有一个单一的数据库。而且不仅如此，系统的一些部分可能会需要使用更多内存，而其他的部分则需要更多的CPU。因此，如果无法分别权衡各个组件的需求时该怎么办？没错，只能增加更多的新服务器——但这种做法的成本极高。所以，一旦有一定规模的公司，都会想要将系统分解成微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;架构概况&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在我们要来解释一下采用微服务架构所带来的长期性效益。不过，我们先来了解下微服务架构的设计细节。最重要的一点就是分离：集成系统应互相独立。举例来说，你的核心系统独立于X物业内运行的物业管理系统，同时也独立于Y物业运行的系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要想实现这种分离需要在核心系统和所有物业管理集成系统之间使用一个连接器，即中间件。中间件由两个方面组成：消息队列和background worker。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可用于实现服务的例子：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;消息队列：RabbitMQ，IronMQ等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;后台worker：IronWorker，AWS Lambda等&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;消息队列为系统间提供异步通信。发送者系统（你的系统）发布了一个消息到队列中，之后消息就会留在那里，直到稍后有订阅过队列的后台worker来处理。之后，后台worker会负责处理这则消息（解析内容）并利用PMS API进行管理集成，同时将数据保存到了中间件的数据库内。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意：后台worker可以是像AWS Lambda的云服务，也可以是Java或Windows服务器内部开发的程序。下面我们将会详细对其介绍。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;值得注意的是，消息队列遵循的是先进先出的原则（FIFO），因此处理队列中所有的消息都会按照它们输入的顺序。假设你有多个队列，发布到X队列的信息稍后会比Y队列中的信息优先处理。这一点在设计的时候需要考虑进去。不过，如果酒店的系统是PMS，那就不需要担心这些，因为它会在云或本地的系统中运行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这项服务不仅仅是一个CRUD包装器，因为它还控制着与预订相关的所有生命周期事件。如果需要指定预订一间房、新增一位陪同客人或登记入住的话，就需要发送一个恰当的请求给同一worker。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在我们根据Martin的描述来逐条分析一下微服务主要的几个特征，以及我们的架构又是如何实现这些特征的：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;围绕业务能力的组织&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在如何与PMS集成过程中，每个worker都负责实现一块逻辑。我们可以在一家资产产业的同一个PMS实例中接入多个worker，在另一家酒店添加与同一个PMS（相同运营商）相连的更多worker，也可以在其他产业中添加与其它PMS相连的其它worker。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;因此，假如我们需要修改与某些API互动的方式，只需单独对其中一个worker进行新版部署即可，完全不会影响到其它worker。我们可以让一个worker处理预订事宜，让另一个处理顾客资料档案事宜；可以使用Linux的crontab来安排一些后台worker，按照指定日程来循环执行任务；令其它一些worker持续运行，并在收到消息时立即处理。其它后台worker也可以唤醒核心系统的API，以便插入或更新其自PMS那里收集到的新消息（比如从PMS获取或读取数据，将之载入核心系统）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在Sam Newman所著的《构建微服务》一书中，他指出“基于较为小型的数据库工作的较小型团队生产率更高”——通过微服务就能实现。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不仅生产率的问题，将团队或个人从一个微服务切换到另一个（共享同一个数据库）也是可以的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而且由于长时间在同一个项目中工作的团队或个人可能会产生局限性，这种做法还能鼓励创新：让团队在产品与项目上互换，可能会造就数以千计的新点子。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤自动化部署&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;微服务的部署需要以自动化形式实现，原因为何？首先是因为微服务数量太多，如果手动部署，不但很容易出错，也很浪费时间。具体情况要取决于所拥有的微服务数量，而且每个服务必须分别、独立的发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;注意，这里说的是部署微服务的新版本，并不涉及新的worker实例——worker已经在运行中了，但需要部署新的代码版本。举例说明：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;假设要集成1000家产业，其中有500家使用运营商1所提供的PMS（即PMS_1），另有500家使用运营商2所使用的PMS（即PMS_2）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;除了运营商之外，由于背景十分相似，这里各个PMS实例中的worker数量很可能也是差不多的，除非我们想要添加更多相同类型的worker。为了简单起见，我们假设每个PMS实例中有5个worker，一个负责预订，一个负责顾客档案等。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;由于PMS_1的API与PMS_2的API不同，与PMS_1集成的预订服务其中的代码就和与PMS_2集成的预订服务代码不同。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在这1000家产业中，有5000个worker，其中：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PMS_1有2500个，500个负责预订工作，500个负责顾客资料工作，500个X worker，500个Y worker，500个Z worker，与PMS_1集成，每家产业各一；&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;PMS_2有2500个，500个负责预订工作，500个负责顾客资料工作，500个X worker，500个Y worker，500个Z worker，与PMS_2集成，每家产业各一。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;假设我们对与PMS_1集成的预订服务做了代码修改，通过测试后准备发布。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;假设源代码数据库只有一个，各个微服务也使用了持续集成工具，现在需要将代码部署到500个worker上，也就是与PMS_1集成的500个预订服务worker。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;其次，使用微服务的目的之一就是为了敏捷灵活，因此我们需要自动化。这就是持续集成与持续交付（CI与CD）大显身手的时候了：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CI即需要开发人员一天数次将代码集成到共享数据库的开发实践，提交就会触发build，如果build失败就会向所有人发送警告。其中的关键在于，及早发现提交出现的问题（也即是代码的问题）。如果build成功，就会部署到应用服务器上，并触发持续交付（CD）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;CD即确保上面build成功的内容可以快速部署到生产环境中的实践，首先将应用部署到与生产环境特性相同的staging环境中，再点击“部署”按钮即可将应用部署到生产环境中。这里最棒的是：由于只需点击一个按钮，这样实现时就无需打断软件工程师的工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;可用于执行CI/CD的服务样例包括：Atlassian Bamboo、TeamCity、Jenkins等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不过，不要将持续交付与持续部署相混淆，本文不会深入讨论这个问题，不过PuppetLabs有一篇文章是讨论持续交付与持续部署的不同点的，值得一读。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;还要注意：微服务在部署时比整体单一式的应用更安全，因此实现自动化也更容易。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤端点的智能化&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;后台运行的worker封装了与PMS集成的逻辑，如果需要变更逻辑，或者变更PMS的API，我们只需修改一个地方即可——但不是在主系统中（主系统需要与下游API的变更隔离）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，各个PMS都有自己的API，因此要将与各个API通讯的逻辑与核心系统相隔离。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤语言与数据的分散控制&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;每个微服务都有自己的技术堆栈，因此我们可以运用技术异质性。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如，需要改善特定组件的性能时，选择能够实现需要性能的技术堆栈即可。新的服务并不依赖于旧的技术定义，而且会在适合的时候使用新的语言或技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;各个worker可使用不同的技术构建：worker 1使用Java语言，MySQL数据库，负责处理顾客资料；worker 2使用C#语言，NoSQL数据库，负责处理顾客留言。要记得：它们是彼此独立的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们需要考虑集成的问题，比如在实践中如何互相集成。你是否有计划要部署RESTful API来返回JSON，或者与XML对话的SOAP API呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;现在我们来深入探讨一下中间件的问题。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;➤中间件&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中间件将系统和我们与之交互的多个资产管理系统隔离开来，由消息队列与后台worker组成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中间件不应当保存状态：各个端点的系统，比如你的系统与PMS系统负责保存酒店、顾客资料、预订信息等相关的状态，而中间件只负责创建两个系统之间的映射。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;原因在于：我们不希望引入一个保存状态新组件，从而造成一致性问题。而且同一个事务存储在三个不同的系统——即酒店资产管理系统，中间件系统和核心应用中，如果出现bug就会很难集成。在这样的情况下，哪个系统保存的是真实的预订状态呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;中间件必须为我们统一核心系统与PMS系统的内容提供方法，因此如果在核心系统中有新需求创建，但出于某些原因，比如离线、软件有bug、网络问题等，没能存入PMS，中间件就应当向用户发出警告，并提供重集成的方法。中间件必须为每条信息在队列中的位置，还有每个后台worker的状态提供清晰的可视化效果。让用户了解某条消息出错以及出错原因，并提供重试机制。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在中间件数据库的顶层要有一个缓存层，以便能更为迅速地访问常用对象，比如城市代码、信用卡类型等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;使用微服务所带来的挑战&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在构建任何软件时都会有挑战，特别是大规模的集成系统时。在《构建微服务》一书中，Newman提醒我们“在大规模实现中，出错在所难免”，在部署微服务时也是如此。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们要接受这一现实——无论硬盘、网络等等都会出错，处理多个独立服务的错误也非常困难。分布式与异步架构在部署和debug时都很难实现，我们需要查看分布在多个实例中的日志，查看分布式事务来了解为什么会出现奇怪的状态。如果在同步流程中出错，进行上一个状态的回退是很困难的。由于经常会并行工作，找到出错点也是很困难的，而且由于可能有竞争条件介入，也会难以管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;确保微服务大规模实现中的一致性是另一个挑战。想象一下，一个服务管理顾客资料，另一个管理预订服务。如果有新顾客第一次预订你的酒店，预订微服务会创建新的预订记录，而顾客资料微服务需要创建新的顾客资料。如果顾客资料出现bug，没能成功创建新的顾客资料呢？如果没能正确执行管理，最终就只剩一个不与任何顾客资料相关联的单独预订记录。在大规模的情况下，这种情况很难追踪与管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;异步分布式架构可能会导致其它问题：假设系统向事务队列发出特定类型的请求，导致worker崩溃，而且又添加了从同一个队列拉取消息的多个worker，来加快处理速度。第一个worker从队列拉取消息，然后挂掉了，请求超时锁定，原本的消息被丢回队列。然后第二个worker要从队列中拉取同一个消息，结果一样，也挂掉了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;另一个挑战在于，我们必须持续监控数百个服务的重新部署，从而导致有需求促发专门的DevOps资源或团队来管理如此数量巨大的服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;当有许多远程调用的时候，由于是通过网络连接的，还需要考虑整体的系统性能。我们都知道，网络是不可靠的，可能会导致数据包延迟或丢包等等。此外，各个系统之间的消息也并非实时传达的：向消息发布一条消息之后，隔一阵子才能得到处理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，通过微服务有效地实现版本控制也是很困难的，最终需要改变服务的接口。如何进行管理呢？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在各个架构中的处理方法都有所权衡，不但微服务中存在挑战，每种方法也存在挑战。管理多个PMS的大规模集成时，使用微服务的好处要远大于付出。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;考虑到大规模部署的经济效益：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在微服务的部署中，一些比较成本如下：&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在大规模部署中，100个不同的PMS集成可能需要100个服务器。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在单一整体式的方法中，这些服务器要持续运行。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;而在微服务中，可以按需唤醒微服务，并在不需要的时候关闭。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;使用类似AWS Lambda或者IronMQ之类的云服务时，AWS所提供的按需供应系统可以让我们按照需求来应用，从而更有效地控制自己的花费。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;长期使用的情况下，微服务更加划算，而且能够更接近实际地管理开销，减少浪费。从未有过如此节省的架构方法。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面要怎么做？&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;告别整体单一式架构&lt;/p&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;经常会有一个问题：“我的应用已经应用了整体单一式架构，是否需要从头重构，以便部署微服务架构呢？”&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;答案是：不需要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们可以一点点地改动，最终告别单一整体式架构。这应当是一个递增式的方案，我们可以从中更深入地了解核心功能，以及它与其它核心功能的互动方式。对服务应有的状态，以及与其它服务的通讯方式要建立起认知，这是很关键的。采用“边学边干”的方式，逐步定义系统的哪个部分应当使用微服务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着系统规模的扩大，微服务数量增长，这一方法会让你更灵活、更有效也成本更低地扩展系统。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; How To Build Your Property Management System Integration Using Microservices 作者： Rafael Neves，本文作者Rafael Neves是Alice公司的首席企业架构师。Alice公司是一家总部位于纽约的酒店领域技术创业公司，虽然隶属于资产管理领域，但也是微服务方面的入门优秀范例。&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;译者：&lt;/strong&gt; 孙薇&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;责编：&lt;/strong&gt; 钱曙光，关注架构和算法领域，寻求报道或者投稿请发邮件qianshg@csdn.net，另有「CSDN 高级架构师群」，内有诸多知名互联网公司的大牛架构师，欢迎架构师加微信qshuguang2008申请入群，备注姓名+公司+职位。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年9月22日-23日，SDCC 2016大数据技术&amp;amp;架构实战峰会将在杭州举行，两场峰会大牛讲师来自阿里、京东、苏宁、唯品会、美团点评、游族、饿了么、有赞、Echo等知名互联网公司，共同探讨海量数据下的应用监控系统建设、异常检测的算法和实现、大数据基础架构实践、敏捷型数据平台的构建及应用、音频分析的机器学习算法应用，以及高可用/高并发/高性能系统架构设计、电商架构、分布式架构等话题与技术。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;9月4日24点前仍处于最低六折优惠票价阶段，单场峰会（含餐）门票只需499元，5人以上团购或者购买两场峰会通票更有特惠，限时折扣，预购从速。（阅读原文获取票务详情）。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 07 Sep 2016 17:08:35 +0800</pubDate>
    </item>
    <item>
      <title>企业在数据库领域面临的五大挑战</title>
      <link>http://www.iwgc.cn/link/2580900</link>
      <description>&lt;p&gt;&lt;span&gt;大数据时代，数据已成为公司最有价值的资产之一，因此，设计、实现和维护好数据库，对公司是至关重要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据IDC数据显示，在2015年到2017年间，数据库市场已由400亿美元增长到500亿美元。然而，企业只有高效管理这些数据，才能在新的应用和云计算领域立于不败之地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;下面让我们一起来看看当今企业在数据库领域面临的五大挑战：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;配置数据资产&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;接近80%的开发者和IT专业人员认为，数据库资产配置是当前的主要瓶颈之一，开发人员需要更灵活地加快这一过程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;缺乏专业的DBAs&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据的急速增长也对DBAs产生了更多的需求，市场上普遍缺乏熟练专业的DBAs，这也就意味着因为企业缺乏人才而导致一些项目被搁置，从而没有足够的IT基础设施来推动创新。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;性能&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;影响性能的因素有很多，比如数据库配置和数据库扩张。此外，糟糕的数据库设计、编码错误和额外的数据和用户都可能影响和放缓整体的数据库性能。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库扩展&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;随着公司业务发展，IT基础设施建设也应跟上来，并提前规划好未来的增长。而不是临时或随便添加多种版本的SQL服务器，这样，数据分配在不同的数据库服务器里，着实难以维护。这种缺乏战略规划的行为也很容易造成数据库性能低下，并且带来很大的安全风险。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快速增长的数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;业务转换和数据的爆炸式增长使得企业很难高效地管理它们的数据存储和管理需求。虽然大部分企业的IT基础设施仍停留在以往建设水平，但也有许多企业正在迁移到云或者混合云上，把云作为当前数据管理的一种解决方案。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据的爆炸式增长，使得企业需要采取更具有战略性的方法来管理和维护好数据库。这对企业的快速壮大和扩张也至关重要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjXuhHf9WCBWMNzicyLwZNBVib5CHFBqtzgfgFXvxlzFaVO9qkvvNwbwdJBmgWnUH4IHdWOiczXEnqibow/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 06 Sep 2016 17:25:01 +0800</pubDate>
    </item>
    <item>
      <title>【大牛说】SDCC 2016架构实战峰会（杭州站）之大牛谈（第四季）</title>
      <link>http://www.iwgc.cn/link/2580901</link>
      <description>&lt;p&gt;&lt;span&gt;想必有很多人已然知道，2016年9月22日-23日，由CSDN重磅打造的大数据核心技术与实战峰会、互联网应用架构实战峰会将在杭州举行。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一方面你可以从官网了解到最新的信息，也可以看下这篇关于届时出场的讲师名单和详细议题：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SDCC 2016大数据&amp;amp;架构峰会（杭州站）讲师和议题最全公开&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;同时，我们也做了讲师专访，抢先查看：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;专访京东杨超：出色的架构师应具备的素质&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;专访游族姚仁捷：机器学习和异常检测相结合，提升运维能力&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了让杭州的技术圈深入了解SDCC，我们在每次文章里提到我们的理念和原则，再在这里重申下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;秉承干货实料（案例）的内容原则。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而SDCC具有深厚的历史背景：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;始建于2007年的SDCC，已经成功举办七届，历届技术讲师超过550位，参会人数超过7500人，成为技术圈口碑卓越的技术会议品牌。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在此前，我们SDCC已经进驻了上海、深圳和成都等地，广受好评，给与会者留下了深刻的印象，如果你需要看到当时的会务资料，在这里一并奉上：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;SDCC 2016系列全回顾：数据库&amp;amp;大数据&amp;amp;运维&amp;amp;架构（附50+PPT下载）&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;而我们认为：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote style="white-space: normal;"&gt;&lt;p&gt;&lt;span&gt;每一年都有诸多大大小小的技术峰会，你如何给一场会议评价是一件比较难的事情，每个人看到的都是不同的，而为了让用户有更多的甄选信息，特邀请一些演讲嘉宾、行业的参会大牛分享他们的看法，或许可以管中窥豹看到一些不同。&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;此外，这也是继《大牛说》栏目第一季、第二季和第三季结束后的第四季，以下为部分精华：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;span&gt;胡峰 京东成都研究院智能通讯部资深架构师&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8月份刚刚结束的SDCC成都站，机缘巧合受邀参加，这也是SDCC第一次在成都举办，但火爆程度超出预期。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;给我的感觉是SDCC邀请的主讲嘉宾都是真正在一线积累颇为深厚的技术精英，一路听来，干货满满，启发良多，受益颇丰。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在这里有可能会给你带来启发和指引，也有可能给你机会去和前方的同行深度交流，面对SDCC你还在犹豫什么？&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;最后，希望SDCC越办越好，成为技术人在黑暗中摸索航行的灯塔。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;胡志广 百度资深工程师&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;很荣幸作为讲师参加SDCC大会，参会的有国内各大互联网和牛人分享内容，让大家收益颇深，从架构、知识、视野都可以得到提升，并且促进国内各大城市的技术交流，希望这样的会议能更多一些能让国内互联网人都受益。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;李林锋 华为PaaS平台架构师&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8月份有幸参加了SDCC成都站峰会，结识了很多国内一线的专家和技术大牛，讲师们带来的分享都是最前沿、最实用的干货，通过跟各位专家交流，我自己也受益匪浅。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SDCC杭州站峰会聚焦在大数据核心技术以及互联网架构，邀请的都是实战经验丰富的一线技术专家，相信一定会给大家奉献一场精彩的技术盛宴。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;陶文质 腾讯互娱事业部后台高级工程师&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;如果你对架构与运维设计充满了浓厚的兴趣，如果你对技术界的各种奇思妙想充满了深切的渴望，如果你对业界大牛交流沟通的机会充满了长久的期盼，那么SDCC将是不二之选。而且在CSDN这样具有深厚底蕴和影响力平台的支持下，你将会获得在技术海洋恣意畅游的完美体验。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;魏自立 360高级工程师、资深顾问&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SDCC是CSDN重磅打造的互联网技术实战峰会，重点突出干货和成功案例的技术分享，给整个技术圈的所有同仁带来全新的技术视野和思路。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我有幸作为讲师参与了2016成都SDCC峰会，结识了一帮业内技术大牛，在聆听大牛们的技术分享中，我受益颇丰。非常感谢CSDN举办这种干货满满的技术盛宴，祝SDCC峰会越办越好，立足中国走向世界。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;高磊 华为分布式与并行实验室 架构师&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我是这样看待SDCC会议的，这是迄今为止我所参加的最好论坛之一，它以激动、详实、并以客观来愉悦着我们的思想。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;不论怎样，现在这个时代就是要求我们不断的吸纳新的思维，而这样的分享形式也正是满足了我们的需要。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;span&gt;梁阳鹤 乐视boss平台技术部资深软件开发架构师&lt;/span&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;8月有幸参加了SDCC成都站大会。会场上各位讲师都分享了各自的干货，很多知识点都能在项目中直接使用，很接地气。SDCC成都站还有现场微信群，大家可以和讲师们在微信群中讨论各种问题，结交各种大牛，感谢CSDN与SDCC为我们提供的技术交流平台。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;欧阳辰 小米研发架构师&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;SDCC大会是互联网架构师的盛会，有幸参加今年成都站的SDCC，感受到大会几个特点：干货充实厚重、实践见微知著、思考望其项背、选题海纳百川、组织井井有条。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构作为大会的主线，把很多行业发展、组织架构、技术选型、算法机器学习、大数据分析等都关联起来，给参与者一个360度的视角。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这也是一个“三人行必有我师”的大会，参会者有机会认识很多志同道合的朋友，向行业专家指教，其中不少互动环节也是非常有趣、有乐、有红包的。这是一个不虚此行的大会。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;号外，SDCC 2016架构技术峰会杭州站，8折限时优惠中，预购从速，&lt;span&gt;&lt;strong&gt;阅读原文&lt;/strong&gt;&lt;/span&gt;猛戳官网和票务。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjXuhHf9WCBWMNzicyLwZNBVib5CHFBqtzgfgFXvxlzFaVO9qkvvNwbwdJBmgWnUH4IHdWOiczXEnqibow/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 06 Sep 2016 17:25:01 +0800</pubDate>
    </item>
    <item>
      <title>聚光灯下的熊猫TV技术架构演进</title>
      <link>http://www.iwgc.cn/link/2580902</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz/ianq03UUWGmKfVhVHzJZuMhn7fo97kMcmRa28I7kmDbiaEbcDtARKbIxRUEFFA3BdqZrsPBS0ickkBOAicNVIMy2AA/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;2016 年 9 月 23-24 日，由 CSDN 和创新工场联合主办的“&lt;span&gt;MDCC 2016 移动开发者大会• 中国&lt;/span&gt;”（Mobile Developer Conference China）将在北京•国家会议中心召开，来自iOS、Android、跨平台开发、产品设计、VR开发、移动直播、人工智能、物联网、硬件开发、信息无障碍10个领域的技术专家将分享他们在各自行业的真知灼见。大会门票8折优惠中，五人以上团购更有特惠，限量供应（&lt;span&gt;票务详情链接&lt;/span&gt;，&lt;span&gt;8折优惠，欲购从速！&lt;/span&gt;）&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;作者简介：&lt;/strong&gt;沈冠璞，熊猫TV高级应用开发工程师，近7年后端开发经验，曾任职新浪微博、360等互联网公司，负责短链接、微博Card对象、网游页游平台业务。对高并发海量数据业务设计有丰富经验；经历熊猫TV从0到1 海量PV和存储的快速扩张发展场景，有大中型互联网网站高可用设计架构经验。&lt;strong&gt;在MDCC 2016上，沈冠璞将结合自身经验，解析在热门时段大主播高峰值情景下优化礼物系统技巧，带来题为《百万弹幕下的直播礼物系统》的分享。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;本文为&lt;span&gt;《程序员》&lt;/span&gt;原创文章，未经允许不得转载，更多精彩文章请订阅&lt;span&gt;2016年《程序员》&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;2015年开始的百播大战，熊猫TV是其中比较特别的一员。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;说熊猫TV是含着金钥匙出生的公子哥不为过。还未上线，就频频曝光，科技号，微博稿，站上风口浪尖。内测期间更是有不少淘宝店高价倒卖邀请码，光内测时用户注册数量就达几十万，火爆程度可见一斑。笔者作为写下熊猫TV第二行代码的Coder，见证了熊猫TV成立以来的风风雨雨。直播技术坑不少，本文简单揭秘熊猫TV这一年的技术架构演进，分析各个阶段面临的主要问题和应对方案，给大家做直播系统提供一定的参考。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;&lt;span&gt;熊猫架构 0.1－ 来不及了，老司机快上车&lt;/span&gt;&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个阶段最大的目标就是按预期时间上线。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwoVicxZ0PCe00V9DL8ysicTo1icc5ILdshJY0qWHcVpv0I2NQKnIR4KoeA4d9juB9ibper8LvjuIIe2kg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;span&gt;图1 项目规划时间表&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;组团队不表，10人左右的Web团队，从接需求，到上线，我们用了不到三个月。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个阶段面临的最大难题：两个月就内测！&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;怎么办？找老战友刷刷刷！花钱买买买！作为一群经验丰富的老司机，我们用买零件翻新车的方法。网站内测公测阶段，需要满足用户登录注册、关注主播、看视频、发弹幕、加房管、领任务、送免费竹子等核心功能，采用了复用模块＋主业务全新开发的策略。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;复用模块&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;复用模块得益于团队的前360技术背景，根据直播秀场类项目上的技术积累，利用PHP框架Pylon、发版工具Rigger，在老战友的帮助下，重新搭建了一套QBus消息组件，长连接系统，改进的Redis、MongoDB和MySQL集群，视频云服务，敏感词服务，搜索服务，这个项目才有了强大的基础支撑，才有可能在两个月时间就上线。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;视频模块——从新搭建视频云，RTMP推流拉流，接入三家CDN作为互备。这其中需要自己实现统一调用接口和服务，方便切换CDN： 推流地址、拉流地址、转码规定、开播断流回调、一键断流、连接数查询、流截图、直播时长查询。基本上每个接口都很重要！例如一键断流万一失效，则可能面临停业整顿风险；人数不准，主播挂人气刷榜，则可能导致不公平竞争而影响平台的体验与口碑。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;分布式基本组件：复用Syslog-ng日志收集系统、Kafka消息队列QBus、MySQL主从库、Redis主从库、MongoDB、SSDB大容量存储。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;长连消息：单机百万长连，支持千万用户同时在线，性能够用，保证聊天弹幕稳定性。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;图床：很重要的一环，房间截图，用户头像。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;CMS系统：配置各种推荐位，直播间的CDN调度。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;主业务开发&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;虽然是个新项目，我们并未做一个一篮子应用，把所有接口放在一个项目，而是按功能模块分好项目，每人负责一个，对主站panda.tv项目提供内网API，部署方便互不影响，开发效率也比较高。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;Flash播放器：ActionScript开发、视频播放、弹幕展现。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;主站pandaren：页面展现，各个子服务的串联整合；Daemon Worker负责截图更新。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用户体系ruc：用户注册登录、用户信息。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;房间服务vill：包括房间信息、房间列表、更新房间人气。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;关系服务uprofile：包括订阅关系、观看历史、主播申请、内测邀请码 。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数值服务count：竹子赠送、主播身高、用户经验。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消息服务homer：用于房间划分，长连Session ID和熊猫TV房间用户ID的转换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;权限系统buffon：房间管理、房管、黑名单。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;任务服务bee：新手任务、观看定时奖励。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;主播直播时长bloodstone：主播固定工资需要按每月直播时长计算。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;架构哲学和设计&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;熊猫TV架构第一原则是高可用&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;网络：需要应对国内复杂的网络环境，使用内网光纤互联的多IDC来覆盖多运营商。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;资源：DB和缓存都是集群化，配置Virtual IP方便切换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;隔离性：不同业务不同机器，防止雪崩效应；核心和非核心业务隔离，流量扛不住情况保重点业务。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;降级：从Nginx和API层设置接口开关、Cache开关、DB开关，出问题一键切换。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;超时控制：主站每个依赖业务设置5秒超时，并有报警和错误日志。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;异步：用户不关心实时结果的大写入量业务使用异步方式更新，提高核心服务性能。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;监控：服务器错误设置log监控、接口监控报警，随时处理线上异常。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;架构目标（SLA）&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;根据以往新项目经验，预估支撑1000TPS ，百万日活用户，单房间10万左右在线弹幕；平均响应时间在100ms，99.9%在1s内；千万级别数据量；99.9%的可用性（全年宕机在9小时以下）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;架构选型&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;四层负载均衡：LVS，目前基本是业界标配，如果使用云服务的话可以用厂商提供的负载均衡，如阿里云SLB和亚马逊ELB等，这种第三方依赖都需要严格引流压测确认DB层、缓存层、Web层是否&amp;nbsp;&lt;/p&gt;&lt;p&gt;有坑；&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;Web层：Nginx＋PHP-FPM，开发迅速，适合团队技术现状，但需要针对服务器，做一定的调优配置。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;缓存层：Redis主从库、SSDB大容量存储，会在各个业务块儿使用，增加系统性能。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;存储层：MySQL主从库存储重要业务数据，属性变化不大。MongoDB数据库存储字段不固定变更较多的数值明细记录。SSDB存储观看记录关注等列表较长，且性能要求较高的数据。分表分库上考虑用户注册量和主播播放频率，用户中心、主播播放时长采用了按用户ID Sharding和 按年Sharding两种策略。业务初期暂时没有分库需求。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;消息队列：实现业务解耦，使用当前较流行的Kafka队列。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;设计实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;机器配置采用6核16G的虚拟机。服务部署单独的XEN虚拟机集群，互不影响，进行多机房互备，机房间光纤专线内网互通。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwoVicxZ0PCe00V9DL8ysicTo1IrorBSFmjJibd2eshY0boXIrSFqDpB0GLSmrkLm9cnTwouEmoPvvXKQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;span&gt;图2 整体架构&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;120台虚拟机分给十多个业务，主站用了40+，三个IDC——电信联通移动同时使用，流量大的主机房在电信，其他两个机房部署Redis、MySQL从库，写都在电信。预估的注册在线人数百万级，QPS万级。接口使用PHP-FPM对外服务，单机性能平均500QPS＋，内测邀请制，内测一个月期间十几万人涌入，解决了一些小Bug，然后大家颇有信心迎接公测。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;熊猫架构1.0——一只穿云箭，千军万马来相见&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这个阶段属于填坑，最主要目标是网站稳定可用。虽然每个服务都有多机房灾备，微服务化也做了较好隔离，但0.1不到一个月便宣告夭折，我们低估了熊猫TV的明星效应，低估了黑色产业链的薅羊毛能力。公测一开始，熊猫就炸了（水友术语，指网站不可用）。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;重点问题&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ol class=" list-paddingleft-2" style="list-style-type: decimal;"&gt;&lt;li&gt;&lt;p&gt;网站首页和房间页不可用，无法进房间看视频；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;已经在直播间的用户直播卡、弹幕卡、弹幕发不出去。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;分析：网站因注册和用户信息、首页、房间页访问量过大导致FPM进程跑满，接口和模版渲染耦合，本身占的调用时长就会过多，服务间断性不可用，Redis缓存首页推荐位和用户信息只需几百MB，但连接数过多，内存占用到10G＋，导致Redis响应缓慢不可用，垃圾号疯狂注册，第一天便破百万，用户中心出现服务异常，缓存命中率低，进而雪崩。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;聊天弹幕爆发，时段非常集中，每日晚8点到凌晨2点为网站高峰时段，如图3所示。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwoVicxZ0PCe00V9DL8ysicTo1Dc9RwmRrCaroU7CYKfthTHc5rwThm0pVwvBiaWbopymj4VSXndDGXIg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;span&gt;图3 某个Redis端口QPS情况&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这些也是直播网站会一直面临的核心稳定性问题，针对这些问题，大架构框架没有变动，加班加点，两周时间就上线了新一版架构优化。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高性能&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主站重点接口Lua化：消息限制发送频率，并改造为Lua接口，十倍提速，避免占用主站PHP-FPM资源；赠送竹子也改造为Lua接口；用户中心取用户信息也改为Lua接口，直接从缓存读。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;用户ID发号器改造，不依赖MySQL自增ID，提高并发性能。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;高可用&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;首页和房间页静态化，Worker机抓取生成模版，分钟级别更新，然后rsync到各个服务器，Nginx直接读HTML文件生成首页、房间页，其他个人动态信息都走Ajax请求，保证不会出现白屏情况。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;重点Redis增加到10＋ Slave，Slave间树型同步，叶子节点从库从上级从库同步，避免一主多从传输数据延迟。从库的增加也避免主库网络负荷和连接数过多，导致响应延迟过大，服务不可用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;核心业务增加部署服务器，应对集中峰值访问。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;其他问题解决和功能完善&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;安全性上：所有80接口做XSS校验，CSRF token防范，对接口做几十道安全检测，防止被拖库，防止Cookie被盗用；反垃圾反盗号反外挂：含敏感词聊天信息过滤，垃圾IP封禁；注册和任务都增加图片验证码，识别机器刷用户刷竹子；房间人气值采用复杂策略，用算法综合判断确认合理性，防刷防挂；主播审核更加严格，身份证银行卡姓名等信息都要求录入，可以追究责任到真人，甚至有视频验证，严防色情内容。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;功能上：建立游戏娱乐户外等分类模块，运营自助增加分类；部署并自行运维第三方搜索服务，支持主播昵称、标题、房间号等维度搜索，过滤直播状态、主播地区、封禁状态等条件；礼物系统抽奖投票等系统上线，增加主播收益渠道，增加互动。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;优化效果：全年未出现过白页、首页不可访问情况，支撑千万级PV，百万级日活，单房间最高达到百万级在线，视频流量近TB级；接口平均响应时间20ms左右，99.9%在1s内；各个系统数据存储量破千万，MongoDB、SSDB等大容量库很好地支持了业务。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;熊猫架构 2.0 － 新视界，大不同&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;到2.0阶段，初期的刷脸靠战友帮搭建基础服务和买第三方服务，已不能精细化、定制化地支撑业务快速发展，而此时人员配置也开始完善，熊猫TV开始了全新的2.0自主研发阶段。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;本阶段也属于稳步发展阶段， 最主要的目标是视频流畅清晰、弹幕互动效果稳定。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;视频优化&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;接入决策上，接入更多家CDN，并对CDN稳定性做指标考核和严要求：根据卡顿率、延迟时间、首屏时间、声音视频同步率等指标，结合运营经验，创建了一套立体化多维度的CDN-SLA体系，决定给予流量多少，主播级别，主播数量。这样也增加CDN的危机感，更好服务用户。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;视频流调度互备上，如图4所示。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwoVicxZ0PCe00V9DL8ysicTo1y3jclJzVrDO3dISgmiceI4YK0QfXYqP7RnxCXTMm9dTQYyJRicicUcqBQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;span&gt;图4 视频流调度互备上&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;主播推流区分默认配置和管理员配置，推向对他而言网络状况最好的CDN，CDN自身节点实现各地的复制，CDN之间实现推流互备，一个CDN挂掉，不影响使用，用户根据PC或手机端区分，从对应配置的CDN拉流看视频，从而实现最佳观看效果，Web端用户也可切换备用线路，当默认CDN出现问题，则选择从其他家CDN进行拉流。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;这样就保证观看的流畅和视频的整体高可用。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;全新开发长连接系统riven来提供弹幕服务&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwoVicxZ0PCe00V9DL8ysicTo1UicicTaDeTa0S8NbFvPvguELeA30ptnA3GTRbNY09OUr3icUfOMSktgCA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;span&gt;图5 riven 整体流程&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;建立连接：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;通过房间ID获取网关IP；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据网关IP建立长连接；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;更新网关上房间ID和长连接的对应关系。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;下发消息：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;同步消息；&amp;nbsp;&lt;/p&gt;&lt;p&gt;生成消息机房对其他机房进行同步；&lt;/p&gt;&lt;p&gt;同步消息的机房不在进行同步行为；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;根据房间ID获取房间所在的网关地址列表；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;向网关列表下发消息投递通知；&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;网关查询本地房间对应的所有连接，并进行消息投递。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;使用Golang＋Redis全新开发，对消息级别、消息发送和消息内容做了一定优化。级别上区分多种Level消息，在高峰期、网卡被打满极端情况下，丢掉部分不重要消息；消息发送进行打包方式发送，一个房间的消息一次批量推送几十条，减少TCP交互；消息内容去掉无用字段，减少长度，例如礼物消息一条减少了168字节，假设高峰期一个房间十万人在线，一条礼物消息能节16MB，大主播房间按1000个礼物一小时算，能节省16GB流量，非常可观，所以一定要注意消息内容的压缩和缩减。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;整体架构上的改变：一年以来用户量爆炸式增长，达到日活用户近千万，PV上亿，同时直播主播近万间，流量峰值TB级别。技术人员也扩充了4倍，随着王校长驱动开发、尹素婉驱动开发（尹素婉是韩国第一女主播）、PDD驱动开发（PDD是前职业选手，著名LOL主播，弹幕量大，观众百万）等模式的驱动开发，熊猫快速步入2.0时代，技术架构也有了更稳固的改进，新的PHS（Panda High-Perfomace Service熊猫高性能服务体系）设计思路是增加架构层次，明确微服务边界，基础组件从外部依赖到内部自研，架构层次宏观层面分为端、接入层、平台服务化、中间层、基础层五个层次。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/eL7YiacLdzwoVicxZ0PCe00V9DL8ysicTo1kQKmNIYBl6CQUcUEvy0BCrJGQiavVhicGnPURfRN098Tr7jTVCtSpqQA/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;span&gt;图6 架构层次&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;端&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;包括Web页、iOS、Android、各种Pad端、网吧弹窗合作、电视盒子合作App、游戏主机合作App，从各个渠道扩展业务。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;接入层&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;从大而统一的panda.tv分流出mall.panda.tv、roll.panda.tv、pay.panda.tv、open.panda.tv等，保证各个接入业务互相隔离。接入层stars.panda.tv、pandagirls.panda.tv尝试使用NodeJS提供API，前端完全自行研发，提高效率，性能也比使用我们的Pylon-PHP框架提高了6倍左右，可以满足当前流量请求。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;平台服务化&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;架构体系没有太大的变动，主要采用Golang技术栈做了整体升级。流量突发时PHP-FPM子进程新增缓慢，多进程模型切换代价较大，不能较好服务高峰请求，缓存和DB连接池复用困难，我们重点业务从PHP迁移到Golang；部署上，依赖Nginx+LVS探活实现不停机热部署；Gobase基础库，实现了一套特定业务场景Concurrent Map库；实现了配置读取模块；对MongoDB Client进行了封装，便于CRUD方式使用和对象映射；Redis连接池和CRUD操作封装，业务不需要协议命令细节，而是正常Get(key)、Set(key)即可；数据访问层结合配置服务封装分片与路由来支撑容量水平扩展；封装Log、HTTP请求和HTTP Param解析等基础类。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;通过对Golang半年的使用，我们建立了自己的一套技术开发体系：Gvt创建项目和管理依赖，Ansible管理服务器和分发部署，Postman进行文档编排和代码测试， Teamcity实现持续集成。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;业务上，CDN调度项目TrafficCoop，高性能，灵活配置Web端和移动端CDN信息；API-Proxy项目 ，原生Golang Router，使用OAuth 2.0，提供对外网关，中转内部服务；礼物系统全面使用Golang+Redis+MongoDB保证稳定性和高峰处理。新业务原则需要快速开发，性能要求较低的业务使用PHP，性能要求高的业务用Golang、NodeJS。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;用户中心则持续演进：支持FaceBook等账号接入；电话语音验证码防外挂，异地IP重新登录机制防盗，个人身份指纹识别，做到彻底防盗号。另外为提高接口安全性，解决DNS劫持等问题对服务HTTPS化，各业务根据需要跟Ops申请HTTPS证书或SAN（多域名）证书。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;中间层改进&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;视频效果优化：接入更多CDN厂商，进行评测对比，及时反馈问题，督促其合理设置缓存值，实现视频播放流畅化。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Flash调整弹幕展现策略：实现既能有满屏感，又不会因同屏弹幕过多卡住浏览器，达到观看和互动的平衡。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;文本反作弊：机器学习训练房间弹幕内容，模型上对广告、色情、敏感词、黑白名单等进行打分评定。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;增加图片墙鉴黄服务：30秒刷新房间截图，接入多家鉴黄API，合理评分，快速发现直播内容异常。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;图床自建：图片存储从Cassandra迁移到公有云对象存储，节省运维成本，直接使用第三方CDN，加速图片访问。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;基础层&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Kafka队列自建：基础组专人开发维护，更快更好解决问题；竹子经验计数、用户关系等从SSDB迁移到Redis Cluster，保证性能无瓶颈，数据量暴增无压力。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;Spark Streaming平台搭建：弹幕内容分析与舆情，CDN质量实时监控，用户行为实时感知。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;另外一个比较大的架构变动是业务机房迁移。实现了DB迁移，公有云互备。二十多人演练数十次，按照两页的迁移清单，所有业务重新部署，DB重新导入，停机维护一整夜，所有服务从原有机房一次性成功迁移到两个公有云上。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;熊猫TV架构改进思路是应对峰值流量高度集中的直播需求，总结几条经验：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;不能依赖单个CDN。可自建，可用第三方，但中国网络环境太复杂，必须高度重视容灾。海外推拉流也需要十分关注。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;弹幕消息一定要做策略优化。广播蝴蝶效应明显，峰值可能将机房整体带宽打满。区分弹幕优先级，做好降级预案。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;提高金钱敏感度。直播网站由于有很清晰的变现模式，要严防褥羊毛，严防色情内容，火速响应监管，支付礼物交互一定是高可用、严监控。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;N个大主播 ＝ 半个网站峰值。必须考虑某些特殊主播的火爆人气，做好视频弹幕房间信息上的峰值应对。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;熊猫TV因快速上线和爆炸式增长，从严重依赖外部服务，到自主自建核心业务，弯路走了不少，也对直播技术有了更深的理解，积累了丰富的经验，技术团队也从20人左右快速扩展到百人团队，为熊猫TV在百家直播平台中挺立飞奔奠定了技术基础。未来我们会在以下方面继续努力：&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;自助式运营处理：帮助运营自助处理问题，直接和CDN对接，帮助技术人员从简单重复问题处理中脱身。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;反作弊：基于大数据处理体系的用户画像、设备画像、IP画像、内容画像，多维度构建反垃圾反盗号功能 。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;长连优化：支撑千万用户在线的高并发实时弹幕和聊天。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;礼物商城：优化计数对账，幂等处理整个支付到特效抽奖、弹幕消息、消费记录、统计等流程。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Golang、NodeJS服务化：替代性能较差需要各种优化的PHP，服务端接口全面Golang化，前端也在合适的场景使用NodeJS提高服务性能。此外需针对KV存储做value压缩，节省流量，提高接口速度。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;数据挖掘和机器学习：渠道分析、用户分析等便于产品和高层决策，甚至开发出机器人主播互动。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐：在综艺化娱乐化多元化的内容基础上，个性化推荐用户感兴趣的直播内容。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;搜索：自建搜索，从用户维度、聊天维度更好服务用户。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;日志收集分析：高性能日志方案探索，更快更迅速发现业务问题，分析流量变化。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;广告系统：友好娱乐化的广告展现，精准推送，严禁的计费系统。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支付：国际化支持，多种银行卡信用卡接入，多种货币支持。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;NewSQL：引入TiDB等新SQL技术到某些业务，替换Redis、MongoDB、MySQL，更方便友好地进行技术开发。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;直播面临的核心问题是网站稳定可用、视频流畅清晰、弹幕互动效果稳定。直播技术看似简单，一家视频云可以帮助创业公司一两个月就构建出一个直播App，但其中的运营难点、技术难点、流量带宽问题都需要谨慎处理，希望本文能帮助直播行业技术人员跳过一些坑，架构设计时作为技术参考。&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;关于移动开发新技术，更多精彩尽在MDCC 2016，详情请查看大会官网：&lt;span&gt;MDCC 2016移动开发者大会&lt;/span&gt;。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwoVicxZ0PCe00V9DL8ysicTo1NicSwUnLPoiake54eCFLJmFEznRTicxXCszjLG6hnQNuNqyqic4RqSia33w/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;strong&gt;&lt;span&gt;点击下方&lt;/span&gt;&lt;span&gt;“&lt;span&gt;阅读原文&lt;/span&gt;”&lt;/span&gt;&lt;span&gt;火速报名MDCC！&lt;/span&gt;&lt;/strong&gt;&lt;/section&gt;&lt;section&gt;↓↓↓&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Tue, 06 Sep 2016 17:25:01 +0800</pubDate>
    </item>
    <item>
      <title>浏览器存储及使用</title>
      <link>http://www.iwgc.cn/link/2531840</link>
      <description>&lt;p&gt;&lt;span&gt;伴随着WEB的发展，浏览器的存储方式及技术不断的发生更改，从刚开始的Cookie，到localStorage，sessionStorage，再到IndexedDB，再到现在的Web SQL，作为一名合格的前端开发，当然需要对这些技术了如指掌并熟练掌握，本文将比较全面的介绍常见的浏览器存储以及其使用。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia03icwYIJazLYF0uGs5vPcsqrj7ia5m00FiaXJshkecaPqeGGJzytz0dO8CXl6utlia0B5FEecRQwSsQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section style="
text-align: left;
overflow: hidden;"&gt;&lt;section&gt;&lt;p&gt;1&lt;/p&gt;&lt;/section&gt;&lt;section style="
vertical-align: top;
padding-bottom: 500px;
margin-bottom: -500px;
width: 84%;
box-sizing: border-box;
background-color: #dedede;
display: inline-block;"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;Cookie&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cookie是一个用户通过浏览器浏览网站产出的信息的票根，Cookies通常被用来标示一个网站用户的浏览经历，它可能包含这个用户的个人偏好或访问这个网站的一些输入信息。用户可以自己随意操作他们浏览器中的Cookie。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cookies可以通过服务端使用Set-Cookie Http header来设置和修改，当然也可以使用javascript的document.cookie去操作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;浏览器兼容性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia03icwYIJazLYF0uGs5vPcs9wDhGRV7jocgiaQ8iaOSLo0Bglu6ceeHiblEbny5PlRlfBocicR8lKk5aA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细请参考：&lt;span&gt;http://caniuse.com/#search=cookie&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;在浏览器中操作如下：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;//读取网站下所有的cookie信息，获取的结果是一个以分号;作为分割的一个字符串&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var allCookies = document.cookie;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//例如：在百度首页，获取的如下&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;// "BAIDUID=B32F2BF6BCB66D5559E199F5B1908F4C:FG=1; PSTM=1444711125; BIDUPSID=9DE77BD4B191F421CA54DB11C954067A; ispeed_lsm=0; MCITY=-289%3A; BDSFRCVID=hWtsJeC62Ag8XZc4Nvqo2MixJD2vkWoTH6aoB7vKuwGS_LREoJS6EG0PtvlQpYD-KiV2ogKK0eOTHvvP; H_BDCLCKID_SF=JbADoDD-JCvbfP0kKtr_MJQH-UnLq-vUbT7Z0l8KtqjJbMnL-TOF5R_eD4c0hUTRtjcW-b7mWIQHDp_65xRh5U-9BPvN04RZLbc4KKJxbPQSVtJXQKcvMq5XhUJiB5O-Ban7LtQxfJOKHICRe5-ajxK; BD_CK_SAM=1; locale=zh; BD_HOME=0; H_PS_PSSID=1455_18241_18559_17000_15227_11651; BD_UPN=123253"&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//往原来的已经存在的cookie中加入新的cookie&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;document.cookie ="test=yui";&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//当然也可以在后面加上可选择的选项键值对，例如domain，以及其他path，expires&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;document.cookie="test=yui;domain=.baidu.com"&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//删除cookie，就是让这个cookie值得expires过，就是设置这个expires为0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;document.cookie="test=yui;domain=.baidu.com;expires=0");&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;需要注意的地方：&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1) 通过上面的代码，可以看到document.cookie是个可访问的属性，但是它有内置的setter和getter的function，而不是一个简单的字符串数据，你的get和set都会调用这些原生内置的函数；&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2) Cookie支持跨域，可以通过在根域名设置cookie，共享多个子域名的数据。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;Cookie的Chrome浏览器实现&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Cookie解析：&lt;span&gt;https://code.google.com/p/chromium/codesearch#chromium/src/net/cookies/parsed_cookie.h&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section style="
text-align: left;
overflow: hidden;"&gt;&lt;section&gt;&lt;p&gt;2&lt;/p&gt;&lt;/section&gt;&lt;section style="
vertical-align: top;
padding-bottom: 500px;
margin-bottom: -500px;
width: 84%;
box-sizing: border-box;
background-color: #dedede;
display: inline-block;"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;Web Storage&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Web Storage有两种机制，分别为sessionStorage和localStorage。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;sessionStorage用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此sessionStorage是一种半持久化的本地存储（会话级别的存储），而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这两个对象，对外的方法主要有：setItem、getItem，以键值对的形式存储和读取，key按照索引获取当前存储的key值，找不到时返回null，length属性代表当前存储的key value对数。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;浏览器兼容性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia03icwYIJazLYF0uGs5vPcsfhAicBQ7ZRYMZg5E5cJbVC5AH5tEPib4W0GgeLeO3oWLn7c3k0liaia7kQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细请参考：&lt;span&gt;http://caniuse.com/#search=localstorage&lt;/span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;代码示例（&lt;span&gt;以localStorage为例&lt;/span&gt;）&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;var username = 'helloworld';&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var storageUsername;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var randomArr = [Math.random()，Math.random()，Math.random()，Math.random()];&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var storageRandomArr;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//storage username，key值区分大小写，存入的内容为这个变量调用toString方法的结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage.setItem("username"，username);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//获取&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;storageUserName &amp;nbsp;= localstorage.getItem("username");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//"helloworld"&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//删除&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage.removeItem("username");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;storageUserName &amp;nbsp;= &amp;nbsp;localstorage.getItem("username");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;// null&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//存储对象时，可以先调用JSON.stringify方法，然后取出的时候再调用JSON.parse方法获取结果&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;localStorage.setItem("randomarr"，JSON.stringify(randomArrr));&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;storageRandomArr = JSON.parse(localStorage.getItem("randomarr"));&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Object.prototype.toString.call(storageRandomArr);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;// "object Array"&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section style="
text-align: left;
overflow: hidden;"&gt;&lt;section&gt;&lt;p&gt;3&lt;/p&gt;&lt;/section&gt;&lt;section style="
vertical-align: top;
padding-bottom: 500px;
margin-bottom: -500px;
width: 84%;
box-sizing: border-box;
background-color: #dedede;
display: inline-block;"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;IndexDB&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;IndexedDB是一个为了能够在客户端存储可观数量的结构化数据，并且在这些数据上使用索引进行高性能检索的API。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;IndexedDB分别为同步和异步访问提供了单独的API，异步API方法调用完后会立即返回，而不会阻塞调用线程。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;要异步访问数据库，要调用Window对象IndexedDB属性的open()方法。该方法返回一个IDBRequest对象(IDBOpenDBRequest)；异步操作通过在IDBRequest对象上触发事件来和调用程序进行通信。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;IndexDb是NoSQL数据库，是一种支持事务的浏览器数据库，基本操作就是，打开数据库，增删改查各种。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;浏览器兼容性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia03icwYIJazLYF0uGs5vPcsvUJfEKLzFAOmm3rGuAw1wibJQteEx4JSOm38d38JLnwxClkN39iaDVrg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详细请参考：&lt;span&gt;http://caniuse.com/#search=IndexDB&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;代码示例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;1) 打开数据库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;//处理浏览器兼容性&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//如果该数据库MyDatabase不存在，则会被创建；如果已经存在，则被打开。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var request = window.indexedDB.open("MyDatabase");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//打开数据库失败的回调&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onerror = function(event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; console.log("failure");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//代开数据成功的回调&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onsuccess = function(event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; console.log("success");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2) 初始化数据库&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;var dbName = "MyDatabase";&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var dbVersion = 2;//整数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;// open函数接受的第二个参数，代表数据的版本，当打开的版本号比当前的版本号大时，会触发onupgradeneeded这个回调&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var request = window.indexedDB.open(dbName，dbVersion);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var studentsData = [{&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; id:"001"，name:"xiaoming"，email:0&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;}，{&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; id:"002"，name:"xiaoxiang"，email:1&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;}];&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var tableName = 'students';&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onerror = function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; //错误处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onupgradeneeded = function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var db = event.target.result;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; //创建表，以id字段作为主键来确保唯一，使用keyPath表示&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var objectStore = db.createObjectStore(tableName， { keyPath: "id" });&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; //给表添加索引&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; objectStore.createIndex("name"，"name"，{unique:false});//非unique索引&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; objectStore.createIndex("email"，"email"，{unique:true});//email字段作为unique索引&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; for(var i in studentsData){&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //插入数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; objectStore.add(studentsData[i]);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; console.log("---init db success---");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;}&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;3) 使用事务添加、删除数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;transaction()方法接受两个参数并返回一个事务对象。第一个参数是事务希望跨越的对象存储空间的列表，即数据库中的表名称。如果你希望事务能够跨越所有的对象存储空间你可以传入一个空数组。第二个参数如果你没有为第二个参数指定任何内容，默认只读。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia03icwYIJazLYF0uGs5vPcsB6xPTUvRTb1oqaiaOIvTUUE7tKJtXvojRHsw51seYjMDtC2glBonZOA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;插入学生003，004，005&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;var dbName = "MyDatabase";&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var request = window.indexedDB.open(dbName);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var addData = [{&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; id:"003"，name:"xiaofang1"，email:"3@qq.com"&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;}，{&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; id:"004"，name:"xiaofang2"，email:"4@qq.com"&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;}，{&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; id:"005"，name:"xiaofang3"，email:"5@qq.com"&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;}];&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var tableName = 'students';&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//打开数据库失败的回调&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onerror = function(event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; console.log("open indexDb database failure");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//代开数据成功的回调&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onsuccess = function(event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var db = event.target.result;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var transaction = db.transaction([tableName]，'readwrite');&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var objectStore;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var i;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; //事务主要有三个回调，error，abort，success&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; transaction.onerror = function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //处理错误&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log(event);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; transaction.onbort = function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //事务中断处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; transaction.oncomplete = function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("添加数据成功");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; objectStore &amp;nbsp;= transaction.objectStore(tableName);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; for(i &amp;nbsp;in addData){&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; var request = objectStore.add(addData[i]);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; request.onsuccess = function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("add one success");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;删除001学生&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;var dbName = "MyDatabase";&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var request = window.indexedDB.open(dbName);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var db;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var tableName = 'students';&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onerror = function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onsuccess &amp;nbsp;= function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var objectStore;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var transaction;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; db = &amp;nbsp;event.target.result;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; transaction= db.transaction([tableName]，'readwrite');&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; transaction.onerror = function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //处理错误&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("error when delete 001 "+ event.target.errorCode);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; transaction.onbort = function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; //事务中断处理&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; transaction.oncomplete = function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("删除学生001成功");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; objectStore = transaction.objectStore(tableName);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; objectStore.delete("001");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;4) 使用索引查找数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;主要调用IDBObjectStore示例对象的index方法：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;var dbName = "MyDatabase";&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var request = window.indexedDB.open(dbName);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var db;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var tableName = 'students';&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onerror = function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;request.onsuccess &amp;nbsp;= function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var index;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; var objectStore;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; db = &amp;nbsp;event.target.result;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; objectStore = db.transaction([tableName]).objectStore(tableName);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; //根据索引字段email朝找3@qq.com的学生&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; index = objectStore.index("email").get("3@qq.com");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; index.onsuccess = function(event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log(event.target.result);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; };&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; index.onerror = function (event) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("error when find &amp;nbsp;by index "+ event.target.errorCode);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;indexDb还有游标查找功能，限于篇幅，就不展开介绍了。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section style="
text-align: left;
overflow: hidden;"&gt;&lt;section&gt;&lt;p&gt;4&lt;/p&gt;&lt;/section&gt;&lt;section style="
vertical-align: top;
padding-bottom: 500px;
margin-bottom: -500px;
width: 84%;
box-sizing: border-box;
background-color: #dedede;
display: inline-block;"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;WebSql&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Web SQL Database API实际上未包含在HTML 5规范之中，它是一个独立的规范，它引入了一套使用SQL操作客户端数据库的API，这些API有同步的，也有异步的，一般情况下，都会使用异步API。它的核心方法有三个：openDatabase，transaction和executeSql。这些API已经被广泛的实现在了不同的浏览器里，尤其是手机端浏览器。虽然W3C官方在2011年11月声明已经不再维护Web SQL Database规范，但由于其广泛的实现程度，了解这些API对Web开发还是非常有必要的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;浏览器兼容性&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuia03icwYIJazLYF0uGs5vPcscz5ymq3AY17tibvg7pM2oWhzpn8c0vsuOdUic5w3gY6HuuycGag2FibdQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;详情请参考：&lt;span&gt;http://caniuse.com/#search=WebSql&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;代码示例&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;span&gt;var db;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;var info = {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; dbName :"MyDataBase"，//数据库名称&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; dbVersion:"0.1"，//版本&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; dbDisplayName:"测试数据库"，//显示名称&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; dbEstimatedSize:10*1024*1024 //数据库大小，单位字节&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;};&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;db = window.openDatabase(info.dbName，info.dbVersion，info.dbDisplayName，info.dbEstimatedSize);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//初始化students表&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;db.transaction(function (trans) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; //执行Sql，如果students表不存在，则创建改表&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; trans.executeSql("create table if not exists students(id unique，name text null，email text null)"，[]， function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("init success");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }， function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("error happen");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;});&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//插入数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;db.transaction(function (trans) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; trans.executeSql("insert into students(name，email) values(?，?)"，['xiaoming'，'1@qq.com']， function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("insert ok 1");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }， function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log(arguments);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; trans.executeSql("insert into students(name，email) values(?，?)"，['xiaohong'，'2@qq.com']，function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("insert ok 2");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }， function () {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log(arguments);&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;});&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//删除数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;db.transaction(function (trans) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;trans.executeSql("delete from students where name = ? "，['xiaohong']， function (trans，result) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;console.log("delete success");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;}， function (trans，message) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;console.log("error happen");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp;});&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;});&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;//查询数据&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;db.transaction(function (trans) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; trans.executeSql("select * from students"，[]， function (trans，result) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("总共查询到 "+result.rows.length+" 条数据");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; }， function (trans，message) {&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; console.log("error happen");&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp; &amp;nbsp; });&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;});&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section style="
text-align: left;
overflow: hidden;"&gt;&lt;section&gt;&lt;p&gt;5&lt;/p&gt;&lt;/section&gt;&lt;section style="
vertical-align: top;
padding-bottom: 500px;
margin-bottom: -500px;
width: 84%;
box-sizing: border-box;
background-color: #dedede;
display: inline-block;"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;其他&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;Application Cache&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Application Cache翻译成中文为应用程序缓存，是html5中为实现离线浏览所提供的API。结合Manifest文件使用，使用编程方式，更新浏览器缓存内容。主要调用update与swapCache去更新浏览缓存，目前该技术已经被最新的规范所废弃，转而使用了Service Workers。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;Service Workers&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;一个service worker是一段运行在浏览器后台进程里的脚本，它独立于当前页面，提供了一些不需要与web页面交互的功能，即那种在网页背后悄悄执行的能力。在将来，基于它可以实现消息推送，静默更新等服务，但是目前它首先要具备的功能是拦截和处理网络请求，包括可编程的响应缓存管理。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section style="
text-align: left;
overflow: hidden;"&gt;&lt;section&gt;&lt;p&gt;6&lt;/p&gt;&lt;/section&gt;&lt;section style="
vertical-align: top;
padding-bottom: 500px;
margin-bottom: -500px;
width: 84%;
box-sizing: border-box;
background-color: #dedede;
display: inline-block;"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;/section&gt;&lt;section&gt;&lt;p&gt;小结&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;目前Cookie的兼容性最好，使用的最广泛，但有被滥用的趋势。Web Storage兼容比较好，除了老板的IE 6，7不支持外，其他主流浏览器都已经支持了，使用起来也方便简单，适合存储键值对数据。WebSql由于未在HTML5规范中，前景堪忧，适当了解下。IndexDb目前来看，兼容性不太好，但是前景很好，目前由w3c在推广，相信在以后应该有个大爆发(个人看法)。&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;Application Cache目前已经被废弃，Service Workers目前属于起步阶段，感觉离实用还需要时间。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;&lt;span&gt;➤&lt;/span&gt;参考链接&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;caniuse：http://caniuse.com/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Cookie：https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;谷歌开发者中心文档：https://developer.chrome.com/devtools/docs/resource-panel#inspecting-page-resources&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Mozilia 开发者中心：https://developer.mozilla.org/en-US/docs/Web&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;ServiceWorkers：http://www.html5rocks.com/en/tutorials/service-worker/introduction/&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section label="Copyright © 2015 playhudong All Rights Reserved." style="
margin:1em auto;
border-style: none;" donone="shifuMouseDownCard(&amp;#39;shifu_c_005&amp;#39;)"&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;&lt;strong&gt;声明：&lt;/strong&gt;本文为CSDN原创投稿文章，未经许可，禁止任何形式的转载。&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;作者：&lt;/strong&gt;叶文兵，MaxLeap UX组开发人员，负责公司主要项目前端开发工作，逐渐往Node.js全栈方向发展。本科毕业于安徽师范大学，入坑前端开发近3年。&amp;nbsp;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;责编：&lt;/strong&gt;钱曙光，关注架构和算法领域，寻求报道或者投稿请发邮件qianshg@csdn.net，另有「CSDN 高级架构师群」，内有诸多知名互联网公司的大牛架构师，欢迎架构师加微信qshuguang2008申请入群，备注姓名+公司+职位。&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2016年9月22日-23日，SDCC 2016大数据技术&amp;amp;架构实战峰会将在杭州举行，两场峰会大牛讲师来自阿里、京东、苏宁、唯品会、美团点评、游族、饿了么、有赞、Echo等知名互联网公司，共同探讨海量数据下的应用监控系统建设、异常检测的算法和实现、大数据基础架构实践、敏捷型数据平台的构建及应用、音频分析的机器学习算法应用，以及高可用/高并发/高性能系统架构设计、电商架构、分布式架构等话题与技术。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;9月4日24点前仍处于最低六折优惠票价阶段，单场峰会（含餐）门票只需499元，5人以上团购或者购买两场峰会通票更有特惠，限时折扣，预购从速。（票务详情http://bss.csdn.net/m/topic/sdcc_invite/hangzhou#goupiaoxinxi）。&lt;/span&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 02 Sep 2016 17:34:37 +0800</pubDate>
    </item>
    <item>
      <title>Github上最具影响力的组织机构排行</title>
      <link>http://www.iwgc.cn/link/2531841</link>
      <description>&lt;p&gt;&lt;span&gt;哪些组织机构是Github最具有影响力的，本文使用gh-impact工具评估得出了如下TOP 10名单前三名分别是：Google、Facebook、Apache。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Google 得分：185&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Facebook 得分：147&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Apache 得分：130&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Microsoft 得分：104&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Mozilla 得分：95&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Codrops 得分：92&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Twitter 得分：88&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Square 得分：79&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Google Samples 得分：73&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;Netflix 得分：72&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;gh-impact是一款专门衡量影响力的工具，每个账号都会有一个gh-impact分数N，分数越高，说明该组织里面受欢迎的开源项目越多。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;更多详情，大家可以点击查看原文。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;原文：The Most Influential Organizations on GitHub&amp;nbsp;&lt;/p&gt;&lt;p&gt;作者： Ian Dennis Miller 翻译：王嘉怡 责编：仲培艺&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;</description>
      <pubDate>Fri, 02 Sep 2016 17:34:37 +0800</pubDate>
    </item>
    <item>
      <title>提高排序效果，Twitter搜索相关架构解析</title>
      <link>http://www.iwgc.cn/link/2531839</link>
      <description>&lt;p&gt;&lt;span&gt;每天，全世界几百万的用户都在Twitter上搜索着发生的新鲜事。在重大事件期间，比如刚刚过去不久的2016欧洲杯，我们观察到在用户前来Twitter查看最新战况时，搜索服务会出现流量的尖峰，并且整体流量随着此事件的推移而稳步上升。Twitter的搜索质量组就是负责给用户返回质量最好的结果。&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;相比于传统的信息检索产品，Twitter的搜索面临的挑战是绝无仅有的，原因如下：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="width: 528.188px; white-space: normal;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时效性：我们大部分的搜索请求都对信息的话题性和实时性有着强烈的需求。世界局势瞬息万变，在某些情况下，甚至几分钟前的搜索结果就会显得过时和不相关。推荐的搜索词条，拼写纠正和相关搜索词等，都需要保证新鲜和及时。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;文档集合庞大：搜索的候选文档集合非常巨大，每天有几十亿条各种语言的新的Twitter生成。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;文档格式：Twitter的文档有其特殊的属性：140个字符的非结构文本文字，但是包含了丰富的实体类别，有“#”符合、“@”符合、图像、视频和站外链接。不同于网站页面，Twitter之间没有超链接，因此类似PageRank的基于链接的算法不能直接拿来用于Twitter的排序。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;多种结果类型：搜索的结果页是多种搜索结果的聚合，包括Twitter、其它用户账号、图像、视频、新闻、相关搜索和拼写候选词等。各种类型的结果需要一起参与排序，使得最后聚合的结果页满足用户的搜索意图。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;个性化：每一位搜索用户都有自己的社交网络、兴趣爱好、地理位置和语言偏好，因此搜索结果需要个性化定制以满足相关性。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;为了在很短的延迟内返回相关的、高质量的搜索结果，我们需要在多个领域解决技术挑战：信息检索、自然语言处理、机器学习、分布式系统、数据科学等等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;在过去几个月中，我们投入了大量精力在搜索相关性的基础框架建设，目的是提高排序效果和实验的效率。这篇博文介绍了一些重点工作。注意，这与我们的召回Twitter的核心索引和检索平台（没有排序）有所区别。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;实时信号消化&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们排序模型中用到的信号的变化性和时效性对最终的搜索结果质量有着巨大的影响。而且，当Twitter被建索引之后许多信号都会迅速改变，因此我们需要及时更新它们。我们基于Heron写了一套新的信号消化器来处理原始信号流，为我们产品的排序模块提供特征。我们添加了灵活的模式动态地对新特征编码和解码，而尽可能少的修改代码。随着Twitter应用的升级，我们可以快速地添加和测试在离线实验中表现出色的新的排序信号。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;快速、轻量级实验&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;我们实现从想法-&amp;gt;验证-&amp;gt;迭代这个周期的速度越快、代价越小，我们可以验证的想法就越多，产生的创新也越多。我们重度依赖传统的A/B测试，同时也建立了一个互补的离线实验系统，使得测试效率更高。Twitter的搜索结果和搜索词变化迅速。因此，为了将信号从噪音中分割开来，我们冻结特定的时间节点的世界状态，构建了一个沙盒环境，以至于我们可以根据想要完成的测试来产生稳定的、可重复的结果。为了更好的理解，我们开发了工具来分析和显示的结果之间的差异，并且可以从内部评委处容易地获得他们根据我们的搜索质量判断准则给出的打分标签。一个特别好的优势是，这使我们能够验证庞大的指数级变化，如给检索增加新的索引字段和标识的更新等等，还可以在部署产品之前对结果精细地打磨。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;训练和部署机器学习模型&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器学习的模型常用于搜索排名，因为他们提供了一个原则性和自动化的方式来优化特征的权重和整合新的排序特征。为了使它们效果最好，重要的是要正确识别需优化的目标函数，使其与用户最终的满意度相关联。我们建立了一个管道，它可以无缝地收集训练数据集用于模型的训练和验证，并将训练完成的模型部署到生产服务器。数据规模带来了额外的挑战，如搜索排名第一阶段发生在索引碎片，大量与查询词匹配的文档在CPU资源、内存和延迟约束很严格的情况下进行打分。我们与Twitter Cortex团队创建了一个轻量级的运行系统，它可以支持在这些约束条件下运行模型，并且用我们内部的机器学习平台工具训练得到的排序模型部署到线上使用，如whetlab。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;这些都是支持我们测试的关键模块，并且能够提升搜索的相关性，使搜索更好地为我们的用户服务。在未来的文章中，我们将深入介绍近期正在进行的搜索质量和项目的具体方面。敬请关注！&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;感谢&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;搜索质量组的成员有Tian Wang, Juan Caicedo, Zhezhe Chen, jinliang Fan, Lisa Huang, Gianna Badiali, Yan Xia和Yatharth Saraf。我们还要感谢搜索架构组、Heron和Cortex团队在各阶段给予的大力帮助。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section&gt;&lt;section&gt;&lt;section&gt;&lt;/section&gt;&lt;p&gt;原文：Search Relevance Infrastructure at Twitter&amp;nbsp;&lt;/p&gt;&lt;p&gt;翻译：KK4SBB&amp;nbsp;&lt;/p&gt;&lt;p&gt;责编：周建丁&lt;/p&gt;&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/wvkocF2MXjWnEe8FClMamNeeMX0lSAQQHibsEwMstl2tvuyx8OS1icJbp7Zct4W6h2SRm9WOWcqAtx767FYNx1aA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 02 Sep 2016 17:34:37 +0800</pubDate>
    </item>
    <item>
      <title>【SDCC专访】京东杨超：出色的架构师应具备的素质</title>
      <link>http://www.iwgc.cn/link/2517698</link>
      <description>&lt;p&gt;&lt;span&gt;2016年9月22日-23日，由CSDN重磅打造的SDCC 2016大数据技术&amp;amp;架构实战峰会（杭州站）将在杭州举行。大会前夕，京东商城架构师杨超接受了CSDN专访，谈及了对架构的理解、京东现有的电商特点，以及如何支撑高流量和高并发之道。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpxTKicdr5eMP7zvkbtWCXK2g10jiaOibPTicL4lekWyg895WAgkzyfqLhbzpGpYGezKNvLTgZdywDlQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/span&gt;&lt;span&gt;京东商城架构师杨超&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section label="Copyright © 2016 playhudong All Rights Reserved." style="
width:100%;
margin-top:1em;" donone="shifuMouseDownPayStyle(&amp;#39;shifu_t_048&amp;#39;)"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p style="
display: inline-block;
margin-left: 5px;
"&gt;嘉宾介绍&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;2011年10月加入京东。先后负责和参与京东的IM项目、交易系统 .NET 转 Java、购物车、库存、多中心交易等核心系统的研发和架构升级工作。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section label="Copyright © 2016 playhudong All Rights Reserved." style="
width:100%;
margin-top:1em;" donone="shifuMouseDownPayStyle(&amp;#39;shifu_t_048&amp;#39;)"&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;section&gt;&lt;/section&gt;&lt;p style="
display: inline-block;
margin-left: 5px;
"&gt;专访正文&lt;/p&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：请先和大家介绍下您和目前所从事的工作，以及关注哪些技术领域？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;大家好我是杨超，目前主要在做京东交易平台的研发和架构工作，主要关注的技术领域，高可用、高并发、分布式，以及一些基础技术、新语言、存储、容器、系统等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：作为一名架构师，能否谈下您对架构的理解？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;个人觉得架构可理解为总结归纳。让我们的系统更简洁、更适应需要承载的流量和业务需要，最终为用户服务。架构本质是研发和需求的提纯，而研发基础是建立在需求，需求本质是为了服务于用户/更好的服务于用户。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构于不同系统，不同公司文化，不同公司层次（初建期，发展期，成熟期），都有着不同的定义和理解。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;公司初建期：用户服务基础。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;公司发展期：用户服务基础，满足高速扩充的业务需求，提纯基础结构。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;公司成熟期：用户服务基础，满足业务需求，提纯基础结构，技术驱动衍生新生态系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;架构又可分：基础架构、系统架构、业务架构、代码架构。优秀的架构特点，简单，易懂，多变，相对灵活（根据系统迭代期、研发理解能力、团队大小取决）。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：您认为具备哪些素质才能成为是出色的架构师？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;个人认为，一个出色的架构师，至少有一门用很深的编程语言作为常委语言，一个出色架构师需要突出代码读写能力作为基础。读代码能力尤为重要，要能结合代码读出业务逻辑，以及里面优秀架构思路，不足之处，读代码同时学习。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;学习能力，思维方式：学习技术、框架，不光会用、知其原理、并能举一反三的思维。结合已学到的知识组合创新思维，将繁杂的事，简单化处理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;忍耐能力：作为一个团队技术头头，一般都会有一些孤独感。可能这就是大家常说的技术范。再就是对于系统改造循序渐近的，得忍受那种全部都重做的冲动，一点一点的进行处理。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重生能力：作为架构师，熟悉自己所在团队和系统是必然的。抽时间让自己跳出原有既定思维和惯性，重新认识自己团队和系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;沟通能力：需要跟与人打交道，当然需要良好沟通能力了。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：有别于社交网络、搜索和游戏等网站，电商网站的用户流量有哪些特点？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;个人觉得电商网站流量特点，突发性流量暴增，根本无法精确的预估的量。可能刚开始几万的量，突然几分钟就上到几十、几百、上千万、十倍百倍千倍的往上增。相比社交、搜索、游戏网站，差异最大点，就在直接牵涉精确的金额的问题。所以对于精准和延时，缓存有一些差异化的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;社交网络：一般延时可做大点，及时性通讯可以端对端。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;搜索：一般多级缓存，大多计算好往前推，延时也可做大点，另外搜索本就模糊的匹配，精准性方面要求没那么严格。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;游戏网站：大多客户端大型游戏，客户端数据缓存几秒之后再进行传输，或者一些直接本地存数据，后端根服务器交互。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;根据上面的比对，还是有比较真实感知到是有差异的。差异点主要集中在于 money 交易这一点上。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：据了解，京东的业务种类繁多，涉及上亿种SKU，内部系统极其庞大复杂，能否详细谈下京东的系统有着怎样的特点？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;个人感觉京东系统复杂度相比业务还是好很多的，（下图服务概况）内部系统也没有想象的那么极其庞大，相对于其他电商确实会多一些系统，因为京东集自营、平台于一体。如果按照淘宝系统、天猫系统加起来总和，个人感觉应该京东的系统还是会少一些。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpxTKicdr5eMP7zvkbtWCXKdbib1PqW1rU35fV3jURW5AJewlJbVnDapW74ibYrsO8tgvSSoic3C7wcA/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;京东系统特点：深度服务化，另外就是业务逻辑复杂，还有一个特点就是水平扩容的能力很强。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：高流量、高并发情况下，如何保证整个系统的可靠性和稳定性，是众多电商企业研发团队都在思考的问题。京东遇到了哪些问题？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;在京东遇到问题太多了，高流量、高并发是交易所有系统都面临这样一个问题，记忆深刻的用户刷爆品商品的问题，还有利用软件来刷的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: disc;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;入口层：过滤掉大部分软件刷的情况，衍生了风控系统，秒杀系统。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;应用层: 读写分离、缓存、队列、令牌、系统拆分、隔离、系统升级（可水平扩容方向）。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;其他：&amp;nbsp;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;时间换空间：降低单次请求时间，这样在单位时间内系统并发就会提升。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;空间换时间：拉长整体处理业务时间，换取后台系统容量空间。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpxTKicdr5eMP7zvkbtWCXKvcIrnHtzX0VAib91ZzVzeqdoLUBenWdINB9y5xQ8yK9upQlgo5sjAYw/0?wx_fmt=png"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;图：时间-空间&lt;/span&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;ul class=" list-paddingleft-2" style="list-style-type: circle;"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;可靠性和稳定性：会做一堆的容灾方案，从机房、网络、应用、存储、渠道、业务等多维度容灾。做一堆的降级策略，从流量、应用、渠道、业务 等对多维度做。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&lt;br/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：其中，作为电商的核心系统之一，能否简单介绍下京东核心的交易系统的架构演进?&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;系统的架构演进，个人实际感受就是那种用户倒逼的感觉。2011到现在每年大型促销、流量、订单量不断翻倍。推动你去做异构、拆分系统、异步、服务化、容灾、降级等等，一堆堆的优化。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：您如今是如何安排自己的新技术学习、研发团队管理、编程、生活等时间的？有什么心得和体会可分享？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;目前个人在新技术学习上，关注一些前沿热门的技术，更多关注新的编程语言，比如GO、Python。关于一些技术框架，实际上最终实现都大同小异，会去了解实现原理，以及做的好的地方，比如Elasticsearch底层用的Lucene。而Lucene之前用过还专门看过源码，基本都是通的。加入了分布式存储的副本概念，以及sharding子机器并行执行理念，收集结果返回。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;管理、编程、生活方面基本关注需求设计，出现问题点，再就看代码。编程方面，写代码不再像以前那么多，更多在阅读代码。在需求设计，阅读代码，感知整体情况。通过解决问题点去衍生新的东西，生活中会经常浏览一些技术创新东西，在一些技术分享组织认识一些各个方向的专家，聊聊天，了解行业的整体趋势，走向。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;CSDN：在本次SDCC 2016（杭州）架构峰会上，您分享的话题是？&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;杨超：&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;我这次分享的主题是《京东交易架构演进-高可用服务的保障》，主要是京东商城交易平台的架构，大促中的技术演进之路。分布式结构思路；合适时机进行拆分；高并发、高可用、如何诞生的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;section label="Copyright © 2015 playhudong All Rights Reserved." style="
margin:1em 4px 1em 7px;
border-style: none;" donone="shifuMouseDownCard(&amp;#39;shifu_c_003&amp;#39;)"&gt;&lt;span style="
float: left;
margin-left: -7px;
margin-top: 15px;
display: block;"&gt;&lt;section&gt;&amp;nbsp;温馨提示&amp;nbsp;&lt;/section&gt;&lt;img src="http://img02.iwgc.cn/getimg.php?url="/&gt;&lt;/span&gt;&lt;section style="
padding: 16px;
-webkit-box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.5);
-moz-box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.5);
-o-box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.5);
box-shadow: 0px 0px 4px rgba(0, 0, 0, 0.5);
width: 100%;
font-size: 14px;
line-height: 1.4;"&gt;SDCC 2016（杭州）架构峰会火热抢票中，在9月4日24点前购票并完成付款将享受六折特惠，5人以上团购更享有折上折，欲购从速。更多详细内容，请持续关注SDCC大会官网。&lt;/section&gt;&lt;/section&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 01 Sep 2016 18:01:15 +0800</pubDate>
    </item>
  </channel>
</rss>
