<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>36大数据</title>
    <link>http://www.iwgc.cn/list/1149</link>
    <description>关注大数据和互联网趋势,最大,最权威,最干货的大数据微信号(dashuju36).大数据第一科技媒体.不发软文,只做知识分享.</description>
    <item>
      <title>数据结构常见的八大排序算法</title>
      <link>http://www.iwgc.cn/link/2804445</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEibdJVVib3nvKgNeico5uPcX26w5cWd94h5SW3zmicSFz3AyKr56t1pvfpQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：LeeLom&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;八大排序，三大查找是《数据结构》当中非常基础的知识点，在这里为了复习顺带总结了一下常见的八种排序算法。&lt;/p&gt;&lt;p&gt;常见的八大排序算法，他们之间关系如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEQIbbe1thntHPlUC411znMKPmhP0bCicLdyeubOaGr3W3a72nffJPgCg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;他们的性能比较：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEqOEtPXicYXXpCC59prJpicTMhXaH8CSNg5A77mc2KPwdK0626Im0mLmg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;下面，利用Python分别将他们进行实现。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;直接插入排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEsN513CdpxbIdzuyts3qRudzibFRQkv2YSN4l7O8YpCmNSzRMwDkXdFw/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;直接插入排序的核心思想就是：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过。&lt;/p&gt;&lt;p&gt;因此，从上面的描述中我们可以发现，直接插入排序可以用两个循环完成：&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一层循环&lt;/span&gt;：遍历待比较的所有数组元素&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二层循环：&lt;/span&gt;将本轮选择的元素(selected)与已经排好序的元素(ordered)相比较。如果：selected &amp;gt; ordered，那么将二者交换&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVElNkXbgsoN4rWRQiaECowNYicY0yECeWoIeTibEZOib84ScOxbpKUtia9yvA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;希尔排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEKGmKg0Cwj6kKRdI2YNqPXWonxA4R6ribIoFmJVG21L5w4KbwicNibPObQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;希尔排序的算法思想：将待排序数组按照步长gap进行分组，然后将每组的元素利用直接插入排序的方法进行排序;每次将gap折半减小，循环上述操作;当gap=1时，利用直接插入，完成排序。&lt;/p&gt;&lt;p&gt;同样的：从上面的描述中我们可以发现：希尔排序的总体实现应该由三个循环完成：&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一层循环：&lt;/span&gt;将gap依次折半，对序列进行分组，直到gap=1&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二、三层循环：&lt;/span&gt;也即直接插入排序所需要的两次循环。具体描述见上。&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEBiaRIyUu35TpWic6ibDDv3H0sP3nnsrnV8UOOeZ2OujEjgb8VBZBuMuXQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;简单选择排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE8yqPKIexg2nuVhshLL9fhcJzjnxAjNJO27bCMGOTBvr2Uicy3BIrU0Q/0?wx_fmt=gif"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;简单选择排序的基本思想：比较+交换。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;从待排序序列中，找到关键字最小的元素;&lt;/p&gt;&lt;p&gt;如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换;&lt;/p&gt;&lt;p&gt;从余下的 N - 1 个元素中，找出关键字最小的元素，重复(1)、(2)步，直到排序结束。&lt;/p&gt;&lt;p&gt;因此我们可以发现，简单选择排序也是通过两层循环实现。&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一层循环：&lt;/span&gt;依次遍历序列当中的每一个元素&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二层循环：&lt;/span&gt;将遍历得到的当前元素依次与余下的元素进行比较，符合最小元素的条件，则交换。&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEYniaW4hQGH1IWuNSN9N3WkhrhrdiaXvbTQesupEXf0SDQHMooLV6QLhQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;堆排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;堆的概念&lt;/span&gt;&lt;/p&gt;&lt;p&gt;堆：本质是一种数组对象。特别重要的一点性质：任意的叶子节点小于(或大于)它所有的父节点。对此，又分为大顶堆和小顶堆，大顶堆要求节点的元素都要大于其孩子，小顶堆要求节点元素都小于其左右孩子，两者对左右孩子的大小关系不做任何要求。&lt;/p&gt;&lt;p&gt;利用堆排序，就是基于大顶堆或者小顶堆的一种排序方法。下面，我们通过大顶堆来实现。&lt;/p&gt;&lt;p&gt;基本思想：&lt;/p&gt;&lt;p&gt;堆排序可以按照以下步骤来完成：&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先将序列构建称为大顶堆;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;(这样满足了大顶堆那条性质：位于根节点的元素一定是当前序列的最大值)&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE1Dwwo2YOfxibZIxOs1PEEfc4kzd4bpczqNdLrgtWISkJichZQQIegdsA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;取出当前大顶堆的根节点，将其与序列末尾元素进行交换;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;(此时：序列末尾的元素为已排序的最大值;由于交换了元素，当前位于根节点的堆并不一定满足大顶堆的性质)&lt;/p&gt;&lt;p&gt;&lt;span&gt;对交换后的n-1个序列元素进行调整，使其满足大顶堆的性质;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE34mdnKJr2ibbncID5AHV9OTHKAjibddNnp1MdUTu8iaRakYLW6j3sQNuw/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;重复2.3步骤，直至堆中只有1个元素为止&lt;/p&gt;&lt;p&gt;代码实现：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEh1G6YwGMicSaSANzAYAXLefORSsvmTHyGFR24BouPbGo49ibeUwZ6g4w/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEl3AnuiaLMgYr7L0wnkYWXygcDjqyqUFMqtHTUwrkG9m1LTpicYciaTrpA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;基本思想&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE8ZeliazpGHYiabHK2yL3rXfUvGzoDSA5ViamM3SVAS0nNdgAJtSTwZlew/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;冒泡排序思路比较简单：&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将序列当中的左右元素，依次比较，保证右边的元素始终大于左边的元素;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;( 第一轮结束后，序列最后一个元素一定是当前序列的最大值;)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对序列当中剩下的n-1个元素再次执行步骤1。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于长度为n的序列，一共需要执行n-1轮比较&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;(利用while循环可以减少执行次数)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;*代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEpRc6dh7I0fD1LCOwtk6sGlp5rsbWMyEzScMiallic30Rib5W1rjibaVseQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;快速排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEntcZM5RlM9cKRloMYPJbcVTxhWdHp6uea4eibtk63TsQpF8A5flxrqg/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快速排序的基本思想：挖坑填数+分治法&lt;/span&gt;&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从序列当中选择一个基准数(pivot)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在这里我们选择序列当中第一个数最为基准数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将序列当中的所有数依次遍历，比基准数大的位于其右侧，比基准数小的位于其左侧&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重复步骤1.2，直到所有子集当中只有一个元素为止。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;用伪代码描述如下：&lt;/p&gt;&lt;p&gt;1.i =L; j = R; 将基准数挖出形成第一个坑a[i]。&lt;/p&gt;&lt;p&gt;2.j--由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。&lt;/p&gt;&lt;p&gt;3.i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。&lt;/p&gt;&lt;p&gt;4.再重复执行2，3二步，直到i==j，将基准数填入a[i]中&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEvc7DOedKCwrZ7jDmBda3qAxbMb62pibriaZ5xkJs0fN4afDtLrbiaAZJw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;归并排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEr5JrpiajibawBnhFr9Y7aWuI1AwickJQ7H38FUsBfDMxM66cGBtCRn34Q/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个典型的应用。它的基本操作是：将已有的子序列合并，达到完全有序的序列;即先使每个子序列有序，再使子序列段间有序。&lt;/p&gt;&lt;p&gt;归并排序其实要做两件事：&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分解----将序列每次折半拆分&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;合并----将划分后的序列段两两排序合并&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因此，归并排序实际上就是两个操作，拆分+合并&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;如何合并?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;L[first...mid]为第一段，L[mid+1...last]为第二段，并且两端已经有序，现在我们要将两端合成达到L[first...last]并且也有序。&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;首先依次从第一段与第二段中取出元素比较，将较小的元素赋值给temp[]&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;重复执行上一步，当某一段赋值结束，则将另一段剩下的元素赋值给temp[]&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;此时将temp[]中的元素复制给L[]，则得到的L[first...last]有序&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;如何分解?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在这里，我们采用递归的方法，首先将待排序列分成A,B两组;然后重复对A、B序列&lt;/p&gt;&lt;p&gt;分组;直到分组后组内只有一个元素，此时我们认为组内所有元素有序，则分组结束。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEy03gzZVy3zDWQrreflTWanF4ouv0ZfVPicSeckkyXBVAhVQyMIfulTA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;基数排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEWGQAfoaX0gQI91iboPjEPNumhf8VAMSe49CesMLEdQWW5O19v0tt5Yg/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基数排序：&lt;/span&gt;通过序列中各个元素的值，对排序的N个元素进行若干趟的“分配”与“收集”来实现排序。&lt;/p&gt;&lt;p&gt;&lt;span&gt;分配：&lt;/span&gt;我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中&lt;/p&gt;&lt;p&gt;&lt;span&gt;收集：&lt;/span&gt;当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[ ]&lt;/p&gt;&lt;p&gt;对新形成的序列L[]重复执行分配和收集元素中的十位、百位...直到分配完该序列中的最高位，则排序结束&lt;/p&gt;&lt;p&gt;根据上述“基数排序”的展示，我们可以清楚的看到整个实现的过程&lt;/p&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEBQky0o4ADm7H9w2lzXzIHvdvwTrWogN2Mcfybiaw5IiaUdL6ehnjNwxA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;后记&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;写完之后运行了一下时间比较：&lt;/p&gt;&lt;p&gt;&lt;span&gt;1w个数据时：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEFB9zwf57WqbKOrPu1WKFwVROhJMic31icpTC9vuicbD4bNkDloZ5B2GRg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10w个数据时：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEz7t8yj6yy5YdqFgyXLxhSKx3wicIziaicnB4KicfqBEc1NMBBou4bv2SIw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;从运行结果上来看，堆排序、归并排序、基数排序真的快。&lt;/p&gt;&lt;p&gt;对于快速排序迭代深度超过的问题，可以将考虑将快排通过非递归的方式进行实现。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;数据结构可视化：visualgo&lt;/p&gt;&lt;p&gt;希尔排序介绍：希尔排序&lt;/p&gt;&lt;p&gt;堆排序：《算法导论》读书笔记之第6章 堆排序&lt;/p&gt;&lt;p&gt;博客园：静默虚空&lt;/p&gt;&lt;p&gt;参考资料详情请阅读全文。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 23 Sep 2016 09:30:41 +0800</pubDate>
    </item>
    <item>
      <title>常见的大数据术语表(中英对照)</title>
      <link>http://www.iwgc.cn/link/2804446</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEOYHye8btpC5vcZotPaJjfk78cWADvawbKcIM1Itt2hSspv520bX0Ng/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;译者：小胖妞妞&lt;/p&gt;&lt;p&gt;大数据的出现带来了许多新的术语，但这些术语往往比较难以理解。因此，我们通过本文给出一个常用的大数据术语表，抛砖引玉，供大家深入了解。其中部分定义参考了相应的博客文章。当然，这份术语表并没有100%包含所有的术语，如果你认为有任何遗漏之处，请告之我们。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;聚合(Aggregation)&lt;/span&gt;&amp;nbsp;– 搜索、合并、显示数据的过程&lt;/p&gt;&lt;p&gt;&lt;span&gt;算法(Algorithms)&lt;/span&gt;&amp;nbsp;– 可以完成某种数据分析的数学公式&lt;/p&gt;&lt;p&gt;&lt;span&gt;分析法(Analytics)&lt;/span&gt;&amp;nbsp;– 用于发现数据的内在涵义&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常检测(Anomaly detection)&lt;/span&gt;&amp;nbsp;– 在数据集中搜索与预期模式或行为不匹配的数据项。除了“Anomalies”,用来表示异常的词有以下几种：outliers, exceptions, surprises, contaminants.他们通常可提供关键的可执行信息&lt;/p&gt;&lt;p&gt;&lt;span&gt;匿名化(Anonymization)&lt;/span&gt;&amp;nbsp;– 使数据匿名，即移除所有与个人隐私相关的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;应用(Application)&lt;/span&gt;&amp;nbsp;– 实现某种特定功能的计算机软件&lt;/p&gt;&lt;p&gt;&lt;span&gt;人工智能(Artificial Intelligence)&lt;/span&gt;&amp;nbsp;– 研发智能机器和智能软件，这些智能设备能够感知周遭的环境，并根据要求作出相应的反应，甚至能自我学习&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;B&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;行为分析法(Behavioural Analytics)&lt;/span&gt;&amp;nbsp;– 这种分析法是根据用户的行为如“怎么做”，“为什么这么做”，以及“做了什么”来得出结论，而不是仅仅针对人物和时间的一门分析学科，它着眼于数据中的人性化模式&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据科学家(Big Data Scientist)&lt;/span&gt;&amp;nbsp;– 能够设计大数据算法使得大数据变得有用的人&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据创业公司(Big data startup)&lt;/span&gt;&amp;nbsp;– 指研发最新大数据技术的新兴公司&lt;/p&gt;&lt;p&gt;&lt;span&gt;生物测定术(Biometrics)&lt;/span&gt;&amp;nbsp;– 根据个人的特征进行身份识别&lt;/p&gt;&lt;p&gt;&lt;span&gt;B字节 (BB: Brontobytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 YB(Yottabytes)，相当于未来数字化宇宙的大小。1 B字节包含了27个0!&lt;/p&gt;&lt;p&gt;&lt;span&gt;商业智能(Business Intelligence)&lt;/span&gt;&amp;nbsp;– 是一系列理论、方法学和过程，使得数据更容易被理解&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;分类分析(Classification analysis)&lt;/span&gt;&amp;nbsp;– 从数据中获得重要的相关性信息的系统化过程; 这类数据也被称为元数据(meta data),是描述数据的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;云计算(Cloud computing)&lt;/span&gt;&amp;nbsp;– 构建在网络上的分布式计算系统，数据是存储于机房外的(即云端)&lt;/p&gt;&lt;p&gt;&lt;span&gt;聚类分析(Clustering analysis)&lt;/span&gt;&amp;nbsp;– 它是将相似的对象聚合在一起，每类相似的对象组合成一个聚类(也叫作簇)的过程。这种分析方法的目的在于分析数据间的差异和相似性&lt;/p&gt;&lt;p&gt;&lt;span&gt;冷数据存储(Cold data storage)&lt;/span&gt;&amp;nbsp;– 在低功耗服务器上存储那些几乎不被使用的旧数据。但这些数据检索起来将会很耗时&lt;/p&gt;&lt;p&gt;&lt;span&gt;对比分析(Comparative analysis)&lt;/span&gt;&amp;nbsp;– 在非常大的数据集中进行模式匹配时，进行一步步的对比和计算过程得到分析结果&lt;/p&gt;&lt;p&gt;&lt;span&gt;复杂结构的数据(Complex structured data)&lt;/span&gt;&amp;nbsp;– 由两个或多个复杂而相互关联部分组成的数据，这类数据不能简单地由结构化查询语言或工具(SQL)解析&lt;/p&gt;&lt;p&gt;&lt;span&gt;计算机产生的数据(Computer generated data)&lt;/span&gt;&amp;nbsp;– 如日志文件这类由计算机生成的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;并发(Concurrency)&lt;/span&gt;&amp;nbsp;– 同时执行多个任务或运行多个进程&lt;/p&gt;&lt;p&gt;&lt;span&gt;相关性分析(Correlation analysis)&lt;/span&gt;&amp;nbsp;– 是一种数据分析方法，用于分析变量之间是否存在正相关，或者负相关&lt;/p&gt;&lt;p&gt;&lt;span&gt;客户关系管理(CRM: Customer Relationship Management)&lt;/span&gt;&amp;nbsp;– 用于管理销售、业务过程的一种技术，大数据将影响公司的客户关系管理的策略&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;仪表板(Dashboard)&lt;/span&gt;&amp;nbsp;– 使用算法分析数据，并将结果用图表方式显示于仪表板中&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据聚合工具(Data aggregation tools)&lt;/span&gt;&amp;nbsp;– 将分散于众多数据源的数据转化成一个全新数据源的过程&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据分析师(Data analyst)&lt;/span&gt;&amp;nbsp;– 从事数据分析、建模、清理、处理的专业人员&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库(Database)&lt;/span&gt;&amp;nbsp;– 一个以某种特定的技术来存储数据集合的仓库&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库即服务(Database-as-a-Service)&lt;/span&gt;&amp;nbsp;– 部署在云端的数据库，即用即付，例如亚马逊云服务(AWS: Amazon Web Services)&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库管理系统(DBMS: Database Management System)&lt;/span&gt;&amp;nbsp;– 收集、存储数据，并提供数据的访问&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据中心(Data centre)&lt;/span&gt;&amp;nbsp;– 一个实体地点，放置了用来存储数据的服务器&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据清洗(Data cleansing)&lt;/span&gt;&amp;nbsp;– 对数据进行重新审查和校验的过程，目的在于删除重复信息、纠正存在的错误，并提供数据一致性&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据管理员(Data custodian)&lt;/span&gt;&amp;nbsp;– 负责维护数据存储所需技术环境的专业技术人员&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据道德准则(Data ethical guidelines)&lt;/span&gt;&amp;nbsp;– 这些准则有助于组织机构使其数据透明化，保证数据的简洁、安全及隐私&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据订阅(Data feed)&lt;/span&gt;&amp;nbsp;– 一种数据流，例如Twitter订阅和RSS&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据集市(Data marketplace)&lt;/span&gt;&amp;nbsp;– 进行数据集买卖的在线交易场所&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据挖掘(Data mining)&lt;/span&gt;&amp;nbsp;– 从数据集中发掘特定模式或信息的过程&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据建模(Data modelling)&lt;/span&gt;&amp;nbsp;– 使用数据建模技术来分析数据对象，以此洞悉数据的内在涵义&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据集(Data set)&lt;/span&gt;&amp;nbsp;– 大量数据的集合&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据虚拟化(Data virtualization)&lt;/span&gt;&amp;nbsp;– 数据整合的过程，以此获得更多的数据信息，这个过程通常会引入其他技术，例如数据库，应用程序，文件系统，网页技术，大数据技术等等&lt;/p&gt;&lt;p&gt;&lt;span&gt;去身份识别(De-identification)&lt;/span&gt;&amp;nbsp;– 也称为匿名化(anonymization)，确保个人不会通过数据被识别&lt;/p&gt;&lt;p&gt;&lt;span&gt;判别分析(Discriminant analysis)&lt;/span&gt;&amp;nbsp;– 将数据分类;按不同的分类方式，可将数据分配到不同的群组，类别或者目录。是一种统计分析法，可以对数据中某些群组或集群的已知信息进行分析，并从中获取分类规则。&lt;/p&gt;&lt;p&gt;&lt;span&gt;分布式文件系统(Distributed File System)&lt;/span&gt;&amp;nbsp;– 提供简化的，高可用的方式来存储、分析、处理数据的系统&lt;/p&gt;&lt;p&gt;&lt;span&gt;文件存贮数据库(Document Store Databases)&lt;/span&gt;&amp;nbsp;– 又称为文档数据库(document-oriented database), 为存储、管理、恢复文档数据而专门设计的数据库，这类文档数据也称为半结构化数据&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;E&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;探索性分析(Exploratory analysis)&lt;/span&gt;&amp;nbsp;– 在没有标准的流程或方法的情况下从数据中发掘模式。是一种发掘数据和数据集主要特性的一种方法&lt;/p&gt;&lt;p&gt;&lt;span&gt;E字节(EB: Exabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 PB(petabytes), 约等于1百万 GB。如今全球每天所制造的新信息量大约为1 EB&lt;/p&gt;&lt;p&gt;&lt;span&gt;提取-转换-加载(ETL: Extract, Transform and Load)&lt;/span&gt;&amp;nbsp;– 是一种用于数据库或者数据仓库的处理过程。即从各种不同的数据源提取(E)数据，并转换(T)成能满足业务需要的数据，最后将其加载(L)到数据库&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;F&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;故障切换(Failover)&lt;/span&gt;&amp;nbsp;– 当系统中某个服务器发生故障时，能自动地将运行任务切换到另一个可用服务器或节点上&lt;/p&gt;&lt;p&gt;&lt;span&gt;容错设计(Fault-tolerant design)&lt;/span&gt;&amp;nbsp;– 一个支持容错设计的系统应该能够做到当某一部分出现故障也能继续运行&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;G&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;游戏化(Gamification)&lt;/span&gt;&amp;nbsp;– 在其他非游戏领域中运用游戏的思维和机制，这种方法可以以一种十分友好的方式进行数据的创建和侦测，非常有效。&lt;/p&gt;&lt;p&gt;&lt;span&gt;图形数据库(Graph Databases)&lt;/span&gt;&amp;nbsp;– 运用图形结构(例如，一组有限的有序对，或者某种实体)来存储数据，这种图形存储结构包括边缘、属性和节点。它提供了相邻节点间的自由索引功能，也就是说，数据库中每个元素间都与其他相邻元素直接关联。&lt;/p&gt;&lt;p&gt;&lt;span&gt;网格计算(Grid computing)&lt;/span&gt;&amp;nbsp;– 将许多分布在不同地点的计算机连接在一起，用以处理某个特定问题，通常是通过云将计算机相连在一起。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;H&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Hadoop&lt;/span&gt;&amp;nbsp;– 一个开源的分布式系统基础框架，可用于开发分布式程序，进行大数据的运算与存储。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hadoop数据库(HBase)&lt;/span&gt;&amp;nbsp;– 一个开源的、非关系型、分布式数据库，与Hadoop框架共同使用&lt;/p&gt;&lt;p&gt;&lt;span&gt;HDFS&lt;/span&gt;&amp;nbsp;– Hadoop分布式文件系统(Hadoop Distributed File System);是一个被设计成适合运行在通用硬件(commodity hardware)上的分布式文件系统&lt;/p&gt;&lt;p&gt;&lt;span&gt;高性能计算(HPC: High-Performance-Computing)&lt;/span&gt;&amp;nbsp;– 使用超级计算机来解决极其复杂的计算问题&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;I&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;内存数据库(IMDB: In-memory)&lt;/span&gt;&amp;nbsp;– 一种数据库管理系统，与普通数据库管理系统不同之处在于，它用主存来存储数据，而非硬盘。其特点在于能高速地进行数据的处理和存取。&lt;/p&gt;&lt;p&gt;&lt;span&gt;物联网(Internet of Things)&lt;/span&gt;&amp;nbsp;– 在普通的设备中装上传感器，使这些设备能够在任何时间任何地点与网络相连。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;J&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;法律上的数据一致性(Juridical data compliance)&lt;/span&gt;&amp;nbsp;– 当你使用的云计算解决方案，将你的数据存储于不同的国家或不同的大陆时，就会与这个概念扯上关系了。你需要留意这些存储在不同国家的数据是否符合当地的法律。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;K&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;键值数据库(KeyValue Databases)&lt;/span&gt;&amp;nbsp;– 数据的存储方式是使用一个特定的键，指向一个特定的数据记录，这种方式使得数据的查找更加方便快捷。键值数据库中所存的数据通常为编程语言中基本数据类型的数据。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;L&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;延迟(Latency)&lt;/span&gt;&amp;nbsp;– 表示系统时间的延迟&lt;/p&gt;&lt;p&gt;&lt;span&gt;遗留系统(Legacy system)&lt;/span&gt;&amp;nbsp;– 是一种旧的应用程序，或是旧的技术，或是旧的计算系统，现在已经不再支持了。&lt;/p&gt;&lt;p&gt;&lt;span&gt;负载均衡(Load balancing)&lt;/span&gt;&amp;nbsp;– 将工作量分配到多台电脑或服务器上，以获得最优结果和最大的系统利用率。&lt;/p&gt;&lt;p&gt;&lt;span&gt;位置信息(Location data)&lt;/span&gt;&amp;nbsp;– GPS信息，即地理位置信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;日志文件(Log file)&lt;/span&gt;&amp;nbsp;– 由计算机系统自动生成的文件，记录系统的运行过程。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;M&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;M2M数据(Machine2Machine data)&lt;/span&gt;&amp;nbsp;– 两台或多台机器间交流与传输的内容&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器数据(Machine data)&lt;/span&gt;&amp;nbsp;– 由传感器或算法在机器上产生的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器学习(Machine learning)&lt;/span&gt;&amp;nbsp;– 人工智能的一部分，指的是机器能够从它们所完成的任务中进行自我学习，通过长期的累积实现自我改进。&lt;/p&gt;&lt;p&gt;&lt;span&gt;MapReduce&lt;/span&gt;&amp;nbsp;– 是处理大规模数据的一种软件框架(Map: 映射，Reduce: 归纳)。&lt;/p&gt;&lt;p&gt;&lt;span&gt;大规模并行处理(MPP: Massively Parallel Processing)&lt;/span&gt;&amp;nbsp;– 同时使用多个处理器(或多台计算机)处理同一个计算任务。&lt;/p&gt;&lt;p&gt;&lt;span&gt;元数据(Metadata)&lt;/span&gt;&amp;nbsp;– 被称为描述数据的数据，即描述数据数据属性(数据是什么)的信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;MongoDB&lt;/span&gt;&amp;nbsp;– 一种开源的非关系型数据库(NoSQL database)&lt;/p&gt;&lt;p&gt;&lt;span&gt;多维数据库(Multi-Dimensional Databases)&lt;/span&gt;&amp;nbsp;– 用于优化数据联机分析处理(OLAP)程序，优化数据仓库的一种数据库。&lt;/p&gt;&lt;p&gt;&lt;span&gt;多值数据库(MultiValue Databases)&lt;/span&gt;&amp;nbsp;– 是一种非关系型数据库(NoSQL), 一种特殊的多维数据库：能处理3个维度的数据。主要针对非常长的字符串，能够完美地处理HTML和XML中的字串。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;自然语言处理(Natural Language Processing)&lt;/span&gt;&amp;nbsp;– 是计算机科学的一个分支领域，它研究如何实现计算机与人类语言之间的交互。&lt;/p&gt;&lt;p&gt;&lt;span&gt;网络分析(Network analysis)&lt;/span&gt;&amp;nbsp;– 分析网络或图论中节点间的关系，即分析网络中节点间的连接和强度关系。&lt;/p&gt;&lt;p&gt;&lt;span&gt;NewSQL&lt;/span&gt;&amp;nbsp;– 一个优雅的、定义良好的数据库系统，比SQL更易学习和使用，比NoSQL更晚提出的新型数据库&lt;/p&gt;&lt;p&gt;&lt;span&gt;NoSQL&lt;/span&gt;&amp;nbsp;– 顾名思义，就是“不使用SQL”的数据库。这类数据库泛指传统关系型数据库以外的其他类型的数据库。这类数据库有更强的一致性，能处理超大规模和高并发的数据。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;O&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对象数据库(Object Databases)&lt;/span&gt;&amp;nbsp;– (也称为面象对象数据库)以对象的形式存储数据，用于面向对象编程。它不同于关系型数据库和图形数据库，大部分对象数据库都提供一种查询语言，允许使用声明式编程(declarative programming)访问对象.&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于对象图像分析(Object-based Image Analysis)&lt;/span&gt;&amp;nbsp;– 数字图像分析方法是对每一个像素的数据进行分析，而基于对象的图像分析方法则只分析相关像素的数据，这些相关像素被称为对象或图像对象。&lt;/p&gt;&lt;p&gt;&lt;span&gt;操作型数据库(Operational Databases)&lt;/span&gt;&amp;nbsp;– 这类数据库可以完成一个组织机构的常规操作，对商业运营非常重要，一般使用在线事务处理，允许用户访问 、收集、检索公司内部的具体信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;优化分析(Optimization analysis)&lt;/span&gt;&amp;nbsp;– 在产品设计周期依靠算法来实现的优化过程，在这一过程中，公司可以设计各种各样的产品并测试这些产品是否满足预设值。&lt;/p&gt;&lt;p&gt;&lt;span&gt;本体论(Ontology)&lt;/span&gt;&amp;nbsp;– 表示知识本体，用于定义一个领域中的概念集及概念之间的关系的一种哲学思想。(译者注: 数据被提高到哲学的高度，被赋予了世界本体的意义，成为一个独立的客观数据世界)&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常值检测(Outlier detection)&lt;/span&gt;&amp;nbsp;– 异常值是指严重偏离一个数据集或一个数据组合总平均值的对象，该对象与数据集中的其他它相去甚远，因此，异常值的出现意味着系统发生问题，需要对此另加分析。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;P&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;模式识别(Pattern Recognition)&lt;/span&gt;&amp;nbsp;– 通过算法来识别数据中的模式，并对同一数据源中的新数据作出预测&lt;/p&gt;&lt;p&gt;&lt;span&gt;P字节(PB: Petabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 TB(terabytes), 约等于1百万 GB (gigabytes)。欧洲核子研究中心(CERN)大型强子对撞机每秒产生的粒子个数就约为1 PB&lt;/p&gt;&lt;p&gt;&lt;span&gt;平台即服务(PaaS: Platform-as-a-Service)&lt;/span&gt;&amp;nbsp;– 为云计算解决方案提供所有必需的基础平台的一种服务&lt;/p&gt;&lt;p&gt;&lt;span&gt;预测分析(Predictive analysis)&lt;/span&gt;&amp;nbsp;– 大数据分析方法中最有价值的一种分析方法，这种方法有助于预测个人未来(近期)的行为，例如某人很可能会买某些商品，可能会访问某些网站，做某些事情或者产生某种行为。通过使用各种不同的数据集，例如历史数据，事务数据，社交数据，或者客户的个人信息数据，来识别风险和机遇&lt;/p&gt;&lt;p&gt;&lt;span&gt;隐私(Privacy)&lt;/span&gt;&amp;nbsp;– 把具有可识别出个人信息的数据与其他数据分离开，以确保用户隐私。&lt;/p&gt;&lt;p&gt;&lt;span&gt;公共数据(Public data)&lt;/span&gt;&amp;nbsp;– 由公共基金创建的公共信息或公共数据集。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;Q&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数字化自我(Quantified Self)&lt;/span&gt;&amp;nbsp;– 使用应用程序跟踪用户一天的一举一动，从而更好地理解其相关的行为&lt;/p&gt;&lt;p&gt;&lt;span&gt;查询(Query)&lt;/span&gt;&amp;nbsp;– 查找某个问题答案的相关信息&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;再识别(Re-identification)&lt;/span&gt;&amp;nbsp;– 将多个数据集合并在一起，从匿名化的数据中识别出个人信息&lt;/p&gt;&lt;p&gt;&lt;span&gt;回归分析(Regression analysis)&lt;/span&gt;&amp;nbsp;– 确定两个变量间的依赖关系。这种方法假设两个变量之间存在单向的因果关系(译者注：自变量，因变量，二者不可互换)&lt;/p&gt;&lt;p&gt;&lt;span&gt;RFID&lt;/span&gt;&amp;nbsp;– 射频识别; 这种识别技术使用一种无线非接触式射频电磁场传感器来传输数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;实时数据(Real-time data)&lt;/span&gt;&amp;nbsp;– 指在几毫秒内被创建、处理、存储、分析并显示的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐引擎(Recommendation engine)&lt;/span&gt;&amp;nbsp;– 推荐引擎算法根据用户之前的购买行为或其他购买行为向用户推荐某种产品&lt;/p&gt;&lt;p&gt;&lt;span&gt;路径分析(Routing analysis)&lt;/span&gt;&amp;nbsp;– 针对某种运输方法通过使用多种不同的变量分析从而找到一条最优路径，以达到降低燃料费用，提高效率的目的&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;半结构化数据(Semi-structured data)&lt;/span&gt;&amp;nbsp;– 半结构化数据并不具有结构化数据严格的存储结构，但它可以使用标签或其他形式的标记方式以保证数据的层次结构&lt;/p&gt;&lt;p&gt;&lt;span&gt;情感分析(Sentiment Analysis)&lt;/span&gt;&amp;nbsp;– 通过算法分析出人们是如何看待某些话题&lt;/p&gt;&lt;p&gt;&lt;span&gt;信号分析(Signal analysis)&lt;/span&gt;&amp;nbsp;– 指通过度量随时间或空间变化的物理量来分析产品的性能。特别是使用传感器数据。&lt;/p&gt;&lt;p&gt;&lt;span&gt;相似性搜索(Similarity searches)&lt;/span&gt;&amp;nbsp;– 在数据库中查询最相似的对象，这里所说的数据对象可以是任意类型的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;仿真分析(Simulation analysis)&lt;/span&gt;&amp;nbsp;– 仿真是指模拟真实环境中进程或系统的操作。仿真分析可以在仿真时考虑多种不同的变量，确保产品性能达到最优&lt;/p&gt;&lt;p&gt;&lt;span&gt;智能网格(Smart grid)&lt;/span&gt;&amp;nbsp;– 是指在能源网中使用传感器实时监控其运行状态，有助于提高效率&lt;/p&gt;&lt;p&gt;&lt;span&gt;软件即服务(SaaS: Software-as-a-Service)&lt;/span&gt;&amp;nbsp;– 基于Web的通过浏览器使用的一种应用软件&lt;/p&gt;&lt;p&gt;&lt;span&gt;空间分析(Spatial analysis)&lt;/span&gt;&amp;nbsp;– 空间分析法分析地理信息或拓扑信息这类空间数据，从中得出分布在地理空间中的数据的模式和规律&lt;/p&gt;&lt;p&gt;&lt;span&gt;SQL&lt;/span&gt;&amp;nbsp;– 在关系型数据库中，用于检索数据的一种编程语言&lt;/p&gt;&lt;p&gt;&lt;span&gt;结构化数据(Structured data)&lt;/span&gt;&amp;nbsp;-可以组织成行列结构，可识别的数据。这类数据通常是一条记录，或者一个文件，或者是被正确标记过的数据中的某一个字段，并且可以被精确地定位到。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;T字节(TB: Terabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 GB(gigabytes)。1 TB容量可以存储约300小时的高清视频。&lt;/p&gt;&lt;p&gt;&lt;span&gt;时序分析(Time series analysis)&lt;/span&gt;&amp;nbsp;– 分析在重复测量时间里获得的定义良好的数据。分析的数据必须是良好定义的，并且要取自相同时间间隔的连续时间点。&lt;/p&gt;&lt;p&gt;&lt;span&gt;拓扑数据分析(Topological Data Analysis)&lt;/span&gt;&amp;nbsp;– 拓扑数据分析主要关注三点：复合数据模型、集群的识别、以及数据的统计学意义。&lt;/p&gt;&lt;p&gt;&lt;span&gt;交易数据(Transactional data)&lt;/span&gt;&amp;nbsp;– 随时间变化的动态数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;透明性(Transparency)&lt;/span&gt;&amp;nbsp;– 消费者想要知道他们的数据有什么作用、被作何处理，而组织机构则把这些信息都透明化了。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;U&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;非结构化数据(Un-structured data)&lt;/span&gt;&amp;nbsp;– 非结构化数据一般被认为是大量纯文本数据，其中还可能包含日期，数字和实例。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;V&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;价值(Value)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 所有可用的数据，能为组织机构、社会、消费者创造出巨大的价值。这意味着各大企业及整个产业都将从大数据中获益。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可变性(Variability)&lt;/span&gt;&amp;nbsp;– 也就是说，数据的含义总是在(快速)变化的。例如，一个词在相同的推文中可以有完全不同的意思。&lt;/p&gt;&lt;p&gt;&lt;span&gt;多样(Variety)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 数据总是以各种不同的形式呈现，如结构化数据，半结构化数据，非结构化数据，甚至还有复杂结构化数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;高速(Velocity)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 在大数据时代，数据的创建、存储、分析、虚拟化都要求被高速处理。&lt;/p&gt;&lt;p&gt;&lt;span&gt;真实性(Veracity)&lt;/span&gt;&amp;nbsp;– 组织机构需要确保数据的真实性，才能保证数据分析的正确性。因此，真实性(Veracity)是指数据的正确性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可视化(Visualization)&lt;/span&gt;&amp;nbsp;– 只有正确的可视化，原始数据才可被投入使用。这里的“可视化”并非普通的图型或饼图，可视化指是的复杂的图表，图表中包含大量的数据信息，但可以被很容易地理解和阅读。&lt;/p&gt;&lt;p&gt;&lt;span&gt;大量(Volume)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 指数据量，范围从Megabytes至Brontobytes&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;W&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;天气数据(Weather data)&lt;/span&gt;&amp;nbsp;– 是一种重要的开放公共数据来源，如果与其他数据来源合成在一起，可以为相关组织机构提供深入分析的依据&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;X&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;XML数据库(XML Databases)&lt;/span&gt;&amp;nbsp;– XML数据库是一种以XML格式存储数据的数据库。XML数据库通常与面向文档型数据库相关联，开发人员可以对XML数据库的数据进行查询，导出以及按指定的格式序列化&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;Y&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Y字节 (Yottabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 ZB (Zettabytes), 约等于250万亿张DVD的数据容量。现今，整个数字化宇宙的数据量为1 YB, 并且将每18年翻一番。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;Z&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Z字节 (ZB: Zettabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 EB (Exabytes), 约等于1百万 TB。据预测，到2016年全球范围内每天网络上通过的信息大约能达到1 ZB。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;附：存储容量单位换算表：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1 Bit(比特) = Binary Digit&lt;/p&gt;&lt;p&gt;8 Bits = 1 Byte(字节)&lt;/p&gt;&lt;p&gt;1,000 Bytes = 1 Kilobyte&lt;/p&gt;&lt;p&gt;1,000 Kilobytes = 1 Megabyte&lt;/p&gt;&lt;p&gt;1,000 Megabytes = 1 Gigabyte&lt;/p&gt;&lt;p&gt;1,000 Gigabytes = 1 Terabyte&lt;/p&gt;&lt;p&gt;1,000 Terabytes = 1 Petabyte&lt;/p&gt;&lt;p&gt;1,000 Petabytes = 1 Exabyte&lt;/p&gt;&lt;p&gt;1,000 Exabytes = 1 Zettabyte&lt;/p&gt;&lt;p&gt;1,000 Zettabytes = 1 Yottabyte&lt;/p&gt;&lt;p&gt;1,000 Yottabytes = 1 Brontobyte&lt;/p&gt;&lt;p&gt;1,000 Brontobytes = 1 Geopbyte&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 23 Sep 2016 09:30:41 +0800</pubDate>
    </item>
    <item>
      <title>KDnuggets 官方调查：数据科学家最常用的十种算法</title>
      <link>http://www.iwgc.cn/link/2804447</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEQUEjM2SyvJ57hskHx91GZZVExzM2BUWIJJTMjWNsdQbhe22hoIzNVQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;译者：机器之心&lt;/p&gt;&lt;p&gt;最新一期的 KDnuggets 调查展示了一份数据科学家使用度最高的算法列表，这份列表中包含了很多惊喜，包括最学术的算法和面向产业化的算法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;哪些方法/算法是您在过去 12 个月中运用到一个实际的数据科学相关的应用程序中的?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这是基于 844 个投票者的结果。&lt;/p&gt;&lt;p&gt;排名前十的算法以及他们的投票者的比例分布如下：&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVECY4ibYMfuANhBYtupriajhSGicQ0T32aSdoZ3J8F2KQkJBfwOHOG5NoVw/0?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;图 1 ：数据科学家使用度最高的 10 大算法&lt;/p&gt;&lt;p&gt;每个受访者平均使用 8.1 个算法，这相比于 2011 的相似调查显示的结果有了巨大的增长。&lt;/p&gt;&lt;p&gt;与 2011 年关于数据分析/数据挖掘的调查相比，我们注意到最常用的方法仍然是回归、聚类、决策树/Rules 和可视化。&lt;span&gt;相对来说最大的增长是由 (pct2016 /pct2011 – 1) 测定的以下算法：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;Boosting，从 2011 年的 23.5% 至 2016 年的 32.8%，同比增长 40%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文本挖掘，从 2011 年的 27.7% 至 2016 年的 35.9%，同比增长 30%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可视化，从 2011 年的 38.3% 至 2016 年的 48.7%，同比增长 27%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;时间序列/序列分析，从 2011 年的 29.6% 至 2016 年的 37.0%，同比增长 25%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;异常/偏差检测，从 2011 年的 16.4% 至 2016 年的 19.5%，同比增长 19%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;集成方法，从 2011 年的 28.3%至 2016 年的 33.6%，同比增长 19%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持向量机，从 2011 年的 28.6% 至 2016 年的 33.6%，同比增长 18%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;回归，从 2011 年的 57.9% 至 2016 年的 67.1%，同比增长 16%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;最受欢迎算法在 2016 年的调查中有了新的上榜名单：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;K-近邻，46%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;主成分分析，43%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;随机森林，38%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;优化，24%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;神经网络 – 深度学习，19%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;奇异值分解，16%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;最大幅下降的有：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;关联规则，从 2011 年的 28.6% 至 2016 年的 15.3%，同比下降 47%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;隆起造型，从 2011 年的 4.8% 至 2016 年的 3.1%，同比下降 36%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;因素分析，从 2011 年的 18.6% 至 2016 年的 14.2%，同比下降 24%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;生存分析，从 2011 年的 9.3% 至 2016 年的 7.9%，同比下降 15%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下表显示了不同的算法类型的使用：监督算法、无监督算法、元算法，以及职业类型决定的对算法的使用。我们排除 NA(4.5%)和其他(3%)的职业类型。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEbkg47xsULde1jNYLamuHnHKEMXHaFDxbiaOpEeo8rFIH4ddicib3RrrXA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;表 1：根据职业类型显示的不同算法使用度&lt;/p&gt;&lt;p&gt;我们注意到，几乎每个人都使用监督学习算法。&lt;/p&gt;&lt;p&gt;政府和产业业数据科学家比学生和学术研究人员使用更多不同类型的算法，而产业数据科学家们更倾向于使用元算法。&lt;/p&gt;&lt;p&gt;接下来，我们根据职业类型分析了前 10 名的算法+深度学习使用情况。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVElXXosLDTkkM7MpRpu1iaWwucp3haC9h9Bryd2LSSiaCiabBgSibj9B9tYw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;表 2：根据职业类型分类的 10 大算法+深度学习使用情况&lt;/p&gt;&lt;p&gt;为了更明显的看到差异，我们计算了具体职业分类相比于平均算法使用度的一个算法偏差，即偏差(ALG，类型)=使用(ALG，类型)/使用(ALG，所有的)&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEdeTv3uwOlMfM8V7pGqNTcoIjmypicj2iaIYPduCskibe4ay95cibhKyWYg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;图 2：职业对算法的使用偏好&lt;/p&gt;&lt;p&gt;我们注意到，产业数据科学家们更倾向于使用回归、可视化、统计、随机森林和时间序列。政府/非营利更倾向于使用可视化、主成分分析和时间序列。学术研究人员更倾向于使用主成分分析和深度学习。学生普遍使用更少的算法，但多为文本挖掘和深度学习。&lt;/p&gt;&lt;p&gt;接下来，我们看看某一具体地域的参与度，表示整体的 KDnuggets 的用户：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;美国/加拿大，40%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;欧洲，32%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;亚洲，18%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;拉丁美洲，5%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;非洲/中东，3.4%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;澳洲/新西兰，2.2%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;由于在 2011 年的调查中，我们将产业/政府分在了一组，而将学术研究/学生分在了第二组，并计算了算法对于业界/政府的亲切度：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEricvgNVn7YWmJTzgo4NyX3MKSQTibKOFSURBAn0CS0jwo4IEicsg3lrBQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;因此亲切度为 0 的算法表示它在产业/政府和学术研究人员或学生之间的使用情况对等。越高 IG 亲切度表示算法越被产业界普遍使用，反之越接近「学术」。&lt;/p&gt;&lt;p&gt;&lt;span&gt;最「产业」的算法是：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;异常检测，1.61&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;生存分析，1.39&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;因子分析，0.83&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;时间序列/序列，0.69&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;关联规则，0.5&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而 uplifting modeling 又是最「产业的算法」，令人惊讶的发现是，它的使用率极低 – 只有 3.1% – 是本次调查的算法中最低的。&lt;/p&gt;&lt;p&gt;&lt;span&gt;最学术的算法是：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;常规神经网络，-0.35&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;朴素贝叶斯，-0.35&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持向量机，-0.24&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;深度学习，-0.19&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EM，-0.17&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下图显示了所有的算法及其产业/学术亲切度。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEJMWaeeP74ShKKeTTX7ILezvA2KNNq2pgHcZgVQWA1sPhuXII63k6Nw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;图 3：KDnuggets 投票：最常被数据科学家使用的算法：产业界 VS 学术界&lt;/p&gt;&lt;p&gt;下表有关于算法的细节、两次调查中使用算法的比例、以及像上面解释的产业亲切度。&lt;/p&gt;&lt;p&gt;接下来的图表展示了算法的细节，按列&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;N：根据使用度排名&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;算法：算法名称，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型：S – 监督，U – 无监督，M – 元，Z – 其他，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在 2016 年调查中使用这种算法的调查者比例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在 2011 年调查中使用这种算法的调查者比例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;变动(%2016 年/2011% – 1)，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;产业亲切度(如上所述)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEj8r1zKboIleqjowP8Wgk94ia8Ceq9UL8ibib3LcxbLcgXic8NynL7WYZicA/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEibicWN08teic5fSZxbUgJ7yKbaUxHaqIQ6Sr04pxJTxYyq00XAiagn4Xgg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;表 3：KDnuggets 2016 调查：数据科学家使用的算法&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 23 Sep 2016 09:30:41 +0800</pubDate>
    </item>
    <item>
      <title>用Python写一个命令行火车票查看器</title>
      <link>http://www.iwgc.cn/link/2789164</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicdQsb7NxL6hXBicTH1icpTaYmkPPG0afN1vnFbSgertI02qYvZqnSFlVg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：protream&lt;/p&gt;&lt;p&gt;当你想查询一下火车票信息的时候，你还在上12306官网吗?或是打开你手机里的APP?下面让我们来用Python写一个命令行版的火车票查看器, 只要在命令行敲一行命令就能获得你想要的火车票信息!如果你刚掌握了Python基础，这将是个不错的小练习。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;接口设计&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;一个应用写出来最终是要给人使用的，哪怕只是给你自己使用。所以，首先应该想想你希望怎么使用它?让我们先给这个小应用起个名字吧，既然及查询票务信息，那就叫它tickets好了。我们希望用户只要输入出发站，到达站以及日期就让就能获得想要的信息，所以tickets应该这样被使用：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicibbMJjSL8xqIRibmSJgY6sT7EWEqLmso99xW5dxnNzlWvqjBDG5H9KDQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;另外，火车有各种类型，高铁、动车、特快、快速和直达，我们希望可以提供选项只查询特定的一种或几种的火车，所以，我们应该有下面这些选项：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;-g 高铁&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-d 动车&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-t 特快&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-k 快速&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-z 直达&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这几个选项应该能被组合使用，所以，最终我们的接口应该是这个样子的：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic6A3sWIzHz1pILTgiaibrhyWR1Ogmh0V5gficNDicvnsmficSmHtaOEnYM4A/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;接口已经确定好了，剩下的就是实现它了。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;开发环境&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;写Python程序的一个良好实践是使用virtualenv这个工具建一个虚拟的环境。我们的程序使用Python3开发，下面在你的工作目录下建一个文件夹tickets，进去创建一个虚拟环境：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicIpZlZYKymTNgAv9VxWymf7ianOibqOOhib5TGibkBLLfTBTwcDzt9eSLPg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;通过下面的命令激活它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipicc4X9AC1teWUQdgEUnYY5mRXBiaZBA4Burn8TMVMdI7nn5Ric3ejyDqeA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;解析参数&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Python有很多写命令行应用的工具，如argparse, docopt, options...这里，我们选用docopt这个简单易用的工具，我们先安装它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicFSyDfghU9GtQ2a6YXOGulgKR6TKjrWnfVvzQjvJiauDgRlcutODiaH1g/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;docopt可以按我们在文档字符串中定义的格式来解析参数，在tickets.py中：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic23uiaIPUJvKp2eic3iauQtusORoJk9CEobibzyF4p5wLaHv7srFDrHII3Q/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;下面我们运行一下这个程序：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicYuWM6EXkSt8FIjXWTdqTsUfDmTH0sibicp4yEvYkrMCibib9khGlVWmmYA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;我们得到下面的参数解析结果：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;{'-d': False, '-g': False, '-k': False, '-t': False, '-z': False, '': '2016-07-01', '': '上海', '': '北京'}&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;获取数据&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;参数已经解析好了，下面就是如何获取数据了，这也是最主要的部分。&lt;/span&gt;首先我们打开12306，进入余票查询页面，如果你使用chrome，那么按F12打开开发者工具，选中Network一栏，在查询框钟我们输入上海到北京，日期2016-07-01, 点击查询，我们在调试工具发现，查询系统实际上请求了这个URL :&lt;/p&gt;&lt;p&gt;https://kyfw.12306.cn/otn/lcxxcx/query?purpose_codes=ADULT&amp;amp;queryDate=2016-07-01&amp;amp;from_station=SHH&amp;amp;to_station=BJP&lt;/p&gt;&lt;p&gt;并且返回的是JSON格式的数据!接下来问题就简单了，我们只需要构建请求URL然后解析返回的JSON数据就可以了。但是我们发现，URL里面from_station和to_station并不是汉字，而是一个代号，而用户输入的是汉字，我们要如何获取代号呢?我们打开网页源码看看有没有什么发现。&lt;/p&gt;&lt;p&gt;啊哈!果然，我们在网页里面找到了这个链接：点我, 这里面貌似是包含了所有车站的中文名，拼音，简写和代号等信息, 我们在项目目录下将它保存为stations.html。但是这些信息挤在一起，而我们只想要中文名和大写字母的代号信息，怎么办呢?&lt;/p&gt;&lt;p&gt;BINGO!正则表达式，我们写个小脚本来匹配提取出想要的信息吧, 在parse.py中：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicAna1YYnNibVyibIAuGV1Zg6OAdKOUAJicYTKZKTsLsBZiaH5rFHeApIobA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;我们运行这个脚本，它将以字典的形式返回所有车站和它的大写字母代号, 我们将结果重定向到stations.py中，&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicUZ0GxyjvGl5ficu4qkXhF4FgRrN0Z0O4l3bHmicaBc00Ga4nDJNicHOFw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;我们为这个字典加名字，stations, 最终，stations.py文件是这样的：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicY4JmSntQSc8RxmZpb6r07qJib3TaVtQ9BqWiaQGVbrBYdtoWTKJ5TvpQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;现在，用户输入车站的中文名，我们就可以直接从这个字典中获取它的字母代码了：&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;from stations import stations&lt;/p&gt;&lt;p&gt;def cli():&lt;/p&gt;&lt;p&gt;arguments = docopt(__doc__)&lt;/p&gt;&lt;p&gt;from_staion = stations.get(arguments[''])&lt;/p&gt;&lt;p&gt;to_station = stations.get(arguments[''])&lt;/p&gt;&lt;p&gt;date = arguments['']&lt;/p&gt;&lt;p&gt;# 构建URL&lt;/p&gt;&lt;p&gt;url = 'https://kyfw.12306.cn/otn/lcxxcx/query?purpose_codes=ADULT&amp;amp;queryDate={}&amp;amp;from_station={}&amp;amp;to_station={}'.format(date, from_staion, to_station)&lt;/p&gt;&lt;p&gt;万事俱备，下面我们来请求这个URL获取数据吧!这里我们使用requests这个库, 先安装它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipicibbjtahw2pU90cxWMXH09hB1icYfsXQzGESeutXET6aKJ1fJkob1RicbQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;它提供了非常简单易用的接口，&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpiciaCtlwGaNl0N8MrP5L1jDJyJmuLkb3ibEZRQCwVXIDa6XKKfMEuwUVuA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;从结果中，我们可以观察到，与车票有关的信息需要进一步提取：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicrRC0zOYtkqjFfLfPUghE1gKTyVhAibM3OpAZNv7qFItX0qXEUu8CqUw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;显示结果&lt;/p&gt;&lt;p&gt;数据已经获取到了，剩下的就是提取我们要的信息并将它显示出来。prettytable这个库可以让我们它像MySQL数据库那样格式化显示数据。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicpTNwtSeVIdc72GPWzHwENPq28jXcyXnYFe2Eg6ro61V14LibrEeYeiaQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;这样使用它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipick1swZWvNiaxsicDx0rbThIdcFlVyj8qr5SXjR27Kk3Tic37fkZ3ljmpyA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;下面一些问题留给你做练习:&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;从每一行row中按照headers过滤信息，将结果添加到prettytable中&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;像开始的图片中那样将出发站和到达站，出发时间和到达时间显示为一列&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加颜色(提示：使用colorama, termcorlor或ANSI转义字符)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加异常处理，如果用户输入的车站或日期有错误怎么办?如果网络异常怎么办?...&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加更多的日期格式支持: 比如用户输入20160701也可以查&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加参数支持，用户可以指定火车类型&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果你还有问题，可以去github查看源码, 或者来我的博客下面提问:&lt;/p&gt;&lt;p&gt;Github: https://github.com/protream/tickets&lt;/p&gt;&lt;p&gt;Blog: https://protream.github.io&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 22 Sep 2016 09:39:11 +0800</pubDate>
    </item>
    <item>
      <title>投稿 | 电信运营商数据价值跨行业运营的现状与思考</title>
      <link>http://www.iwgc.cn/link/2789165</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic6s7aoxuxzMsLkBZWDtufav18icia3ib9tJ3hMeKOcxl01AibyV5TguibJTg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：黄文&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;一、电信运营商数据资源概况与比较优势&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;电信运营商作为信息社会的综合信息服务商，拥有天然的数据管道优势，运营商的网络系统与业务平台中数据详细记录了人在现代化社会的信息指纹(如图1)。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic2icXqu99bKYoxwXapxrUyS3iaqiaWL6BNRico1gxmzPq4ZcgLFesdia5rwA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图1 电信运营商数据概况&lt;/p&gt;&lt;p&gt;运营商客户的上网和通话行为、位置轨迹等都以BIT的形式流淌在运营商的管道里，而且这些数据是长期积累在运营商的数据管道里的。因此，电信运营商数据的丰富性、连续性、完整性具有得天独厚的优势，具体来说，运营商数据具有“真、大、快、活、全”五大特点(见图2)。同时，在跨行业应用领域，运营商数据在数据补全、交叉验证等方面也有明显优势。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic1NTbGAI5hq216RHuZ4SNOCDzv3JIPUwNGEsH7eCTxWN4AYswia9eXEQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图2 电信运营商数据的特点与优势&lt;/p&gt;&lt;p&gt;另外，相对于BAT来说，电信运营商的数据仍然有一定的优势(见图3)：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicDsHbwCRTusMvMzvSOOeAwgbYabicPVDdKutdEg5EFU9WpYibTrlxNKrA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图3 电信运营商数据与BAT的比较&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;二、运营商大数据跨行业应用的形势研判&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数据的跨界融合是释放数据价值的必由路径。&lt;/span&gt;数据具有天然的外部性，数据主体认为没有价值的信息在其他数据需求方来说可能存在很大价值。比如，我们买房的数据对装修装饰机构、房产中介机构是非常有价值的，已经被房地产开发商等在我们不知情的情况下被变卖多次。&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前，国内各行业的数据壁垒是广泛存在的，数据的开放与融合对于促进社会信息文明、释放数据红利，造福国计民生是大有裨益的。&lt;/span&gt;促进数据合理合法的开放与流动已成为政府和业界的广泛共识。目前，国内正在兴起的大数据交易所、大数据产业联盟就是顺应这一趋势而形成的。&lt;span&gt;我们有理由相信，数据的跨界融合与流动，是推动大数据产业应用落地、释放数据价值的必由之路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;国内企业级SaaS应用的春天即将到来。近两年来，SaaS因其采购成本低、使用简单方便、功能与使用场景契合度高等特点，在2B市场正取代传统的软件服务形态，逐步成为企业服务的重要力量。SaaS(Software as a Service)，软件即服务，是基于互联网快速发展而产生的面向最终用户的产品服务模式，而移动互联网的普及更是加快了SaaS的发展进程。&lt;/p&gt;&lt;p&gt;我们看到，2014年之后，随着移动互联网的高速普及以及企业管理需求被发现，加之资本市场加速了在企业服务领域的布局，无论是在投资力度还是在数量方面在加码企业服务市场，企业级SaaS都迎来了高速发展时期。&lt;span&gt;据权威媒体分析，2015年，中国SaaS市场融资总额达到40亿元，累计上百起投融资事件，IDG、红杉等多家投资机构开抢2B项目，抢占赛道。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2015年，在资本的刺激之下，企业级服务市场开始井喷，一个万亿级的蓝海市场正在形成。据艾媒咨询报告显示，2015年国内企业级SaaS市场规模达到200亿元人民币，增长率高达70%。&lt;/p&gt;&lt;p&gt;在企业高效运营管理需求、移动互联网应用条件不断成熟等多方因素推动下，市场规模仍将保持高速增长，预计2016年市场规模将超过300亿元人民币。我们相信企业级SaaS服务市场明媚的春天真的来到了，大数据行业的面向行业客户的企业级SaaS服务市场也必将迎来井喷期。&lt;/p&gt;&lt;p&gt;运营商数据跨行业应用场景丰富、前景广阔。运营商数据因其真实性、连续性、完整性等特点，在国内大数据领域已成为一支具有重大影响力、不可或缺的力量。&lt;/p&gt;&lt;p&gt;运营商最有价值的数据主要是身份信息、位置数据、上网日志、社交信息等，这些数据在其它行业中能找到非常广泛的应用场景(见图4)。&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如：运营商大数据+交通，可应用于交通实时监测和城市公交线路规划等;运营商大数据+金融，可应用于获客、风控等场景;运营商大数据+旅游，可应用于景区客流监测与预警等;运营商大数据+零售，可应用于商圈价值评估、门店选址等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicSxxemHILiaAzANhCXlzrvIPM4lb8T6oARkDtEAOIYnm2DO7VvgcB0xQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图4 运营商大数据的跨行业应用场景与方向&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;三、运营商自身实践大数据跨界运营存在诸多挑战&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当前，运营商数据跨界运营市场正处在萌芽期，电信运营商及其子公司、亚信等第三方系统集成商、征信机构等多方势力均在参与其中。中国联通和中国电信在数据对外跨界运营服务方面目前胆量和力度较大，但这个市场只有在中国移动业动作起来时才会迎来真正的春天。&lt;/p&gt;&lt;p&gt;目前，中国移动先进省份(如浙江)已经在落实自主运营了，个人认为这块市场还有1-3年的窗口期，有实力的厂商应加紧布局、抢滩卡位。&lt;/p&gt;&lt;p&gt;&lt;span&gt;运营商自身实践大数据跨界运营存在着诸多挑战。&lt;/span&gt;前面提到，运营商大数据跨界运营领域存在多种力量的角逐，运营商自己也在耕耘这个细分领域。那为什么说第三方还有机会呢?这与运营商自身的体制有较大关系。运营商自身在大数据跨界运营方面面临多方面的挑战：&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战一：有数据难整合。&lt;/span&gt;运营商虽然坐拥海量数据，但数据在组织中却因为不同线条和部门的存在而处于割裂状态，拥有数据的部门之间往往缺乏顺畅的数据共享机制，加上各种烟囱平台的存在，数据的标准可能都有不兼容的情况，如何实现跨业务、跨平台的关联与整合成为运营商最大的挑战;同时，由于互联网上大量非结构数据的存在，运营商还面临着将非结构化数据与结构化数据进行统一、整合的挑战。这一系列的挑战使得运营商的数据一直处于分散和休眠的状态，无法真正发挥其潜在价值。&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战二：有需求难操作。&lt;/span&gt;对运营商而言，信息安全一直是一个无法逾越的关键问题。由于运营商数据中包含了大量的用户基本信息，这其中涉及大量的个人隐私，一旦泄露并被不法分子利用，会给用户和运营商带来不可估量的损失。从国内的市场来看，有数据泄露引发的信息安全事件，在媒体的推波助澜下，极有可能成为让运营商跌入万劫不复之地。因此，运营商在数据开放与对外合作方面一直都很保守和谨慎。&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战三：有想法无承载。&lt;/span&gt;即使不考虑数据质量和隐私风险，运营商实现大数据变现还需要面对组织和流程上的空白。大数据应用是一个系统工程，其开发、建设、产品、营销、运营等环节都需要有具体的部门去承载和落实。然而，国内运营商现实的问题是，已有的组织架构和流程规范都是基于传统业务来制定的，对于大数据这样的新兴领域，往往都是基于各自的理解或资源的分布，各省市公司都缺少统一的运营规范和模式范式，更无法形成自上而下的力量来贯穿，如散兵游勇一般。&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战四：有机会难实施。&lt;/span&gt;抛开组织和流程的问题，能力和机制更是运营商绕不开的门槛。大数据属于技术密集型领域，技术专家(解决建模与架构)和复合型人才(解决跨行业的Know How)的匮乏一直困扰着运营商，虽然短期可通过合作的方式解决，但长期来看还需自建团队实现能力内化和储备。而这往往需要在人力资源的开发、核心人才的引进以及激励机制的革新等方面下功夫。&lt;/p&gt;&lt;p&gt;总而言之，由于制度规范、业务模式、技术对接、人才储备等诸多限制，运营商大数据在跨界运营领域仍是步履蹒跚的。靠运营商自身的力量是无法很好地完成与其它行业客户的端到端的业务打通的，因此，这位第三方公司提供了很好的参与机会。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;四、运营商大数据跨行业运营的策略与路径&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;以下笔者站在第三方公司角度，来谈谈如何接入到运营商大数据跨界运营这个细分领域中。具体的指导思想可概括为：&lt;span&gt;重点关注四大行业、深入三个业务领域，建立深度合作运营方式，跨越四道障碍，实现从0到1的跨越。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;运营商大数据跨界应用需重点关注四大行业：金融、交通、旅游、零售。如下表1：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic1sBe6dEXkCxQjzvhSBLzVsr9grmI5PuKLTCRptoqH5AicaYltcLyvCQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;表1 运营商大数据的四大应用行业&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;运营商大数据跨界运营最有价值的三大领域：征信、RTB和客户洞察(如图5)。运营商数据因其真实性、维度丰富、覆盖面广等特点，对于在央行无信用记录的用户来说是一个很好的增信补充，金融机构借助运营商数据能对贷款客户进行信用评估和分级，决定贷款与授信策略;RTB全称是Real Time Bidding即实时竞价，是时下互联网广告领域最流行的新名词。&lt;/p&gt;&lt;p&gt;&lt;span&gt;RTB主要特点在于：&lt;/span&gt;一方面基于大数据技术可以协助广告主投放过程更加精准、透明、高效、可控，从而投放效果ROI更高;另外一方面基于实时竞价机制可以协助互联网媒体获得更高的收入。&lt;/p&gt;&lt;p&gt;相对于互联网企业，运营商在RTB最大的优势在于其拥有网络管道优势上的大数据，除了客户的基本属性之外，还有大量的、实时的客户互联网行为数据;客户洞察，即基于运营商的数据能为行业客户提供了解其自身用户的一面窗口，完善客户画像标签体系、打破信息不对称，帮助行业客户加强自身客户的深入洞察。&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicwIiaGfBzgUhicKe6mQSMLucH9Adia1bMJAdom6ERAVuiamTlAJvB0ncAWw/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;图5 运营商数据最有价值的三大应用领域&lt;/center&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;运营商大数据跨界运营落地的关键是要建立运营商数据跨界运营平台，数据产品设计与运营是运营商数据价值释放的关键。&lt;/span&gt;该数据服务平台承载的任务是运营商数据的深度加工与分析展现(如图6)，最终以B/S架构的形成SaaS服务，为行业客户提供三个层面的价值：告诉客户他们所不知不知道的(信息价值)、告诉客户他们可以做什么(决策价值)、帮助客户做他们不能做到的(操作价值)。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic2RnZBKoyYT65V0xh2MyMO3fHibicNbQfsF6eKWMqcaospueeogRPhfFg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;图6 数据跨界运营平台的业务逻辑与价值实现&lt;/center&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;作为第三方，为深度嵌入行业客户的业务价值链，建议与运营商采取深度合作运营的模式：即第三方与运营商形成战略合作关系&lt;/span&gt;，在运营商的数据环境下，搭建开放的数据挖掘平台，运营商输出数据、提供存储能力和计算能力，第三方公司在这个平台上进行数据挖掘建模与数据产品加载工作，数据建模成果、数据产品应用输出的收益由运营商和第三方公司共享。在此模式下，第三方获取运营商数据，并对运营商数据进行深度加工，形成有行业意义的数据产出物，并以SaaS服务的方式提供给行业客户，最终实现多方共赢的局面(如图7)。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic1rfEz8VLWeFlRhic7R1n3aYT4hRc2FM99UsgEJJm0F9nsdBQeCcyKAg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图7 深度合作模式&lt;/p&gt;&lt;p&gt;基于运营商数据政策的限制，应采取的技术架构如下图8：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicBKRzYj8wEGkSVacErYyPGErzNqyoROHqSuJ8hliaIFIxdEYy7SZCZzA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图8 跨界运营平台的技术架构&lt;/p&gt;&lt;p&gt;运营商大数据跨界运营是一个比较难短期见效的市场，需要持续关注、耐心经营。&lt;span&gt;做好这块市场需要跨越四道障碍：数据依赖、用户隐私、商业模式和无缝对接&lt;/span&gt;(如图9)。&lt;/p&gt;&lt;p&gt;数据依赖指的是第三方对运营商数据有较强的依赖关系，一旦运营商掐住了数据管道，该模式的可持续性就存在很大的风险;&lt;/p&gt;&lt;p&gt;用户隐私是指当前环境下，如何合理有效的做到万无一失的避免用户信息泄露、保障信息安全，理论上是没有问题的，但实际上还是面临很多的不确定性;&lt;/p&gt;&lt;p&gt;商业模式是指目前仅仅与运营商在数据层面开展合作，对运营商自身的主营业务没有形成有效的刺激，这种业务模式对运营商的吸引力还是有限，需要寻求更多的、更好的商业模式;&lt;/p&gt;&lt;p&gt;无缝对接指的是在实际落地过程中，要对接多个客户、多个平台，要打通业务链条还是存在很多困难的，需要参与各方精诚协作，才可能克服困难、实现突破。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicKP5FdCk5NILDXtnwwiaibYIMDsj3GdyRmy7AMFPpCJ3KNwSjWnabd00Q/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图9 运营商数据跨界运营需跨越四道障碍&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;五、结束语&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;运营商大数据跨界运营是一个全新的领域，虽然参与方都处于步履蹒跚的状态，但广阔的前景仍然吸引着众多参与方在积极探索、大胆创新。大数据需要边干边学、实践中调整，就如站在河边永远学不会游泳一样，运营商大数据跨界运营的实践比什么都重要。先合作试点，在项目中摸索出合作模式和解决方案，在解决方案的基础上提炼出数据产品，专心、专注、创新运营，才可能实现从0到1、从1到N。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 22 Sep 2016 09:39:11 +0800</pubDate>
    </item>
    <item>
      <title>GBDT：梯度提升决策树</title>
      <link>http://www.iwgc.cn/link/2789166</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicJpAM6gGnypLSPtV9dybjbw7sE8fmsicFZG0R22IMohyonicaq0v2XNdw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：SiyueLin&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;综述&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;GBDT(Gradient Boosting Decision Tree) 又叫 MART(Multiple Additive Regression Tree)，是一种迭代的决策树算法，该算法由多棵决策树组成，所有树的结论累加起来做最终答案。它在被提出之初就和SVM一起被认为是泛化能力较强的算法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;GBDT中的树是回归树(不是分类树)，GBDT用来做回归预测，调整后也可以用于分类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;GBDT的思想使其具有天然优势可以发现多种有区分性的特征以及特征组合。业界中，Facebook使用其来自动发现有效的特征、特征组合，来作为LR模型中的特征，以提高 CTR预估(Click-Through Rate Prediction)的准确性(详见参考文献5、6);GBDT在淘宝的搜索及预测业务上也发挥了重要作用(详见参考文献7)。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;一、Regression Decision Tree：回归树&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;回归树总体流程类似于分类树，区别在于，回归树的每一个节点都会得一个预测值，以年龄为例，该预测值等于属于这个节点的所有人年龄的平均值。分枝时穷举每一个feature的每个阈值找最好的分割点，但衡量最好的标准不再是最大熵，而是最小化平方误差。也就是被预测出错的人数越多，错的越离谱，平方误差就越大，通过最小化平方误差能够找到最可靠的分枝依据。分枝直到每个叶子节点上人的年龄都唯一或者达到预设的终止条件(如叶子个数上限)，若最终叶子节点上人的年龄不唯一，则以该节点上所有人的平均年龄做为该叶子节点的预测年龄。(引用自一篇博客，详见参考文献3)&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicRVjv78NLXjdZzBMM6EJhUVmqubA9WiaSttcevqqyPXgOXr1WmCRp1OA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;回归树示例&lt;/p&gt;&lt;p&gt;回归树算法如下图(截图来自《统计学习方法》5.5.1 CART生成)：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipicia6P1tvsAIiaaHWP574iavPSMsbLDaOf2UBicPibKKichCWsdEGYM1QcUPjA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;回归树生成算法&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;二、Boosting Decision Tree：提升树算法&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;提升树是迭代多棵回归树来共同决策。当采用平方误差损失函数时，每一棵回归树学习的是之前所有树的结论和残差，拟合得到一个当前的残差回归树，残差的意义如公式：&lt;span&gt;残差 = 真实值 - 预测值 。&lt;/span&gt;提升树即是整个迭代过程生成的回归树的累加。&lt;/p&gt;&lt;p&gt;举个例子，参考自一篇博客(参考文献 4)，该博客举出的例子较直观地展现出多棵决策树线性求和过程以及残差的意义。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;训练一个提升树模型来预测年龄：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;训练集是4个人，A，B，C，D年龄分别是14，16，24，26。样本中有购物金额、上网时长、经常到百度知道提问等特征。提升树的过程如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicXYPJorSE3fk8TsRibwPSod0S10iaNIV33FVsZkBTfa5MzbPiav9Nc57RQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;提升树示例&lt;/p&gt;&lt;p&gt;该例子很直观的能看到，预测值等于所有树值得累加，如A的预测值 = 树1左节点 值 15 + 树2左节点 -1 = 14。&lt;/p&gt;&lt;p&gt;因此，给定当前模型 fm-1(x)，只需要简单的拟合当前模型的残差。现将回归问题的提升树算法叙述如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicQ7JEsJicviayFHFHUYd9crgtRuoCIuIj9Q58dCCC15RkwnQYtYnvWw0w/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;提升树算法&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;三、Gradient Boosting Decision Tree：梯度提升决策树&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;提升树利用加法模型和前向分步算法实现学习的优化过程。当损失函数时平方损失和指数损失函数时，每一步的优化很简单，如平方损失函数学习残差回归树。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicRM84DwND21Mka9fLw19SVXFLbTP0iaVHkHI5qiaye4S9ehQXGUz5H4UA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;损失函数列表&lt;/p&gt;&lt;p&gt;但对于一般的损失函数，往往每一步优化没那么容易，如上图中的绝对值损失函数和Huber损失函数。针对这一问题，Freidman提出了梯度提升算法：利用最速下降的近似方法，即利用损失函数的负梯度在当前模型的值，作为回归问题中提升树算法的残差的近似值，拟合一个回归树。(注：鄙人私以为，与其说负梯度作为残差的近似值，不如说残差是负梯度的一种特例)算法如下(截图来自《The Elements of Statistical Learning》)：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicicHiabcNfAVSaBiagcsexmpwQl21JABNe4zyPr1sP30ib89tEkFp5EU0tg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;梯度提升决策树算法&lt;/p&gt;&lt;p&gt;&lt;strong&gt;算法步骤解释：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1、初始化，估计使损失函数极小化的常数值，它是只有一个根节点的树，即ganma是一个常数值。&lt;/p&gt;&lt;p&gt;2、&lt;/p&gt;&lt;p&gt;(a)计算损失函数的负梯度在当前模型的值，将它作为残差的估计&lt;/p&gt;&lt;p&gt;(b)估计回归树叶节点区域，以拟合残差的近似值&lt;/p&gt;&lt;p&gt;(c)利用线性搜索估计叶节点区域的值，使损失函数极小化&lt;/p&gt;&lt;p&gt;(d)更新回归树&lt;/p&gt;&lt;p&gt;3、得到输出的最终模型 f(x)&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;四、重要参数的意义及设置&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;推荐GBDT树的深度：6;(横向比较：DecisionTree/RandomForest需要把树的深度调到15或更高)&lt;/p&gt;&lt;p&gt;以下摘自知乎上的一个问答(详见参考文献8)，问题和回复都很好的阐述了这个参数设置的数学原理。&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问】xgboost/gbdt在调参时为什么树的深度很少就能达到很高的精度?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;用xgboost/gbdt在在调参的时候把树的最大深度调成6就有很高的精度了。但是用DecisionTree/RandomForest的时候需要把树的深度调到15或更高。用RandomForest所需要的树的深度和DecisionTree一样我能理解，因为它是用bagging的方法把DecisionTree组合在一起，相当于做了多次DecisionTree一样。但是xgboost/gbdt仅仅用梯度上升法就能用6个节点的深度达到很高的预测精度，使我惊讶到怀疑它是黑科技了。请问下xgboost/gbdt是怎么做到的?它的节点和一般的DecisionTree不同吗?&lt;/p&gt;&lt;p&gt;【答】&lt;/p&gt;&lt;p&gt;这是一个非常好的问题，题主对各算法的学习非常细致透彻，问的问题也关系到这两个算法的本质。这个问题其实并不是一个很简单的问题，我尝试用我浅薄的机器学习知识对这个问题进行回答。&lt;/p&gt;&lt;p&gt;一句话的解释，来自周志华老师的机器学习教科书( 机器学习-周志华)：Boosting主要关注降低偏差，因此Boosting能基于泛化性能相当弱的学习器构建出很强的集成;Bagging主要关注降低方差，因此它在不剪枝的决策树、神经网络等学习器上效用更为明显。&lt;/p&gt;&lt;p&gt;随机森林(random forest)和GBDT都是属于集成学习(ensemble learning)的范畴。集成学习下有两个重要的策略Bagging和Boosting。&lt;/p&gt;&lt;p&gt;Bagging算法是这样做的：每个分类器都随机从原样本中做有放回的采样，然后分别在这些采样后的样本上训练分类器，然后再把这些分类器组合起来。简单的多数投票一般就可以。其代表算法是随机森林。Boosting的意思是这样，他通过迭代地训练一系列的分类器，每个分类器采用的样本分布都和上一轮的学习结果有关。其代表算法是AdaBoost, GBDT。&lt;/p&gt;&lt;p&gt;其实就机器学习算法来说，其泛化误差可以分解为两部分，偏差(bias)和方差(variance)。这个可由下图的式子导出(这里用到了概率论公式D(X)=E(X^2)-[E(X)]^2)。偏差指的是算法的期望预测与真实预测之间的偏差程度，反应了模型本身的拟合能力;方差度量了同等大小的训练集的变动导致学习性能的变化，刻画了数据扰动所导致的影响。这个有点儿绕，不过你一定知道过拟合。&lt;/p&gt;&lt;p&gt;如下图所示，当模型越复杂时，拟合的程度就越高，模型的训练偏差就越小。但此时如果换一组数据可能模型的变化就会很大，即模型的方差很大。所以模型过于复杂的时候会导致过拟合。&lt;/p&gt;&lt;p&gt;当模型越简单时，即使我们再换一组数据，最后得出的学习器和之前的学习器的差别就不那么大，模型的方差很小。还是因为模型简单，所以偏差会很大。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicXXbu83on1TdKZxENZ9vL00akphXvvCB17Gibu2eaibaiabALibayr7SG1g/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;模型复杂度与偏差方差的关系图&lt;/p&gt;&lt;p&gt;也就是说，当我们训练一个模型时，偏差和方差都得照顾到，漏掉一个都不行。&lt;/p&gt;&lt;p&gt;对于Bagging算法来说，由于我们会并行地训练很多不同的分类器的目的就是降低这个方差(variance) ,因为采用了相互独立的基分类器多了以后，h的值自然就会靠近.所以对于每个基分类器来说，目标就是如何降低这个偏差(bias),所以我们会采用深度很深甚至不剪枝的决策树。&lt;/p&gt;&lt;p&gt;对于Boosting来说，每一步我们都会在上一轮的基础上更加拟合原数据，所以可以保证偏差(bias),所以对于每个基分类器来说，问题就在于如何选择variance更小的分类器，即更简单的分类器，所以我们选择了深度很浅的决策树。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;五、拓展&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;最近引起关注的一个Gradient Boosting算法：xgboost，在计算速度和准确率上，较GBDT有明显的提升。xgboost 的全称是eXtreme Gradient Boosting，它是Gradient Boosting Machine的一个c++实现，作者为正在华盛顿大学研究机器学习的大牛陈天奇 。xgboost最大的特点在于，它能够自动利用CPU的多线程进行并行，同时在算法上加以改进提高了精度。它的处女秀是Kaggle的 希格斯子信号识别竞赛，因为出众的效率与较高的预测准确度在比赛论坛中引起了参赛选手的广泛关注。值得我们在GBDT的基础上对其进一步探索学习。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1、《The Elements of Statistical Learning》&lt;/p&gt;&lt;p&gt;2、《统计学习方法》&lt;/p&gt;&lt;p&gt;3、&amp;nbsp;分类树与回归树的区别&lt;/p&gt;&lt;p&gt;4、&amp;nbsp;迭代决策树入门教程&lt;/p&gt;&lt;p&gt;5、&amp;nbsp;CTR预估中GBDT与LR融合方案&lt;/p&gt;&lt;p&gt;6、Treelink算法介绍&lt;/p&gt;&lt;p&gt;7、&amp;nbsp;为什么xgboost/gbdt在调参时为什么树的深度很少就能达到很高的精度？&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 22 Sep 2016 09:39:11 +0800</pubDate>
    </item>
    <item>
      <title>实战 | 数据建模那点事儿</title>
      <link>http://www.iwgc.cn/link/2774493</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBwqOQQBicFRFeeb57wJz3iaKCq8c5L7cZ9YAYdiaNHVp7CWF4yglw8lfow/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;作者：陈丹奕&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文由 知乎 陈丹奕授权发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;今天要说内容是建模。为啥我作为一个数学能力并不强的人要在这献丑讲建模的事呢？其实我的目的很简单，就是为了告诉大家一个事实：数据分析中的建模，并没有想象中那么高深莫测，人人都有机会做出自己的模型。&lt;/p&gt;&lt;h1 data-mce-style="text-align: center;" style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal; text-align: center;"&gt;&lt;span&gt;第一部分：数据建模理论和逻辑&lt;/span&gt;&lt;/h1&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;span&gt;&lt;strong&gt;一、从数据分析的定义开始&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;维基百科对数据分析的定义如下：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Analysis of data&lt;/strong&gt;&amp;nbsp;is a process of inspecting, cleaning, transforming, and modeling data with the goal of discovering useful information, suggesting conclusions, and supporting decision making. Data analysis has multiple facets and approaches, encompassing diverse techniques under a variety of names, in different business, science, and social science domains.&lt;br/&gt;（来源：Data analysis&lt;em class="icon-external"&gt;&lt;/em&gt;）&lt;/p&gt;&lt;p&gt;简单翻译：数据分析是一个包含数据检验、数据清洗、数据重构，以及数据建模的过程，目的在于发现有用的信息，有建设性的结论，辅助决策的制定。数据分析有多种形式和方法，涵盖了多种技术，应用于商业、科学、社会学等多个不同的领域。&lt;/p&gt;&lt;p&gt;和上篇文章中我画的图对比一下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBa60NAZzrMsCOLB5MbLDqEbLFRMydUAnWJTibmzSdO0WUKTb72icLgO7Q/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我在上篇文章中为了让初学者更容易走通全流程，简化了数据清洗的过程，实际上数据清洗绝非一次完成，“检验-清洗-检验”的过程可能会重复数次乃至数十次。&lt;/p&gt;&lt;p&gt;而建模呢？再次引用维基上对数据建模的定义：&lt;/p&gt;&lt;p&gt;Data modeling is a process used to define and analyze data requirements needed to support the business processes within the scope of corresponding information systems in organizations. Therefore, the process of data modeling involves professional data modelers working closely with business stakeholders, as well as potential users of the information system.（来源：Data modeling&lt;em class="icon-external"&gt;&lt;/em&gt;）&lt;br/&gt;简单翻译：数据建模是一个用于定义和分析在组织的信息系统的范围内&lt;strong&gt;支持商业流程&lt;/strong&gt;所需的数据要求的过程。因此，数据建模的过程需要专业建模师与商业人员和信息系统潜在用户的紧密合作。这段话的定义更偏向信息系统和商业数据建模，我之所以在此引用这段话，是为了明确接下来的讨论内容主要方向是商业数据分析和建模，至于科学研究方向的数据建模，不在这篇文章的讨论范围以内。&lt;/p&gt;&lt;p&gt;请注意上边这段话中的一个核心：&lt;strong&gt;支持商业流程。&lt;/strong&gt;商业数据建模，乃至商业数据分析，其最终目的都是要支持某种商业流程，要么优化原有流程，提高各部分效率；要么重构原有流程，减少步骤；要么告诉决策者，哪些流程改造方向是错误的，以避免走错路。&lt;strong&gt;最终的目标，一定是提升效率。但在不同的情况下，提升效率的方式也是不同的，因此在每个模型建立时，都需要确定其解决的具体目标问题。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;再往前走一步，数学—主要是统计学，在建模的过程中又扮演什么样的角色呢？继续引用维基：&lt;/p&gt;&lt;p&gt;Mathematical formulas or models called algorithms may be applied to the data to identify relationships among the variables, such as correlation or causation. In general terms, models may be developed to evaluate a particular variable in the data based on other variable(s) in the data, with some residual error depending on model accuracy (i.e., Data = Model + Error)（来源：Data modeling&lt;em class="icon-external"&gt;&lt;/em&gt;）&lt;/p&gt;&lt;p&gt;简单翻译：数学公式或模型称为算法，可应用于数据以确定变量之间的关系，如相关性或因果关系。在一般情况下，模型开发出来后用于评估一个特定的变量与数据中其他其他变量的关系，根据模型的准确性不同，这些关系中会包含残差（即，数据=模型+错误）&lt;/p&gt;&lt;p&gt;这段描述很明确，&lt;strong&gt;统计学在数据建模的过程中，主要用于帮助我们找出变量之间的关系，并对这种关系进行定量的描述，输出可用于数据集的算法。&lt;/strong&gt;一个好的数据模型，需要通过多次的测试和优化迭代来完成。&lt;/p&gt;&lt;p&gt;综上，给出一个我认为的“数据建模”定义：&lt;strong&gt;数据集+商业目标+算法+优化迭代= 数据建模。定义中的每一部分都必不可少。&lt;/strong&gt;&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;span&gt;&lt;strong&gt;二、数据模型的建立过程&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;照例，先上流程图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBvjrdAMYHXGTpibKlibcPxtzc0PMHDNIHg3VymLjFfI8Jrvn0MQlOjQ6A/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上图的流程颜色对应数据分析全流程，为了方便大家阅读，我把全流程图再贴一次：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBa60NAZzrMsCOLB5MbLDqEbLFRMydUAnWJTibmzSdO0WUKTb72icLgO7Q/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;接下来，我重点解读明黄色（浅黄？）部分的内容：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择变量与重构变量&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在进行建模之前，首先要考虑的是使用哪些变量来建立模型，需要从业务逻辑和数据逻辑两个方面来考虑：&lt;/p&gt;&lt;p&gt;业务逻辑：变量基于收集到的数据，而数据在收集时，会产生与业务层面相关的逻辑，比如在汽车参数中，一旦我们定义了“家用轿车”这个类别，那么无论什么品牌什么车型，“轮胎数量（不计备胎）”这个变量就有99%以上几率为4……当然在接下来的建模中，我们不会选择这个变量。这一类情况是业务知识来告诉我们哪些变量可以选择，哪些不能选择。&lt;/p&gt;&lt;p&gt;数据逻辑：通常从数据的完整性、集中度、是否与其他变量强相关（甚至有因果关系）等角度来考虑，比如某个变量在业务上很有价值，但缺失率达到90%，或者一个非布尔值变量却集中于两个值，那么这个时候我们就要考虑，加入这个变量是否对后续分析有价值。&lt;/p&gt;&lt;p&gt;我个人认为，在选择变量时，业务逻辑应该优先于数据逻辑，盖因业务逻辑是从实际情况中自然产生，而建模的结果也要反馈到实际中去，因此选择变量时，业务逻辑重要程度相对更高。&lt;/p&gt;&lt;p&gt;而在变量本身不适合直接拿来建模时，例如调查问卷中的满意度，是汉字的“不满意”“一般”“满意”，那么需要将其重构成“1”（对应不满意）“2”（对应一般）“3”（对应满意）的数字形式，便于后续建模使用。&lt;/p&gt;&lt;p&gt;除这种重构方式之外，将变量进行单独计算（如取均值）和组合计算（如A*B）也是常用的重构方法。其他的重构方法还有很多种，在此不一一阐述。&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择算法&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们在建模时，目标是解决商业问题，而不是为了建模而建模，故此我们需要选择适合的算法。常用建模算法包括相关、聚类、分类（决策树）、时间序列、回归、神经网络等。&lt;/p&gt;&lt;p&gt;以对消费者的建模为例，举一些场景下的常用算法对应：&lt;/p&gt;&lt;p&gt;划分消费者群体：聚类，分类；&lt;/p&gt;&lt;p&gt;购物篮分析：相关，聚类；&lt;/p&gt;&lt;p&gt;购买额预测：回归，时间序列；&lt;/p&gt;&lt;p&gt;满意度调查：回归，聚类，分类；&lt;/p&gt;&lt;p&gt;等等。&lt;/p&gt;&lt;p&gt;确定算法后，要再看一下变量是否满足算法要求，如果不满足，回到选择/重构变量，再来一遍吧。如果满足，进入下一步。&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;设定参数&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;算法选定后，需要用数据分析工具进行建模。针对不同的模型，需要调整参数，例如聚类模型中的K-means算法，需要给出希望聚成的类别数量，更进一步需要给出的起始的聚类中心和迭代次数上限。&lt;/p&gt;&lt;p&gt;这些参数在后续测试中会经过多次调整，很少有一次测试成功的情况，因此请做好心理准备。&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;加载算法与测试结果&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;算法跑完之后，要根据算法的输出结果来确定该算法是否能够解决问题，比如K-means的结果不好，那么考虑换成系统聚类算法来解决。或者回归模型输出的结果不满足需求，考虑用时间序列来做。&lt;/p&gt;&lt;p&gt;如果不需要换算法，那么就测试一下算法输出的结果是否有提升空间，比如聚类算法中指定聚类结果包含4类人群，但发现其中的两类特征很接近，或者某一类人群没有明显特征，那么可以调整参数后再试。&lt;/p&gt;&lt;p&gt;在不断的调整参数，优化模型过程中，模型的解释能力和实用性会不断的提升。当你认为模型已经能够满足目标需求了，那就可以输出结果了。&lt;strong&gt;一个报告，一些规则，一段代码，都可能成为模型的输出。&lt;/strong&gt;在输出之后，还有最后一步：接收业务人员的反馈，看看模型是否解决了他们的问题，如果没有，回到第一步，再来一次吧少年……&lt;/p&gt;&lt;p&gt;以上，就是建模的一般过程。如果你有些地方觉得比较生涩，难以理解，也没有关系。下一篇专栏中，我将向你们介绍一个具体的数据模型，我会对建模的过程一步步进行拆解，力求简明易懂。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBnwEibic8CxuemickkvI4hcm1IN30rODvFQgNT2x1jERzypWia1QW5Riaqnw/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;h1 data-mce-style="text-align: center;" style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal; text-align: center;"&gt;&lt;span&gt;第二部分：数据建模的应用&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;我写了个建模的流程，有过建模经验的人自然懂，没有经验的各位也不要着急，这次我以一个真实模型为例，给大家详细讲述建模的各个步骤。照例，先上流程图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBxpepZNM5T7t4WTRhCLruLknHU9gzicKzic6ic5e5oCDKIK7n3BKuGpLaA/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;大家可以看到，这个图是由我之前文章中的两张图拼合而来，而我今天讲的这个真实模型，将把图中所有的流程都走一遍，保证一个步骤都不漏。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 0：项目背景&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;话说这个项目跟我加入百度有直接关系……&lt;/p&gt;&lt;p&gt;2013年的最后一天，我结束了在三亚的假期，准备坐飞机回家，这时候接到一个知乎私信，问我对百度的一个数据科学家（其实就是数据分析师啦）职位是否感兴趣，我立刻回信，定了元旦假期以后去面试。两轮面试过后，面试官——也是我加入百度后的直属Leader——打电话给我，说他们对我的经历很满意，但是需要我给他们一份能体现建模能力的报告。&lt;/p&gt;&lt;p&gt;按说这也不是一件难事，但我翻了翻电脑后发现一个问题：我从上家公司离职时，为了装13，一份跟建模相关的报告文件都没带……最后双方商定，我有一个星期时间来做一份报告，这份报告决定了我是否能加入百度。&lt;/p&gt;&lt;p&gt;那么，是时候展示我的技术了！我的回合，抽卡！&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 1：目标确定&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;看看报告的要求：&lt;/p&gt;&lt;p&gt;&lt;em&gt;数据最好是通过抓取得来，需要用到至少一种（除描述统计以外）的建模技术，最好有数据可视化的展示&lt;/em&gt;&lt;/p&gt;&lt;p&gt;看来是道开放题，那么自然要选择一个我比较熟悉的领域，因此我选择了……《二手主机游戏交易论坛用户行为分析》&lt;/p&gt;&lt;p&gt;为啥选这个呢？你们看了我那么多的Mario图，自然知道我会选主机游戏领域，但为什么是二手？这要说到我待在国企的最后半年，那时候我一个月忙三天，剩下基本没事干，因此泡在论坛上倒卖了一段时间的二手游戏……&lt;/p&gt;&lt;p&gt;咳咳……总之，目标就确定了：&lt;strong&gt;分析某二手主机游戏交易论坛上的帖子，从中得出其用户行为的描述，为用户进行分类，输出洞察报告。&lt;/strong&gt;&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 2：数据获取&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;简单来说，就是用python写了个定向爬虫，抓了某个著名游戏论坛的二手区所有的发帖信息，包括帖子内容、发帖人信息等，基本上就是长这个样子：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBuzicFObGmLuV9AD9HypRvYV0HAHeZPyQCeTicKTVsxaQjibHkV1vuiaRnw/0?wx_fmt=png"/&gt;（打码方式比较简单粗暴，请凑合看吧……）&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 3：数据清洗&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这个模型中的数据清洗，主要是洗掉帖子中的无效信息，包括以下两类：&lt;/p&gt;&lt;p&gt;1、论坛由于其特殊性，很多人成交后会把帖子改成《已出》等标题，这一类数据需要删除：&lt;/p&gt;&lt;p&gt;2、有一部分人用直接贴图的方式放求购信息，这部分体现为只抓到图片链接，需要删除。&lt;/p&gt;&lt;p&gt;数据清洗结束了么？其实并没有，后边会再进行一轮清洗……不过到时再说。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 4：数据整理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;用上面的那些帖子数据其实是跑不出啥结果的，我们需要把数据整理成可以进一步分析的格式。&lt;/p&gt;&lt;p&gt;首先，我们给每条帖子打标签，标签分为三类：行为类型（买 OR 卖 OR 换），目标厂商（微软 OR 索尼 OR 任天堂），目标对象（主机 OR 游戏软件）。打标签模式是”符合关键词—打相应标签“的方法，关键词表样例如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB9iaDUtg2I9c7vyG1VbcVzaGhODWfmNicWiaY3SgMqWBOYv3OVB6WhiaM0Q/0?wx_fmt=png"/&gt;（主机掌机那个标签后来我在实际操作时没有使用）&lt;/p&gt;&lt;p&gt;打完标签之后，会发现有很多帖子没有打上标签，原因有两种：一是关键词没有涵盖所有的产品表述（比如三公主这种昵称），二是有一部分人发的帖子跟买卖游戏无关……&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB8HRtwrJGf8RunsRMYb7zpIQlTLj2CLj34CCHsaEGdGcAt0g0PBHtdQ/0?wx_fmt=png"/&gt;这让人怎么玩……&lt;strong&gt;第二次数据清洗开始&lt;/strong&gt;，把这部分帖子也洗掉吧。&lt;/p&gt;&lt;p&gt;其次，我们用发帖用户作为视角，输出一份用户的统计表格，里边包含每个用户的发帖数、求购次数、出售次数、交换次数、每一类主机/游戏的行为次数等等，作为后续搭建用户分析模型之用。表格大概长这个样子：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBbMGOReoI8hw3wGcedatQfpvQv6Qtt8v96HqueC0PUaq2licFzYlhAWQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;之后这个表的列数会越来越多，因为数据重构的工作都在此表中进行。&lt;/p&gt;&lt;p&gt;整理之后，我们准备进行描述统计。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 5 &amp;amp; 6：描述统计 &amp;amp; 洞察结论&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;描述统计在这个项目中的意义在于，描述这一社区的二手游戏及主机市场的基本情况，为后续用户模型的建立提供基础信息。&lt;/p&gt;&lt;p&gt;具体如何进行统计就不说了，直接放成品图，分别是从各主机市场份额、用户相互转化情况、地域分布情况进行的洞察。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB4ribM6PjrdSEV7XXsonznPWkEh3ZO9iawp2IOpwPINey78KorK6MUeCg/0?wx_fmt=png"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBe1MLMvaicA8va0sjFZ0F4rAQkAC0Z1JqTPwiaiagRrhntbibBQSNzzJC4g/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBwSuIiaFRPMf45OfTvXpDAyp593yZKuO8dWV3qDLrFUZ2YC8tY1ib1XDg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 7 &amp;amp; 8：选择变量 &amp;amp; 选择算法&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;因为我要研究的是这些用户与二手交易相关的行为，因此初步选择变量为发帖数量、微软主机拥有台数、索尼主机拥有台数、任天堂主机拥有台数。&lt;/p&gt;&lt;p&gt;算法上面，我们的目标是将用户分群，因此选择聚类，方法选择最简单的K-means算法。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 9 &amp;amp; 10：设定参数 &amp;amp; 加载算法&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;K-means算法除了输入变量以外，还需要设定聚类数，我们先拍脑袋聚个五类吧！&lt;/p&gt;&lt;p&gt;（别笑，实际操作中很多初始参数都是靠拍脑袋得来的，要通过结果来逐步优化）&lt;/p&gt;&lt;p&gt;看看结果：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBtHKHN1XcoiaaVdcqySHKOyFH99co0BUbRctC5cueMSlSC18Iric5qZVQ/0?wx_fmt=png"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBFh251HQTYUQUibd3c9BRZ9Qwhbee0BrvEKicTVkTro58jjAelnKPzrag/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;第一类别的用户数跟总体已经很接近了，完全没有区分度啊！&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 7‘ &amp;amp; 8’ &amp;amp; 9‘ &amp;amp; 10’ &amp;amp; 11：选择变量 &amp;amp; 选择算法 &amp;amp;设定参数 &amp;amp; 加载算法 &amp;amp;重构变量&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这一节你看标题都这么长……&lt;/p&gt;&lt;p&gt;既然我们用原始值来聚类的结果不太好，那么我把原始值重构成若干档次，比如发帖1-10的转换为1,10-50的转换为2，依次类推，再聚一次看看结果。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBibZaARNRvicRNicLMO4P4GA5BGeAP9kjVbuc7rCL7pYy9gHFXov8ukoqg/0?wx_fmt=png"/&gt;哦哦！看上去有那么点意思了！不过有一类的数量还是有一点少，我们聚成四类试试：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB1GuKmiahhxhFz7LKpmuqIlacGLpNCD035KHwDBMQzzicAn8TZl446A1Q/0?wx_fmt=png"/&gt;哦哦，完美！ 我们运气不错，一次变量重构就输出了一个看上去还可以的模型结果，接下来去测试一下吧。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 12：结果测试&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;测试过程中，很重要的一步是要看模型的可解释性，如果可解释性较差，那么打回重做……&lt;/p&gt;&lt;p&gt;接下来，我们看看每一类的统计数据：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBMhFh7xSXawgHExWU9wUAp1Z61S9QPAUdkMK7dIEXicibYQ11SNn8kFZw/0?wx_fmt=png"/&gt;这个表出来以后，基本上可以对我们聚类结果中的每一类人群进行解读了。结果测试通过！&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 13 &amp;amp; 14 &amp;amp; 15：输出规则 &amp;amp; 模型加载 &amp;amp; 报告撰写&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这个模型不用回朔到系统中，因为仅仅是一个我们用来研究的模型而已。因此，输出规则和模型加载两步可以跳过，直接进入报告撰写。&lt;/p&gt;&lt;p&gt;聚类模型的结果可归结为下图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBla6Ria4b6TsmRI9K1M3PZaiaPEo7tQLG20q0o0ylTUu0ibSia7ibCFxGGgg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;眼熟不？在我的第二篇专栏文章第一份数据报告的诞生 - 一个数据分析师的自我修养&amp;nbsp;&amp;nbsp;中，我用这张图来说明了洞察结论的重要性，现在你们应该知道这张图是如何得来的了。&lt;/p&gt;&lt;p&gt;撰写报告的另外一部分，在描述统计-洞察结论的过程中已经提到了，把两部分放在一次，加上背景、研究方法等内容，就是完整的报告啦！&lt;/p&gt;&lt;p&gt;最后附送几张各类用户发帖内容中的关键词词云图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBVErBSugSqW8u9BKpgSerzXKkic9mTWqaALbm1f7VdY0EwCfgoYgJWbA/0?wx_fmt=png"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB9PZ92LrQ2crX3icibZo30Wls7pw19gt3sIRY9ya1I90v9YhflfC1vt7w/0?wx_fmt=png"/&gt;&lt;br/&gt;那么，这篇文章就到此结束了，最后的最后，公布一下我做这份报告用到的工具：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBx9MJ4EnHZjzO2zjYIVcP0qUPqUeRWDgzTfbbLXckxOgvFBEme6J8qQ/0?wx_fmt=png"/&gt;大家可以看到，要当一个数据分析师，要用到很多类别的工具，多学一点总是没有坏处的，在此与大家共勉。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 21 Sep 2016 09:44:21 +0800</pubDate>
    </item>
    <item>
      <title>读后感| 《浪潮之巅》：没有任何时候可以高枕无忧</title>
      <link>http://www.iwgc.cn/link/2774494</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBeTHnqXS7mtgdFUFouJTmGUGN8BexxDJzhg4bdyS6WxtJKUysF673yg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：Heidi格物志&lt;/p&gt;&lt;p&gt;终于花了断断续续一周时间，把书架上积满灰尘的《浪潮之巅》读完了……&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;【引言】&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;吴军博士在书中提到的女性CEO，基本上是悲催的：提到惠普的卡琳·菲奥莉娜——“系列错误的决定和平庸的管理才能”;提到雅虎的CEO卡罗尔·巴茨——“对于互联网这个行业是外行”，1000多页讲互联网，却连被尊称为互联网女皇的玛丽·米克尔提都没有提到。虽然为女性有点鸣不平，但有一点却得承认：如果让我选一本书陪我度过睡前半小时，我宁可选择《禅与摩托车修理技术》或者《论宗教的产生》，也不会选择《浪潮之巅》。&lt;/p&gt;&lt;p&gt;因为这里面充斥了很多我听过但总是不求甚解的词儿。而且关键是读完后，没有办法去显示自己的逼格(和男生聊，还是聊不过人家，和女生聊，大部分又听不懂)。&lt;/p&gt;&lt;p&gt;所以非常感谢本次强制性的读书任务，让我终于从书架上取下了这本刚买回来就束之高阁的积满灰尘的书，并非常认真地读完。&lt;/p&gt;&lt;p&gt;我对自己的要求比较低，读懂这本书是第一步，至于那些超越了读懂之外的“心得体会”，顶多作为beta版本吧，必须多看几遍，经常刷新、升级，才能够不断沉淀成自己的东西。&lt;/p&gt;&lt;p&gt;所以我的读书笔记里，会包含很多对于其他人都很明白的东西，请原谅我非要以自己的方式去阐释一遍。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;一. 本书讲了什么&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;提及了除机械革命外的一波又一波非串行关系的浪潮(行业变革)，通信革命，以及方兴未艾的个人电脑革命、互联网革命、信息革命、云计算革命……&lt;/p&gt;&lt;p&gt;讲了在这些浪潮中IT企业的兴衰史，每一波浪潮中，都有趁势而起的公司，经过激烈的角逐，有一些站在了该浪潮之巅，成为实质意义上的垄断者以及市场规则的制定者，也有一些虽然没有在生态链中称霸江湖，但是在某个领域却屹立不倒的领导者，这些读起来让人热血澎湃。即便是江湖霸主，然而在书中也能够读到它“不甘心”的另一面，比如微软。在个人电脑浪潮中，它虽然做到了操作系统的老大，然而在操作系统上，时刻提防着苹果，在互联网上，败给了雅虎，在搜索上，败给了GOOGLE，浏览器市场也在GOOGLE紧逼下节节败退……更可怕的是，当他在收拾眼前战场的时候，在错过了互联网机遇之后，又错过了移动互联网……然后云计算……&lt;/p&gt;&lt;p&gt;&lt;span&gt;而本书真正的重心是放到Why的剖析上，提到了很多因素，分不同的公司、时代而异，有内因(如董事会的短见)，也有外因(如华尔街、强大的竞争对手等)，也有在表面原因下的根因的进一步钻取，如不因人的意志为转移的诺威格定律、摩尔定律以及反摩尔定律，以及所谓的“基因决定论”。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;书中还用了很多的篇幅讲干货，就其中在外因上占据主导地位的华尔街、风投也进行了详尽的说明。&lt;/p&gt;&lt;p&gt;企业兴衰的结果令人震撼，书中的干货令人大开眼界，而兴衰之因的总结令人掩卷沉思。&lt;/p&gt;&lt;p&gt;吴军博士的字太多，但是图是缺乏的，所以我想用几张图去演绎我的收获。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;二. IT产业行业生态图&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;书中提到了那么多的公司，令人眼花缭乱，他们之间的关系更是错综复杂，本来是同盟的，瞬间又称为竞争对手，本来相安无事的，却瞬间狭路相逢。&lt;/p&gt;&lt;p&gt;我想，要真正读通此书，不得不去试图进一步了解IT产业，于是必须图示化帮助我自己更好理解这个大环境，还有很多不成熟的地方，姑且叫成版本0.4吧。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBynyibT32O6N05R7zP3wYvLY01tnwUOCVibpGe1bSRpOqiaVcezWyXniaMg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. 没有永恒的对手和盟友&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;看上图，一个公司可能同时在多个阵营里和不同的公司构成竞争关系，又和自己的上下游形成盟友关系。&lt;/p&gt;&lt;p&gt;而企业间的竞争关系是不断演变的，比如微软和谷歌，本来微软在个人电脑领域成为了一方霸主，时刻提放着苹果，而Google彼时也只是做做搜索，和雅虎抢占着互联网流量。而当Google开始做浏览器后，微软发现自己的互联网入口浏览器陷入了背水之战，当时剿灭网景浏览器的绝招完全不凑效。&lt;/p&gt;&lt;p&gt;企业间或许没有“独木桥”和“阳关道”之说，不禁想起了本来做电商的阿里和做社交的腾讯，大势所趋必然意味着他们之间要打上一仗。&lt;/p&gt;&lt;p&gt;盟友也有朝一日会成为对手，当初的微软还是帮苹果写软件的开发商呢?&lt;/p&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;思考：我们必须很清楚自己做的业务的竞争格局，谁是我当下的竞争对手?谁是我们的盟友?谁可能是我长远的竞争对手?识别清楚竞争对手，不是为了跟着他们亦步亦趋，而是为了超越竞争，立于不败之地。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 所谓的浪潮，真的是不可预测的吗?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;吴军博士讲，与其预测，不如说是更好适应，然而适应其实也意味着：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;是否能够比别人更早看到(不管是CEO自己的天赋、牛逼的情报调查、还是能够广纳言路、还是能够赋权给创新小团队)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;是否能够比别人更快取舍(当断不断，定受其乱)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;公司、董事会是否能够允许尽快做出调整(警惕大公司病、所谓的基因、华尔街和董事会的压力)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;所以，为了更好适应，第一条件却可能仍指向是否有更好的嗅觉、更好的感知。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;所谓的浪潮到底是什么?它真的是自然发生的吗?我宁可认为它是人为的，它之所以不可逆，是因为多种人为因素在一起发挥着合力，不是单凭一个公司的力量、一个人的力量可以抗拒，因为你对抗其实不是对抗大自然，而是对抗着你的企业赖以生存的生态环境。浪潮在短期来看是偶然的，比如如果乔布斯没有发明第一台个人电脑，是否个人电脑革命要延期呢?，又如乔布斯没有被董事会请回开创了i时代，Google是否也会放慢安卓联盟，移动互联网的浪潮也要更慢到来呢?&lt;/p&gt;&lt;p&gt;但在长期来看，又可能会发现，该来的，一定会来，只是时间早晚问题，或者只是谁来主导的问题。&lt;/p&gt;&lt;p&gt;为什么呢?&lt;/p&gt;&lt;p&gt;书中提到了几个值得我们反思思考的定律：&lt;/p&gt;&lt;p&gt;&lt;span&gt;摩尔定律：&lt;/span&gt;既有成本一定会不断下降，而且下降的速度会加快(所以我们一定会面临网速更快、计算和存储的成本不断下降的)&lt;/p&gt;&lt;p&gt;&lt;span&gt;反摩尔定律&lt;/span&gt;：企业营收的下降，促使公司要不断推陈出新、加快创新。&lt;/p&gt;&lt;p&gt;&lt;span&gt;诺威格定律&lt;/span&gt;：会促使企业不断寻求新的突破点——守，也即意味着退。&lt;/p&gt;&lt;p&gt;然而仅仅有这几个定律，只可以说明企业一定要不断变，但是说明不了为何在某段时间内可能会有什么浪潮。&lt;/p&gt;&lt;p&gt;不禁想，是否除了这几个显而易见定律，还有一个恒古至今的隐形规律，是否和人类的“贪婪”需求升级有关，本来没有网可以上的时候，大家都没有想过上网，一旦有网上了，有人就希望网更快，信息更多，可以随时享受网络……可以随时购物……可以更轻量地使用各种服务……&lt;/p&gt;&lt;p&gt;&lt;span&gt;所以，企业求变，可能归根结底，仍然是要回归到市场需求的。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;另外的求变，是在交叉的领域，比如当互联网遇到图书、当互联网遇到手机、当互联网遇到传统线下产业……&lt;/p&gt;&lt;p&gt;反正，站在马后炮的角度，看上面的图上的变革，觉得那么顺其自然。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;三. 在时间轴上去看兴衰&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;读的时候，想如果把这些公司都放到一个图表上去看看，会不会很好玩，于是就这么做了……然后我试图把我GET到的转折点标注了出来。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBib78lqvvwXnHicopQdRmL6TdRPbIEMyUIMic2I7F1RkjibqxHZlwpAtJRg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;查看大图看这里：http://photo.weibo.com/1668540465/wbphotos/large/photo_id/4020758143699381/album_id/3559802702237352&lt;/p&gt;&lt;p&gt;呈现成图的时候，觉得很幸运的是，基本上波澜壮阔的兴衰史，发生在陪伴我们成长的年代：80年代初至今。&lt;/p&gt;&lt;p&gt;令人久久无法释怀的，恐怕不是本来就没有机会，是“本来可以……”“然而却……”&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;AT&amp;amp;T，本来可以借助2000年前后的网络革命和20世纪90年代延续至今的无线通信飞跃得到绝佳的发展机会，然而却在变革中断送了性命。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;IBM，本来可以凭借雄厚的财力和技术，成为个人电脑时代的领导者，但是却彻底退出了个人电脑的舞台。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;微软，本来可以凭借操作系统江湖一霸的地位，可轻易拿下任何江山，然而却一再错过新的突破点，固守不断缩小的江山。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;雅虎，本来可以避开GOOGLE，专注于品牌广告市场，但是却陷入搜索之争，等到大梦初醒，已经为时已晚。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;惠普，本来可以凭借已有优势，成为科技领域弄潮儿，与IBM一决雌雄，然而却在一系列并购收购出卖后沦为电器公司。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;摩托罗拉，本来最有资格领导移动通信大潮，很遗憾，它只踏上一个浪尖就被诺基亚超越了。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;诺基亚，曾经的全球手机销量第一的江湖霸主，错过了新操作系统的智能手机发展，前途异常黯然。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;……&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;&amp;nbsp;思考：永远不可高枕无忧，过去的百年企业很多，而如今10年之内，一个企业可能就会从创业、成长、成熟、衰落全部历经。对于互联网企业来讲，原地踏步也即是等着淘汰的结果自然而然发生。&lt;/span&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;四. 影响企业兴衰的内外因总结&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;通过本书不断提到的总结分析，影响一个公司兴衰的内外因，大概如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBU3ODo7TFQSIkqvF8WseQGLEzncpbYKo8xQhHDTBetw0pvicPpU1IfZw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;可以说，幸运的公司是类似的，不幸的公司则各又各的不幸，幸运的公司得天时地利人和，而不幸的公司只要一个原因处崩盘则全线崩盘，所以把公司搞垮比把公司搞好太容易了。&lt;/p&gt;&lt;p&gt;但是既然是浪潮之巅，书中不会聚焦于谈各种公司败因，比如因为公关危机、董事长老婆外遇等各种因素，而是重点探讨的是一个双刃剑的原因：也即“浪潮”，比其他外因更不可抗拒。&lt;span&gt;而不同的公司因为客观规律和“内因”的双重制约，对于“浪潮”的反应、适应情况不同，而导致了不同的结局，所以最终还是从内因出发。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. CEO的作用(是被夸大的吗?)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;前段时间不知道在哪里听到一句话，说企业高层决策者的决策对公司的成败是最最重要的。&lt;/p&gt;&lt;p&gt;不知道吴军博士自己快读《浪潮之巅》后有没有同样的感觉：CEO的作用，真的有那么神奇?一个人，可以完全决定了企业不同的命运。&lt;/p&gt;&lt;p&gt;&lt;span&gt;救世主型：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;郭士纳：&lt;/strong&gt;大刀阔斧的变革让IBM明确定位而利于不败之地。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;乔布斯：&lt;/strong&gt;一旦回归，苹果就飞扬而起，开创了i时代，且辉煌至今。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;比尔·盖茨：&lt;/strong&gt;当代拿破仑，靠自己的天才谋略和商机洞察、聪明的四两拨千斤，开创了个人电脑霸主地位。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;埃里森：&lt;/strong&gt;若没有埃里森，甲骨文就是一个二流企业。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;钱伯斯：&lt;/strong&gt;让思科稳坐网络设备供应商头把交椅。&lt;/p&gt;&lt;p&gt;&lt;span&gt;扶不起的阿斗型：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;菲奥莉娜：&lt;/strong&gt;靠拆分和不合适的并购，把惠普从科技公司变成电器公司。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;高尔文：&lt;/strong&gt;不成气候的家族企业继承者，让摩托罗拉全线崩溃。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;塞寥尔：&lt;/strong&gt;无谓的扩张和莫名其妙的忽悠投资者让雅虎千疮百孔。&lt;/p&gt;&lt;p&gt;也别忽视了书中还有很多有才干但是没有挽回败局的英雄们，吴军博士认可了他们的才干，但说因为企业基因无法改变努力的结果。&lt;/p&gt;&lt;p&gt;&lt;span&gt;思考：CEO太重要。&lt;/span&gt;从浪潮之巅看过来，我们虽然可能不一定有机会成为某个浪潮之巅的企业的CEO(应该说有0.1%不到的几率吧)，但是明白这一点，还是对自己的工作影响挺大的。因为，一个小小的产品、项目，其实都可以类比为一个创业公司，而且，很多变革，宏观来看，影响的是这些大企业，从微观来看，其实已经可以影响我们日常的判断。我们作为OWNER，何尝不是CEO?我们也会关心竞争、行业趋势、市场占有率和用户使用数据，以免自己的产品被投资者砍掉(撤回资源)，也会吸纳不同的人才来共同创业。CEO就是很重要，CEO就是要做重要的决策，为此你可以广纳言听、你也可以因为天赋独断专行，你也可以根据数据让自己判断更加准确，你可以大刀阔斧进行改革也可以固守已有稳定市场谋求小小渐变…………但是有一点是非常确信的，也就是：&lt;span&gt;作为CEO，如果不想拱手让人、主动让贤，不断提升自己来带动业务成长，是至关重要的事情。&lt;/span&gt;你永远别想高枕无忧。&lt;/p&gt;&lt;p&gt;还有，虽然你可能会因为自己的性格、习惯被建议要多倾听，但是你不能因为这个而不敢做决策，把决策也放给别人或迟迟不下决定。&lt;/p&gt;&lt;p&gt;因为一个企业必须得有人控制，否则想一下AT&amp;amp;T，CEO的能力必须提升，否则想一下摩托罗拉。&lt;/p&gt;&lt;p&gt;我不太能明白的是：既然CEO这么重要，为何没有像古代打仗一样，每个CEO背后多一些军师?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. 商业模式(绝大多数下，比技术优势更重要)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;因为技术信仰而壮大的公司往往会把技术捧到天上，然后误导很多其他公司争相效仿。&lt;/p&gt;&lt;p&gt;过去我只知道GOOGLE和FACEBOOK的工程师文化，还一度和开发同学们探讨，是否能够在项目组内部也推行这样的文化。&lt;/p&gt;&lt;p&gt;但是，如今我更加深刻感知到，这里说的工程师早已不是我之前理解的工程师，而是&lt;span&gt;具备了商业头脑、创意的工程师，或者是具备了工程思维、商业头脑、创意的产品经理或者其他。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;另外，从《重新定义公司》中提到的巴斯德象限来讲(咦，今天不是要写这本书的读书笔记吧)，创意往往出在“基于应用的创新”矩阵中，如果要应用，而且追求更大的应用和市场占用，只凭借技术是不行的，所以摩托罗拉过度迷信技术而忽视了其他，而郭士纳在改革时删减了纯研究的经费。技术甚至可以因为收购而获得，而商业模式往往等到要效仿的时候，已经大势所趋不可逆转了。&lt;/p&gt;&lt;p&gt;通过商业模式而在竞争中取胜的例子，在书中有太多，比如：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Oracle:&lt;/strong&gt;&amp;nbsp;不同于IBM的卖服务，而是卖软件，仅收取必要的咨询费用，获得了IBM更多的市场份额。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;雅虎：&lt;/strong&gt;美国网景沉迷于收上网费，微软还想要收软件费用的时候，它让大家可以免费上网，但是看看广告收广告商的钱，很快成为第一互联网公司。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;惠普：&lt;/strong&gt;在呈现败局的时候，新的CEO通过改变商业模式为代销，在短短几个季度PC市场占用率超过了戴尔，排名全球第一。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Google：&lt;/strong&gt;开创的印钞机商业模式，至今前途无量。&lt;/p&gt;&lt;p&gt;&lt;span&gt;技术需要养，技术需要储备，技术需要巨大的投资，而商业模式则是可能会四两拨千斤&lt;/span&gt;，而好的商业模式是无法坐等的，这里就体现了CEO和公司高层决策者的洞察和决断力。(再回归到CEO的重要性)。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. 企业的基因(有时，不是靠牛逼的CEO和牛逼的商业模式所能改变的)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;按吴军博士引用红杉资本的话，一家公司的基因在创办的3个月内就定型了。&lt;/p&gt;&lt;p&gt;按吴军博士自己的说法，一家成型的公司改变基因的可能性确实很小。&lt;/p&gt;&lt;p&gt;他举了太多的例子，去论证了基因决定论：&lt;/p&gt;&lt;p&gt;牛逼的CEO可能各有牛逼之处，犯了特别典型错误的CEO则是个人才干和魄力不足，而被作者认为有才干但是依然以失败而告终的CEO，作者则很多总结为基因问题。比如：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;微软即使有牛逼的盖茨，依然因为基因决定了无法用MSN盈利;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;摩托罗拉和Intel之争，即使双方统帅换一个个，摩托罗拉依然无法战胜Intel;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;IBM的基因决定了他无法称霸个人电脑……&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;所以按他的结论，企业一旦成熟(也就2年之内吧，3个月太短)，就只能随波逐流，寻求渐变，而无法突破了吗?&lt;/p&gt;&lt;p&gt;那作者提到的那么多不断寻找到新的突破点的公司又是怎么产生的呢?比如Google从搜索到安卓，FaceBook从社交到云计算，亚马逊从买书的电商到云计算……&lt;/p&gt;&lt;p&gt;&lt;span&gt;我觉得作者可以讲客观规律，也可以声明企业基因的重要性，从而不断警示位高权重的人不断去审视环境，不断寻求突破&lt;/span&gt;，并形成一些机制，比如学习GOOGLE用授权给小团队的方式不断刺激创新，但是如果要发展成宿命论，似乎还是有些过于武断了。&lt;/p&gt;&lt;p&gt;摆脱宿命论，对于以下几个问题的探讨，才真的具有意义：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;企业的基因到底是怎么形成的?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;企业的基因是一定会到了某个阶段跟不上时代吗?&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在以上情况发生时，牛逼的CEO或者高层如何带领公司突破基因，突出重围?&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;或者对于这三个问题，也可以期待牛逼的人专门出个书了。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;五. 什么觉得可能不对?&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;看完了将近1000多页的书，对于很多总结不断点头，但是如果非要给自己提一个挑战，试图去想一些不对的地方，会不会有呢?&lt;/p&gt;&lt;p&gt;有个著名的书评作家说，书评原则之一是不要指责作者没有说本来就没打算说的事情，所以可能不算不对，而是自己心存困惑，比如：&lt;/p&gt;&lt;p&gt;&lt;span&gt;1. 浪潮是否真的不可预测，对于企业是否只有适应?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;如果从几个已知定律，以及结合人类需求的层次，是否有一定的预知。&lt;/p&gt;&lt;p&gt;&lt;span&gt;2. 如果不可预测，那么如何能够更快感知?如果只寄托于CEO的“嗅觉”、“灵机一动”，似乎很多成功都只是偶然。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;我倒是期待，吴军博士有新的著作可以更深剖析背后的HOW。&lt;/p&gt;&lt;p&gt;&lt;span&gt;3. 公司的决策机制&lt;/span&gt;&lt;/p&gt;&lt;p&gt;即使承认CEO的无敌重要性，我也不太相信那么多的扭转(或败或兴)，来自一个个体，如果是中国古代朝廷，我或许相信一些，因为君主拥有至高无上的权利。&lt;/p&gt;&lt;p&gt;然而在现在的企业里，CEO的决策有多少真正代表他的个人有多少是因为有效的企业管理?为何在同时强调硅谷的开放、扁平、创意文化的时候，又有那么多的因为一人意志决定的成败。这里或许有些夸大的成分。不过，我也很有兴趣能够进一步了解这些公司背后的决策团队和机制。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;写在最后：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;没有任何时候可以高枕无忧，没有任何借口可以拒绝成长。&lt;/p&gt;&lt;p&gt;大到一个公司，顷刻之间，可以从顶峰坠落，一旦错过某个机遇或者出现重大失误，就再也难以回头。&lt;/p&gt;&lt;p&gt;小到我们个人，永远无法躺在过去的成果、影响力上睡懒觉，因为所谓的浪潮，它来，或者不来，不是我们的个人意志所能改变的。&lt;/p&gt;&lt;p&gt;最后，我是计划要读第二遍的，等我读完后，再去修订以上心得。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 21 Sep 2016 09:44:21 +0800</pubDate>
    </item>
    <item>
      <title>教程 | 如何组建一支优秀的数据分析团队？</title>
      <link>http://www.iwgc.cn/link/2774495</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBv9Qjj9FHAMl72vSibL18CeIcz1WOcvXUDdyqickCg98Vy19Fj0cEvr2A/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;作者：陈丹奕&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q：数据分析人员能做什么？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A：从纷繁的数据里提炼出有价值的信息并给公司提供支持啊。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q：你怎么提炼啊？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A：写程序采集啊，清洗啊，用一定的算法计算数据内部联系，根据业务做出判断啊……&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Q：如果都是用已有的算法，这些事情为什么不能用现成的流程来做呢？或者为什么不能写成程序，让机器自己实现呢？&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;A：呃…………&lt;/p&gt;&lt;p&gt;作为一名数据分析师，刚入行的时候跟人聊天聊成这样，非常常见也非常令人不爽。但我们数据分析师是不是仅能手工操作一些算法，等着机器和算法逐步取代我们么？并不是！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;照例观点先行：数据分析不等于数据分析算法/程序，数据分析算法/程序只是分析师手中的工具，数据分析要取得成功必须依赖人的力量，数据分析师的作用在于根据对业务的理解，合理使用分析工具，完成分析目标。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;结合业务的数据分析才是科学的，一切只看计算机输出结果不考虑业务实际情况的数据分析都是无（shua）用（liu）功（mang）。计算机能实现的算法也好，程序也好，只是数据分析中的一部分；如何选择分析切入点，如何选择数据来源，如何确定算法，如何解读结论，这些机器统统做不了，需要我们数据分析师来解决。&lt;/p&gt;&lt;p&gt;观点在上边两段里已经充分展示了，接下来我要愉快的展（che）开（dan）观点内容了：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据分析通常包括几个阶段：提出/发现问题——获取并清洗数据——建模——调整优化——输出结论。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;这是一个闭环流程，每一步都需要人工参与，程序会参与中间三步，算法在建模中会用到，而数据分析的最重要两步，问题和结论，目前是不可能完全交给计算机去处理的（其实我个人认为这两步在真正的人工智能出现前，绝不可能由计算机自动处理），因此数据分析人员最大的优势，就是“经验”，也就是业务理解能力和数据分析经验。&lt;/p&gt;&lt;p&gt;详细解释一下数据分析的几个阶段：&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;span&gt;&lt;strong&gt;提出/发现问题阶段：&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;大多数时候，数据分析都是为了解决一个问题（锁定某个产品的目标客户，对同样的人群做营销活动用A方案好还是B方案好，等等），或者验证一个猜想（不让旅游者上班高峰坐地铁是不是会大幅度缓解拥挤现象，啤酒和尿布放一起是不是真的会提升啤酒的销售额，等等），总之需要达到一个目标。即使是探索性分析（拿着一大堆数据看看能不能找出点什么结论），那也需要先预设一个或多个目标作为切入点，然后在探索过程中逐步修正。&lt;/p&gt;&lt;p&gt;提出和发现问题的过程，交给计算机干不太靠谱，首先计算机不会提出问题（因为笨），其次计算机能发现的问题也一定是人已经发现了的问题（还是因为笨），需要先有人来设定规则，然后计算机才能根据规则发现问题。而数据分析师，就是设定规则的人。&lt;/p&gt;&lt;p&gt;目标和规则的设定，一定要基于业务，这样分析结果才有用，否则会得出正确但无用的结论。举个栗子，订阅报纸的数据扔给计算机去分析关联关系，看有哪些报纸可以进行组合促销，最后得出个光明日报和人民日报关联系数90%多，所以这俩报纸可以组合起来卖，问题是这俩报纸本来就是要求党政机关订阅的党报，组合起来毫无意义，该订的还是要订，不订的还是不订，这就是典型的正确但无用的分析结果。懂业务能让分析师少做这种无用功，但是计算机要想懂业务就得由人来教，教还不一定能教会，教完了又不能触类旁通（报纸的关联算法拿到电商去完全不能用啊），这样的计算机永远都不如分析师懂业务。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;获取并清洗数据：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这个阶段计算机参与的较多，分析师的工作是指出拿什么数据，拿哪些字段，数据获取到以后用哪些规则进行清洗整理。如果数据源不变，需要重复或定期进行分析时，这个阶段的规则可以固化，由计算机来自动执行，但规则仍然是由分析师来制定的。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;建模、调整优化：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这两个阶段中，分析算法出场了，描述分析、关联分析、回归、分类、聚类、时间序列，每个类别里都有一大堆的固定算法，分析师不能通过手算得出结论，需要借助封装好算法的分析工具（图形化的SPSS，命令行方式的R，等等），看来这一阶段计算机要超越分析师了！&lt;/p&gt;&lt;p&gt;等等，建模哪有这么简单，计算机解决不了的问题一大堆呢：什么时候用哪个类别的算法（该做分类还是聚类），同一类别不同算法哪个更适合当前情况（K-means还是两步聚类，这是个问题），同一个算法怎么调整参数能使效果更好（到底该把用户聚成几类呢），算法输出的结果是否正常（有一部分数据出了问题导致分析结果出现偏差）等等。这些问题计算机统统不知道耶，需要分析师来告诉它该做什么事。&lt;/p&gt;&lt;p&gt;打个比方，数据分析就是打仗，算法是机枪、大炮、坦克等等技术兵器，分析师是士兵、炮手、驾驶员（操纵者），不能因为士兵自己不能一分钟吐出几百发子弹或者炮手自己不能一下子拆掉一个碉堡，就让机枪大炮坦克把操纵者扔下，自己上阵去打仗……就算是无人机，那也得有个拿遥控器的驾驶员蹲在办公室里操作啊……&lt;/p&gt;&lt;p&gt;算法始终只是工具，数据分析效果如何还是要看用工具的分析师功力如何。一个做过几十个分析项目的分析师，功力通常来说比刚入行的分析师或者纯开发人员要深厚一些（极少数天赋异禀的不算……），选算法调参数建模型的能力更强一些，分析出来的结果也会相对靠谱一些——没错，经验在这两个阶段就是优势。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;输出结论：&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这一阶段计算机的工作已经基本完成了，对模型输出的数据进行解读，那完全是分析师的天下——同一份数据给不同的分析师，可能会得出不同的结论，很多时候分析师并不单单根据数据本身得出结论，还要结合很多外界因素来修正结论。分析师的经验越丰富，拥有的有效信息量越多，得出的结论就越接近事实（之所以用接近，是因为对数据解读的准确度永远达不到100%，影响结果的因素太多了，比如一个企业销售额连续增长10年，分析师根据公司数据和市场情况判断下一年还会继续增长，结果老板出事跑路了，企业直接倒闭），而这个过程是计算机目前没办法自主进行的，商业智能系统做的再好，也需要由分析师来设定规则，告诉计算机在什么时间需要做什么。&lt;/p&gt;&lt;p&gt;也许随着大数据和人工智能的发展，有一天计算机可以完全不依赖人工设定的规则（不需要确定数据来源，不需要选择算法和模型，不需要人工干预来修正模型，等等），自己对数据进行全方位的分析，加入所有因素的影响，并输出准确度非常高的报告，只有到那时候，分析师才会失业啊。&lt;/p&gt;&lt;p&gt;不过，真到了那一天，恐怕不光是分析师失业的问题吧……&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一个成功的数据分析团队：角色与职责&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;多年以来我和数百家企业打过交道，在这个过程中，我领悟了让数据分析项目成功的一些因素，也亲眼看着很多项目失败。&lt;/p&gt;&lt;p&gt;最常见的失败原因说出来可能会让你惊讶。并非是缺乏数据专业知识或者整合失误，而仅仅是因为企业没有让“利用数据”成为任何人员的职责。太多公司花费好几个月收集有趣的数据，然后让它们静静地躺在角落里积攒灰尘。这个现象驱使我来撰写本文，希望它能给你灵感，让你为下一个分析项目增加一些结构性。 对分析的应用，本应该成为你不断汲取的商业泉源。&lt;/p&gt;&lt;p&gt;如果能为下列每个角色，找到至少一个乐于担当的人选，我保证你项目成功率会增加一千倍!对每个角色的具体描述和建议见下文。&lt;/p&gt;&lt;p&gt;*并未经过科学证实&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;角色及其输出&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB8Qd3ib6tT5hKcg3icj7rwxqLRLNOyCN4k7SYByTx6AZqrViak0k1YjHjQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;项目领导者&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;有一个团队成员要负责分析工作的实施交付。你可能已经知道，一个高效的项目管理者要：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;识别项目的利益相关者，并搞清他们需要什么。这些人会问“我们要回答的商业问题是什么?”&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;设定并传达工作目标、范围和时间，落实到每个相关人员。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;管理项目所依赖的资源，发现交付过程中的障碍。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;确保项目如实交付、达成目标(例如，数据确实回答了对业务至关重要的问题)。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;确保每个相关人员，从工程师到产品经理，同步工作并理解要交付什么。这个部分比较重要，因为人们通常低估或高度数据的作用。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对项目领导者的建议：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果你专注于那些可以直接为产品或业务带来改变的问题，你的分析项目会得到最及时的反馈。例如：新的宣传活动带来的顾客是否转化为付费用户了(是否该继续在这个宣传渠道上继续投资)?或者，我们准备取消这个功能，你能否查看一下是否有付费用户在使用这个服务?&lt;/p&gt;&lt;p&gt;保证项目的规模尽可能小。一开始，只跟踪对于业务重要的少数几个关键行为，这样就能够快速回答最紧迫的商业问题(如，使用这个此功能的用户留存度如何?)及时的，有用的分析结果会让你所在的机构着迷，他们很快会提出更多你在下一轮要回答的问题。换句话说，分析工作应该是敏捷的，随着每次迭代更加深入。如果分析项目的规模太大(如，需要花费工程师两周时间)，那你可能冒着拖延其他紧急项目的风险。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;数据建构者&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这个头衔听起来很炫，但它只是意味着你的团队需要有个懂技术的人创建数据模型，并理解查询语句如何工作。数据模型可以很简单，甚至像一封电子邮件，列出你要跟踪的行为和优先级。&lt;/p&gt;&lt;p&gt;这个模型有助于确定和传达你的项目范围。数据建构者帮助整个团队评估哪些业务问题可以被回答，哪些不能。通常这个人不必是数据科学博士，一般由一个app开发人员，或者懂得用电子表格建立模型的人担任。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;对数据分析者的建议：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;花点时间让曾经使用过相同工具的人看看你的数据模型。例如，如果你在使用Keen，就跟使用过Keen的开发者聊聊。也可以让分析服务提供者和你一起审阅你的数据模型。不管你在使用什么工具，都会有些事情需要取舍，解决方案总有些部分不会按照预期工作。节省些时间，跟有过相同经历的人谈谈你的计划吧。&lt;/p&gt;&lt;p&gt;建立数据模型时，使用客户和业务领域的习惯用语，而不是应用开发者的习惯用语。例如，不要去追踪“阶段变化”，客户和你公司里的其他人无法理解它。如果能保证使用的语言是业务导向的，它会帮助你的机构/企业理解如何去查询和使用数据。&lt;/p&gt;&lt;p&gt;保证让至少一个人审阅你的数据模型，保证模型可被他人理解。你可能会发现有些对自己来说很直白的标签，对其他人来说并不清晰。比如，对于机构里的不同人员，“uuid”意味着不同的东西。&lt;/p&gt;&lt;p&gt;不要重复发明轮子(不要做无用功)。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;产品开发者&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;项目一开始，就要有至少一个开发人员承担埋点的工作。他们在各处加一些代码，这样每次登录、购买、上传和其他行为的数据都能被保存。如果事件的来源有很多，比如移动应用+网页，这个工作可能由多个开发者完成(如，一个网站开发者和一个移动开发者)。在小一些的机构，埋点的开发者通常也扮演数据建构者。在大一些的团体中，开发者和数据建构者紧密合作，确保模型数据足够理想，以及事物被跟踪并以一致的格式标记(如“user.id” = “23cv42343jk88” 不是 “user.id” = “fran@cooldomain.com”)。埋点是个相对直接的过程，许多分析服务有直接可用的客户库使得此过程简化，不过，你的团队依然需要决定要跟踪什么行为，如何命名。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;对产品开发者的建议：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;确保根据对你的机构有意义的数据模型进行埋点。如果你的团队没有数据建构者，那么就扮演这个角色，在开始埋点之前规划一个模型。这会帮你理清思路，也更利于与他人沟通。&lt;/p&gt;&lt;p&gt;使用分开的repository，带有各自的key，针对dev, test和prod，这样就不会让生成数据和测试数据混淆。&lt;/p&gt;&lt;p&gt;埋点成功后，在正式使用前找个人审阅一下存进来的数据。和产品的其他功能一样，分析的实施也需要有个QA过程。埋点过程中错误很常见，如，把数字发送为字符串、命名不清、不正确地使用JSON的格式，或者标签里有错别字。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;分析者&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;你会收集很多有意思的数据，但如果没人利用，这些数据就不会有价值。团队里需要至少有一个人对数据背后隐藏的东西非常好奇。我把这些人称为分析者。分析者通常是个开发者、产品经理或产品团队/营销团队的某个人。这些人不仅疯狂地想了解业务问题的答案，还能时时提出新问题。分析者喜欢钻研项目第一阶段收集的数据，而且有很多点子，引出下一阶段应该收集的新东西。换句话说，团队中需要有个人享受实践分析的过程。不要着急，这样的人有很多:)。技术背景对这个角色有很大帮助，这使得他们能快速理解什么样的查询语句可以得到想要的答案。&lt;br/&gt;这个角色对于项目成功至关重要，如果没人从数据中理解、学习，就无法从中得到任何价值。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;对分析者的建议：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;分析的结果可能对你自己而言显而易见或很有意义，但别人看来可能不是这样。这是因为你从一开始就知道要回答什么问题。你知道数据包含哪些不包含哪些。此外你写的查询语句最终生成了可视化结果或报告。要让他人理解最终得到的数字都意味者什么，那么你要分享很多上下文内容给他们。&lt;/p&gt;&lt;p&gt;分享分析的结果时，需要写明你从数据中得到的结论，以及根据分析结果应该采取什么业务行动(如，上个版本发布后我们的转化率下降了，所以应该改回去)。其他人可能不仅没有正确解读数据所需的上下文，他们也很可能不像你那样感觉数据很迷人，且没时间去试图理解其意义。&lt;/p&gt;&lt;p&gt;不要用力过猛，不过，对于这个岗位来说沟通技巧很重要。分析者大约半数的时间都用在了沟通上。解释与总结从数据中获得的结论、结果需要花点时间。如果你的分析结果不能只是静静躺在别人的收件箱里。有些你是机构里唯一意识到某个机会或问题的人，应该确保机构对机会或问题有所反应。有时你得做那个难搞的人。不要低估自己工作的价值。&lt;/p&gt;&lt;p&gt;如果分析工作是你常常要做又来不及做的，试着把它加入你官方的职位描述中，每周或每月贡献固定时间在上面。不要让它干预你的其他时间。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;strong&gt;&lt;span&gt;报告制作者&lt;/span&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这个角色不是必需的，但你可能会想要制作一些报告，便于整个团队和其他利益相关者获取。要想让数据的实用性会大大提升，数据应该更紧密地与业务流程相连，而不是被遗弃在数据库里等着有人翻阅。一个前端开发者要能够把query变成产品经理和其他业务人员阅读的报告。下面是一些可能有用的例子：&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;Email寄送周报&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;内部网站的一个页面&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在面向用户的app中&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;用Google表格公开发布&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推送到slack频道&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在某个面板上展示&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推送到salesforce&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;对报告制作者的建议：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;确保报告的使用者能理解数据才能让你的工作产生最大价值。一个办法是，不断问他们“当你看到转化率5.2%时，这对你来说意味着什么?你会认为它是怎么计算出来的?”&lt;/p&gt;&lt;p&gt;另一种提高报告可读性的方式是写一份指南(如注释)，以解释数据从何而来、如何被计算。例如，数据是否包含从网站和app获取的用户，或只是来自其中一种的用户?它是否包括测试用户和公司的内部用户，或者他们已经被过滤掉了?&lt;/p&gt;&lt;p&gt;玩得开心点!整个分析项目中最棒的部分，就是看着有人因为从结果学到了新东西而双眼放光，而你，通常就是让这一切发生的人。&lt;/p&gt;&lt;p&gt;本文由 知乎 陈丹奕授权发布。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 21 Sep 2016 09:44:21 +0800</pubDate>
    </item>
    <item>
      <title>传统业务如何互联网+</title>
      <link>http://www.iwgc.cn/link/2774496</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBM4xhicybYOzQGrEYBLNnhjZSHJtCSiaAyrTsdvEVoPgtSFDLIKvMUevA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：Jiaxing&lt;/p&gt;&lt;p&gt;本周，我想兑换一张国航机票。&lt;/p&gt;&lt;p&gt;通过国航APP搜索，订票时它说我名字不是中文，这个错误是之前国航会员和凤凰知音会员帐户合并时产生的，它错误地把我的护照拼音名字合并到了会员帐户，并且还不允许我修改。此前在柜台办理值机时工作人员就给我说有问题，后来我添加了一个乘机人，每次买票都要重新选一次，总算让登机牌打印上了中文名字。&lt;/p&gt;&lt;p&gt;这次影响到了我的兑票，就必须联系凤凰知音修改了。经过5~6次提示语“现在路线正忙，请您耐心等待”之后，接线员给我说必须通过邮件形式发送修改信息和身份证照片到凤凰知音VIP邮箱，三个工作日内可以修改。根据接收的短信，我发了一封邮件。&lt;/p&gt;&lt;p&gt;等到第三天，我的名字还是拼音。经过再次尝试APP兑换，我发现界面虽然不能改名字，但可以改证件，选择通过护照购买，输入护照号码，然后收到“系统繁忙，请您稍后再试”的提示语。每一次“再试”我都得重新输入一次密码，每次重新兑换我都得重新选择城市、选择日期、搜索机票、修改为护照、输入护照号码、输入密码，为了一张￥1500元的机票，我也是蛮拼的。最后还是“系统繁忙”。&lt;/p&gt;&lt;p&gt;今天，我决定通过国航网站再试一试。哇，这次顺利地进入了兑换界面，并且网页上是可以自行输入姓名身份证号码!激动地进入最后的支付界面，它告诉我找不到兑换承让人……&lt;/p&gt;&lt;p&gt;最后一招是拨打客服电话。先试图进入贵宾会员菜单，不幸不被识别为贵宾。转里程兑换菜单，耐心等待了一次提示音，不到十分钟声音甜美的客服MM就帮助我办理完了机票兑换，密码输入、税费支付全部通过电话按键完成。办完后我问了一句：“为什么通过APP和网站办理不了兑换呢?”客服MM耐心地回答说：“那是因为系统太过繁忙。”又追问了一下我的信息修改进度，客户MM首先表示没有看到有邮件往来记录，然后询问了我的邮箱地址，表示未收到邮件，让我再发一次。只得作罢，挂了电话才记得是用另一个邮箱发的……&lt;/p&gt;&lt;p&gt;与此相似的经历，是办理移动业务，我也偏爱拨打10086——因为“移动营业厅”界面的复杂程度直接把我吓退了。好在没浪费我什么时间。&lt;/p&gt;&lt;p&gt;这些业务的共同特点是，流程较为固定，用户的目的性很强，而不像一般的互联网消费品那样，需要大量浏览、对比和决定。我们喜欢在电商网站中面对着各种图片、评论长时间地浏览，但经常在传统业务的办事大厅头就开始眩晕。&lt;/p&gt;&lt;p&gt;于是我开始分析：对比网站甚至APP，简单地拨打数字 + 对话操作的方式无疑是最优的;即使反复等待接线员，最后处理的效率还是高于当下的互联网端。这是因为，输入数字比查找信息快捷，传统企业又很擅长和客户通过短信互动，就算没有记录，号码也可以轻易地从近期短信中找到;客服具备专业性，同样的操作，远远比用户高效，后台系统“繁忙”程度也远远低于外网……&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;我们需要一个什么样的传统业务互联网产品?&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;有比输入电话号码更好的方式吗?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;简单设计：比如用“里程换票”、“购票”这样气泡代替一个接一个子菜单，携程和去哪儿网的界面在这方面做得不错，虽然美观上还有待提升。做得最好的之一，我认为是Apple Music的初始界面。&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBeHsgibGco4mMvEb2bguGzQ5v2ZJ932lCLahqWTBmbHFkh9yyVzNqCaA/0?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;&lt;strong&gt;能不能更多采用语音交流?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;既然客服交流体验这样好，为什么不采用语音技术来做呢?在这个领域，还是Apple的Siri领先了。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;记住用户的选择?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;看看我之前噩梦一样的反复输入吧，为什么APP就不能聪明一点，有一点记忆能力呢?谁也不愿意被“白痴”服务吧。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;成为服务专家?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;对于传统企业，买完产品看服务，我们需要的是专业的服务人员，而不是仅仅给用户开一个自助服务的新渠道完事。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;那么，做这些事需要什么样的技术?&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;一流的体验设计师&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;记住，这是企业全新的产品线，请按照产品建设来进行投资，而不是随便搞一个网页。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;语音技术&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;语音识别有一些技术壁垒，对企业来说，当前可以考虑一些商业产品，重心放在业务设计上。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数据分析&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;通过数据来认知用户的特点，进行细分，从而优化自己的产品。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;云平台化&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;无论是解决“系统繁忙”的问题，还是支撑更多样的用户体验，更快速的数据分析，都离不开平台的支撑，否则，一切都只有从零开始。云计算将硬件资源虚拟化变为可按需使用，而云平台解决了不少系统架构的难点：扩容、高可用以及运行状态监控，通过云服务商的产品线完善，更是将软件的复用程度从包、组件提升到了应用程序级别。&lt;/p&gt;&lt;p&gt;基于云平台进行产品开发，将会大大提速传统企业进入互联网+时代，先行者甚至可以构建出自己的行业云，一举反超过去的巨头，这也是当今传统IT领域最至关重要的转型点。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 21 Sep 2016 09:44:21 +0800</pubDate>
    </item>
  </channel>
</rss>
