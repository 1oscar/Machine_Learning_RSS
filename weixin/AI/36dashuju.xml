<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>36大数据</title>
    <link>http://www.iwgc.cn/list/1149</link>
    <description>关注大数据和互联网趋势,最大,最权威,最干货的大数据微信号(dashuju36).大数据第一科技媒体.不发软文,只做知识分享.</description>
    <item>
      <title>Python语法总结</title>
      <link>http://www.iwgc.cn/link/2839712</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArjVTTcLjvDpXpIYTrjhMSryYT6VF582o18JjFpZtHuHPSh71iaqDqpdw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：_赖笔小新&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;简单输入输出&lt;/strong&gt;&lt;/h3&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;输出 &amp;nbsp; print 10 , '十'&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;输入 &amp;nbsp; name = raw_input()&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;python基础&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数据类型和变量&lt;/span&gt;&lt;br/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArH1rpkMiaGT5bXlntenvL4382Fibq9gcZ78cX8WvYMiceKejSxwiawPPGicA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;&lt;strong&gt;字符串和编码&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAr2OuqM4wD4pvwXqd8ezNPMVhOMg7KIxGzCGhUzzqMpg0XZnWgBZQuRQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用list和tuple&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAriceeC3o1yoo8SRSvsN1OZ7iaN3hEjuu7iaqibgugR0ZkZmQAtgk7TQDfaA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;条件判断和循环&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArtS0Tg8ZuFtnPF4OrzX7ia8kO0P5AcTYw8kj2m79ibCVHTfhkibHsmU3xw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用dict和set&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArE7vrQlhmibZJe50fM4O3G6AaicwvxMzZO4s2zBjZDdODteCNAxXOR8OA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;定义函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArqagEXdPAJZ9FXk8PfMebQnwOyrutTIR1Jxq43xTMGIIyEjes2fgAVQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&amp;nbsp;&lt;br/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;高级特性&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;切片&lt;/span&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAricqWYIj61QXPZBBgXicmb9iacUcU9JlS7GricgqGFcu3nb3VfF0Fcffywg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;迭代&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArJhmaerlq2kF8Kpia8GGWqwa11E10sE78TtH7fqwTAvxIibCVIIE3s6mw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;列表生成器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAr0ictI5xzHXrOxWvc16fSb6ITDVu8m1aqkXnvmvphicvcm1vM4bPRa8Qg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;生成器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArKWa2yt4xosmaMjCTE54Q8yDXoO7GkONuVXL5amv2edqrgjYVz3XTMQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;函数式编程&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;高阶函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArD8L0QVEibNZq6elMkbicsmsWf2fQy1Lu6Xg3pebX4P66BgSTdp5AxDQQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;返回函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArGoPRx6RlIfC4w2ib9O6t314I4u8OhwQicd36Qt80BG2icEic2y6KPSCibfQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;匿名函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArjg1kJSOA1myuBwPqjeMI3vYwWsxkXNob6bPv2kM7bKNUPnxRPgGujg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;装饰器&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAr8B3Na6NiaWjHxEGZ63GgrORHy1RI8tbSZduupyWpAhNLkIcE0iaoQZdg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;实现&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArwRnh1Bhpne9rsPtzpu1EnBlvk3WFLnGSql5R9vq33ofUib7plMVX1Xw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;偏函数&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArlWaB0BPUQD3oyoic7eDj9qb1AAPzibvD6d1veXgZicpSoOdK8kY3kXxsQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;模块&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;模块&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAryhOU0BnlPnrjdaA0xlVK0CSpBWibCG8ibdm24bS2GHJV5uBvxrHjWzLA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用模块&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这是一个标准模块。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAribrucxmqcFXEI6lJJEDZbdsXqzLjSN6I5eXVZnABMRsXA2RFeC6jfhQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArbicibbL1WJfJZa626r2dntfm5bE5W06TrB35AbJksRylTia3gFUvE2d3w/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;安装第三方模块&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArrju8699FofMwqHqkicyEM4taO9mQvOw9IZow9P4TJbf25bJlWFGYePw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用__future__&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAreP0BXHsSVUcWYtvUX3SQxibibWVywP4vXWQoLeaxs5j2rUXrleP7AJQQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;面向对象编程&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;类和实例&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;定义类&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArsFzhFT95zutF51RMDsdlSSMQ8coxPCicibHTxTnlnNIvU2dJ1jv2cmYg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;访问限制&lt;/span&gt;&lt;/p&gt;&lt;p&gt;使用__双下划线开头可以让变量成为私有，外部无法访问。也可以通过添加getter、setter来控制访问操作。&lt;/p&gt;&lt;p&gt;&lt;span&gt;继承和多态&lt;/span&gt;&lt;/p&gt;&lt;p&gt;继承就在定义的时候写上父类的名称，多态就覆盖父类的方法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;获取对象信息&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;使用type()判断类型信息&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用isinstance()判断继承关系&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;使用dir()获取对象的所有方法和属性&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;面向对象高级编程&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;使用slots&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAraqicuEcVTnganPic3CJWylXnz7ZKtibRGvwGkjZ13eeeiaUtaUIQIYbGLw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;使用@property&lt;/p&gt;&lt;p&gt;如下，定义了一个score的属性&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArIUGO6wzA4ysBCPz20t65DpFmZ3IibbrkXfa5cCZhtgQrjzynaibiam3Kg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;多重继承&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;最好不要用多重继承，用mixin&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;mixin其中概念，用类来提供一组相似功能。类似实现过的接口。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;定制类&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAribOE4W0zkMWWZib31NQiczlBL2zqNfRXF3avSk8GTI5ibWdJExgkNabkDg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;使用元类&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArg74P7hBdPgdgxA049yOsc75ticu9Voz5joTTZDFEqagz8ia4jcsMdqiag/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;错误、调试和测试&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;错误&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArZCdVE27tXgkgGCibxYrFhD9eaLGVVx9o2VgRm1u6XXbLcMrHcIx0BUw/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAricVXvicpL0iaSia27eTuPGCyrRjtGQ6bAI45EaYHg11picDWKaVFA1v5ciaQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;调试&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArWEXvmukB7ySCrickVVeBaJjgSq64x07OB0SU6f6nFcLJIkc51aYXdBA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 26 Sep 2016 09:51:57 +0800</pubDate>
    </item>
    <item>
      <title>几分钟快速入门Python</title>
      <link>http://www.iwgc.cn/link/2839713</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArNtFaOYgmTTmo8N5lpEbgrg0c3PvlcwYkm71QIjrmRsw41voN3R5SGQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：Domon_Lee&lt;/p&gt;&lt;p&gt;Python由Guido Van Rossum在1991年创造的。它是现今存在的最流行的语言之一。我喜欢上Python是因为其简洁的语法。它基本上通过伪代码执行。&lt;/p&gt;&lt;p&gt;注意：这篇文章适用于Python 2.7，但可能适用于Python 2.x。Python 2.7将在2020年停止支持。&lt;/p&gt;&lt;p&gt;写的Python代码，同时兼容Python 2.7 和 3.x是完全有可能的。通过使用Python的futureimports.通过它可以让你通过Python 3写的代码运行在Python 2下。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAraYRcISKF7lPBPuPBBBs65jwFRus4hCgrEhMSxGDibpdLorYenaaWw1Q/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArzL5pAjoiaYutuFS66AZ5uLUMUsuaJ30JdBrEZMeehIDAH6QeZJwc5mg/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArENECh4PowdBQLRuDvuAGxJU5W9y2yqy5g9gsfs7xjZ0Gibe8trEMibjw/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAroVwJ8fp2Fic9akYMvd6XfULNk53BcXTbTLSNAYY2ZtK6frXhBerdgEw/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArJTewicwXxqwWwK9zMExREyLMhGoibqyCd1WIbjicvCDsOXPdC1bm9QspA/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArW1ds07HextfwEfvKSKyG8IHHwg4AJT3Cdn8f7tQM6zseC5xLWwhofA/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArk7hz1Q0Pt3UYSm288EzVnl7pGjtYw3EPx2KTWic18tWvdVtWOwibbXMg/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArvbXFpk4hf4hcWhWZTCFYyaVUcF1T9hibBnOibW6vlerM70UJ7PVZTfsw/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAribVJZ12jEUbIeI9hYkrIbRVGxV57Pv4COAcAw7Xxdh6UqK0Ehm6dGqw/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArjFvGjpgaYhibColTZeQgCV860Z8ItUo5KgD5dgicaWj4K5FHDsLhwcdw/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAriaoqh99FHeIahaduIk7S7mxFX30fXHdIKt4SDia0pGmHjOfsrUrjib39w/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArQ6kPg4jzA41ryTFiaxSW5toYkpMcFK7LtLwicdLeWJuzFZ0VzSVhhtRw/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAricXVtFCekMaB88Rld8ibDREOt3ByKicSI3jexOkFyT0PEl6vG9YR3XNHg/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArsGEx6N2ibT0iasrUkX9GH2v3aN5un8UKAJEO1JYI1H5tucnIPAzOiasoA/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAribfYzyALy50ZRQAVzBialRnuUPNj4kVVjVRsiatNVKX4pG04dhkKAq6og/0?wx_fmt=jpeg"/&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Mon, 26 Sep 2016 09:51:57 +0800</pubDate>
    </item>
    <item>
      <title>推荐系统常用的推荐算法</title>
      <link>http://www.iwgc.cn/link/2839714</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArt7Dy5MevFOhTqd5qwUn9AHduVEcnwWCSXiccAU1FKAzSYb0Xzia6H9Sw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：Nicol&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;一、推荐系统概述和常用评价指标&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.1 推荐系统的特点&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在知乎搜了一下推荐系统，果真结果比较少，显得小众一些，然后大家对推荐系统普遍的观点是：&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1)重要性UI&amp;gt;数据&amp;gt;算法，&lt;/span&gt;就是推荐系统中一味追求先进的算法算是个误区，通常论文研究类的推荐方法有的带有很多的假设限制，有的考虑工程实现问题较少，推荐系统需要大量的数据整理和转化，同时更需要考虑公司业务特性以及与现有系统的集成，方能形成推荐系统和业务之间的良性循环;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2)推荐系统离线测试很好，&lt;/span&gt;上线后要么没有严格的测试结果而只能凭感觉，要么实际效果差强人意，我想主要缘于离线测试比较理想，而在线AB冠军测试无论对于前端还是后台要求都很高，没有雄厚的研发实力难以实现;&lt;/p&gt;&lt;p&gt;&lt;span&gt;(3)推荐系统受到的外部干扰因素特别多(季节、流行因素等)，&lt;/span&gt;整个系统需要不断的迭代更新，没有一劳永逸的事情。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArfNSJveCKWaeUGxUAz5nvxMLJVnJ2iaIyd2vHevQWn6x0lnBiaE69NrQw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1.2 推荐系统的评价指标&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;由于推荐系统比较复杂，所以涉及到的评价指标也很多。当然，用户满意度最为的有效，因为这本来就是推荐系统的最终目标，但是奈何资源有限成本太高，推荐系统还依赖于其它客观评价指标。&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1)推荐准确度：&lt;/span&gt;这个参数可以离线计算所得，而且较为的客观，所以是各大研究论文算法最重要的参考指标。&lt;/p&gt;&lt;p&gt;总体来说，推荐系统有两大任务：“预测”和“推荐”，所以推荐系统准确度的评分包括：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;评分预测：学习用户的评价模型，用于预测用户对于未接触事物的评分，其实可以看作是一个回归模型，一般用均方根误差或者绝对误差来衡量;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;TopN推荐：给用户一个个性化的推荐列表，其一般通过准确度、召回率等指标评估。其中N也是一个可变参数，可以根据不同的N描绘出对应算法的ROC曲线来进一步评价推荐效果;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;(2)覆盖率&lt;/span&gt;：体现了挖掘算法对发掘长尾商品的能力。最简单的定义是，对所有用户推荐出的产品做并集，然后看这个出现的并集产品与总产品数中所占的比例，这种方式比较的粗线条，因为推荐系统中马太效应频繁，所以好的推荐算法应当是所有商品被推荐的几率差不多，都可以找到各自合适的用户，所以实际中会考虑信息熵、基尼系数等指标。&lt;/p&gt;&lt;p&gt;&lt;span&gt;(3)多样性：&lt;/span&gt;其原理可以表述为不在一棵树上吊死。因整个推荐系统涉及到的因素太多，如果只推荐用户一个类别的相似物品，失败风险比较的大，而且也难以实现整个推荐效益的最大化。&lt;/p&gt;&lt;p&gt;&lt;span&gt;(4)新颖性：&lt;/span&gt;原理就是那些用户没有接触过、没有操作过的商品，或者是流行度比较低的商品，对用户来说是比较新鲜的物品，往往会有意外的效果。个人觉得这个指标有点扯~~&lt;/p&gt;&lt;p&gt;&lt;span&gt;(5)信任度：&lt;/span&gt;这个指标比较的主观，就是让用户信任推荐系统做出的推荐是有根据有理由的，以及推荐系统内部是如何运作的。例如亚马逊的商品推荐会给出推荐理由，作为用户的我会觉得很贴心，否则用户会觉得商家的利益驱动而带有抵触心理。&lt;/p&gt;&lt;p&gt;&lt;span&gt;(6)健壮性：&lt;/span&gt;比如针对关联推荐算法，商户恶意下单提高产品的推荐频率，水军恶意评论等。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;二、静态数据推荐&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;基本上绝大多数算法都会利用用户-产品的交互数据动态生成个性化的推荐。而静态数据指还没生成用户交互数据的时候，这种情况在系统冷启动的时候尤为的常见，常常使用的静态数据包括：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;(1)用户注册时候的性别、年龄、地域、学历、兴趣等人口统计学信息;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(2)授权的社交网络账号的好友信息;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这类基于推荐方法简单，可以根据每类用户预先设置好推送内容，也可以根据同类用户相互之间进行推送，但是这种方法面临着推荐颗粒度较大，对于涉及个人品味爱好的个性化强的商品，参考价值有限，同时在大家隐私意识加强的情况下，这类数据不见得能够轻易得到;第二类社交网络好友信息效果会比较好，但也需要相应的平台授权接入才可以。&lt;/p&gt;&lt;p&gt;然后这里引申出对于新加入的用户和新加入的商品的冷启动问题：&lt;/p&gt;&lt;p&gt;&lt;span&gt;新加入用户：&lt;/span&gt;推送热门商品;选择用上面人口统计信息进行粗粒度的推送;如果可以得到合作商数据，获取其好友信息，选择接近的好友进行UserCF推荐;向用户展示一些商品(热们常见、具有代表性和区分性、物品要多样性)，得到用户的反馈，然后进行学习(Nadav Golbandi算法);&lt;/p&gt;&lt;p&gt;&lt;span&gt;新加入商品：&lt;/span&gt;UserCF对新加入的物品冷启动不是很敏感，因为只要有用户发现这个新商品，这个新商品就会慢慢扩散开来。对于ItemCF就比较严重，比如可以考虑开始使用基于内容的推荐，等积累数据一定程度后切换成协同过滤推荐。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;三、基于内容的推荐&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;其主要根据用户之前的喜好，推荐相似的物品。&lt;/span&gt;该系统包括用户属性和产品属性两方面构成，前者包括用户的固有属性(比如人口统计信息)以及用户的历史商品交互信息(比如对看过电影的评分，然后得到该用户对于喜欢电影的属性描述)，后者是对商品的本身属性描述，这样通过简单的余弦相似度就可以实现推荐了。&lt;/p&gt;&lt;p&gt;同时也能感觉到，对于同类型的物品描述维度相似，这种算法会工作的比较好，对于电商千奇百怪的商品，可能工作效果一般。&lt;/p&gt;&lt;p&gt;这个方法核心要解决的问题是推荐是否具有扩张性，如果根据用户之前的爱好只不断推荐同类的产品，显然整个推荐系统的价值就十分有限，但是如果能准确推荐其他不同类别的商品就会很好了。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Pandora的音乐推荐就是个典型的基于内容的推荐系统，他们把音乐使用各种维度的属性进行描述，然后根据用户之前的兴趣爱好推荐相似属性风格的音乐。&lt;/span&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;四、协同过滤算法&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;协同过滤算法算是推荐系统中最经典的算法了，也称为基于领域的算法。协同过滤牵涉到用户和商品的交互信息，也就是用户行为，而一般用户对于商品的行为反馈有：&lt;/p&gt;&lt;p&gt;&lt;span&gt;显性反馈行为&lt;/span&gt;——用户明确表现出对某项产品和的喜好，比如用户对商品的打分、评论等信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;隐性反馈行为&lt;/span&gt;——不能明确代表用户对产品喜好的行为，比如页面浏览行为等，这类数据量的比较多，常常伴有大量的噪音，需要经过处理和转化才可能有实际的用途。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.1 基于用户的协同过滤算法(UserCF)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;其基于的假设是——喜欢类似物品的用户可能有相同或者相似的口味和偏好。UserCF实现的步骤包括：&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1)找到与目标用户兴趣相似的用户群;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;假设用户u和v的正反馈的商品集合为N(u)，N(v)，那么两者兴趣相似度可以记为&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArtncicg3xS2RaibibPOSvwqCiaNnOuSLicUT7qjasjxoEnytmJibYZgFOmUlA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;(2)找到这个集合中用户喜欢的，而目标用户没有听说过得商品推荐之;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;UserCF提供的一个参数K表示要考虑目标用户兴趣最相似的人的个数，在保证精度的同时，K不宜过大，否则推荐结果会趋向于热门商品，流行度指标和覆盖度指标都会降低。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.2 基于内容的协同过滤算法(ItemCF)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;目前用的最广泛的推荐算法，不是通过商品本身，而是通过用户对商品的行为来计算商品之间的相似度，其假设能够引起用户兴趣的商品，必定与其之前评分高的商品相似。ItemCF的操作步骤包括：&lt;/p&gt;&lt;p&gt;&lt;span&gt;(1)计算商品之间的相似度。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;物品相似度可以表示为(其实跟前面的支持度比较像)&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoAr1MGsnxvbnjqH0ic6ABZHn4voXkSwYlj0GVT4xg3fNPZMcEGxkicQOY0g/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;第二个式子比第一个式子好在可以惩罚过热产品j。&lt;/p&gt;&lt;p&gt;&lt;span&gt;(2)根据商品的相似度和用户的历史行为，给用户生成推荐列表。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.3 基于模型的协同过滤算法&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;User-CF和Item-CF合称为memory-based CF，而model-based CF使用一般机器学习的方式，其基于样本的用户喜好信息，训练出一个推荐模型，然后根据实时的用户喜好的信息进行预测和计算推荐。&lt;/p&gt;&lt;p&gt;常用的模型包括LSI、贝叶斯网络等。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;4.4 UserCF和ItemCF之间的比较&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在现实的情况中，往往物品的个数是远远小于用户的数量的，而且物品的个数和相似度相对比较稳定，可以离线完成工作量最大的相似性计算步骤，从而大大降低了在线计算量，基于用户的实时性更好一些。&lt;/p&gt;&lt;p&gt;但是具体使用的场景，还需要根据具体的业务类型来区分，User-CF偏重于反应用户小群体热点，更具社会化，而Item-CF在于维持用户的历史兴趣，比如：&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于新闻、阅读类的推荐，新闻阅读类的信息是实时更新的，&lt;/span&gt;所以ItemCF在这种情况下需要不断更新，而用户对新闻的个性化推荐不是特别的强烈情况，用户有新行为不会导致相似用户的剧烈运动。&lt;/p&gt;&lt;p&gt;&lt;span&gt;对于电子商务类别的，&lt;/span&gt;由于用户消费代价比较高，所以对个性化的精确程度要求也比较高，而一段用户有新的行为，也会导致推荐内容的实时变化&lt;/p&gt;&lt;p&gt;&lt;span&gt;协同过滤的算法缺点也很明显，除了上面的冷启动之外，往往商家的用户数量和产品数量都很多，所以矩阵的计算量会非常的大，&lt;/span&gt;但某个具体的用户往往买的东西又有限，所以数据同时也是高度稀疏的。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;五、基于标签的推荐方法&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;基于标签的推荐算法也是十分常见的，比如豆瓣网、京东的商品评论等。标签信息一般分为专家、学者类打的标签;一类为普通用户给商品打的标签(UGC, User Generated Content)。而标签的内容一般要么描述商品本身的，比如名字、类别、产地等，也或者用户对商品的观点评价，比如便宜、好用、性能强等，三元组(用户、物品、标签)通过标签将用户和物品进行联系。&lt;/p&gt;&lt;p&gt;基于标签推荐最简单的例子比如：统计一个用户最常用的标签，统计每个物品最常被打的标签，然后两者通过一定的关系推荐起来;当然也可以展现标签云，让用户点击自己感兴趣的标签，然后依此个性化推荐。&lt;/p&gt;&lt;p&gt;国内的京东、淘宝、豆瓣都大量使用标签信息。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYiby1Z1u6bVwuICBu7vRraoArqic6RFuUAHo5pfS1TVLs2ekBHjIAbYU2QZlxicWQILgVkOxVoyYopZVA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;由于标签的评价用户主观性比较强，所以一方面同样意思用户的用语差异性比较大，规范化可以考虑：&lt;span&gt;用户评价的时候提供常用标签，让用户点击可以减少输入差异，而推荐的标签包括该物品描述性较好的标签，以及用户自己常用的标签(用户一致性);人为或者通过自然语言处理技术对标签进行整理，对于用户积极和消极的评价进行区分;标签也有长尾分布效应，所以除了热门标签外怎么提取那些差异化的有用标签进行更精确的推荐也是应当研究的课题(卡方分布/SVD)。&lt;/span&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/h3&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;探索推荐引擎内部的秘密，第 {1,2,3} 部分&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;推荐系统实践&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;(2011-)2014 年终总结：技术篇&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Netflix Prize 中的协同过滤算法&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;End.&lt;/p&gt;</description>
      <pubDate>Mon, 26 Sep 2016 09:51:57 +0800</pubDate>
    </item>
    <item>
      <title>数据结构常见的八大排序算法</title>
      <link>http://www.iwgc.cn/link/2804445</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEibdJVVib3nvKgNeico5uPcX26w5cWd94h5SW3zmicSFz3AyKr56t1pvfpQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：LeeLom&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;八大排序，三大查找是《数据结构》当中非常基础的知识点，在这里为了复习顺带总结了一下常见的八种排序算法。&lt;/p&gt;&lt;p&gt;常见的八大排序算法，他们之间关系如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEQIbbe1thntHPlUC411znMKPmhP0bCicLdyeubOaGr3W3a72nffJPgCg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;他们的性能比较：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEqOEtPXicYXXpCC59prJpicTMhXaH8CSNg5A77mc2KPwdK0626Im0mLmg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;下面，利用Python分别将他们进行实现。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;直接插入排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEsN513CdpxbIdzuyts3qRudzibFRQkv2YSN4l7O8YpCmNSzRMwDkXdFw/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;直接插入排序的核心思想就是：将数组中的所有元素依次跟前面已经排好的元素相比较，如果选择的元素比已排序的元素小，则交换，直到全部元素都比较过。&lt;/p&gt;&lt;p&gt;因此，从上面的描述中我们可以发现，直接插入排序可以用两个循环完成：&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一层循环&lt;/span&gt;：遍历待比较的所有数组元素&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二层循环：&lt;/span&gt;将本轮选择的元素(selected)与已经排好序的元素(ordered)相比较。如果：selected &amp;gt; ordered，那么将二者交换&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVElNkXbgsoN4rWRQiaECowNYicY0yECeWoIeTibEZOib84ScOxbpKUtia9yvA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;希尔排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEKGmKg0Cwj6kKRdI2YNqPXWonxA4R6ribIoFmJVG21L5w4KbwicNibPObQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;希尔排序的算法思想：将待排序数组按照步长gap进行分组，然后将每组的元素利用直接插入排序的方法进行排序;每次将gap折半减小，循环上述操作;当gap=1时，利用直接插入，完成排序。&lt;/p&gt;&lt;p&gt;同样的：从上面的描述中我们可以发现：希尔排序的总体实现应该由三个循环完成：&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一层循环：&lt;/span&gt;将gap依次折半，对序列进行分组，直到gap=1&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二、三层循环：&lt;/span&gt;也即直接插入排序所需要的两次循环。具体描述见上。&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEBiaRIyUu35TpWic6ibDDv3H0sP3nnsrnV8UOOeZ2OujEjgb8VBZBuMuXQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;简单选择排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE8yqPKIexg2nuVhshLL9fhcJzjnxAjNJO27bCMGOTBvr2Uicy3BIrU0Q/0?wx_fmt=gif"/&gt;&lt;/center&gt;&lt;p&gt;&lt;span&gt;简单选择排序的基本思想：比较+交换。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;从待排序序列中，找到关键字最小的元素;&lt;/p&gt;&lt;p&gt;如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换;&lt;/p&gt;&lt;p&gt;从余下的 N - 1 个元素中，找出关键字最小的元素，重复(1)、(2)步，直到排序结束。&lt;/p&gt;&lt;p&gt;因此我们可以发现，简单选择排序也是通过两层循环实现。&lt;/p&gt;&lt;p&gt;&lt;span&gt;第一层循环：&lt;/span&gt;依次遍历序列当中的每一个元素&lt;/p&gt;&lt;p&gt;&lt;span&gt;第二层循环：&lt;/span&gt;将遍历得到的当前元素依次与余下的元素进行比较，符合最小元素的条件，则交换。&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEYniaW4hQGH1IWuNSN9N3WkhrhrdiaXvbTQesupEXf0SDQHMooLV6QLhQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;堆排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;堆的概念&lt;/span&gt;&lt;/p&gt;&lt;p&gt;堆：本质是一种数组对象。特别重要的一点性质：任意的叶子节点小于(或大于)它所有的父节点。对此，又分为大顶堆和小顶堆，大顶堆要求节点的元素都要大于其孩子，小顶堆要求节点元素都小于其左右孩子，两者对左右孩子的大小关系不做任何要求。&lt;/p&gt;&lt;p&gt;利用堆排序，就是基于大顶堆或者小顶堆的一种排序方法。下面，我们通过大顶堆来实现。&lt;/p&gt;&lt;p&gt;基本思想：&lt;/p&gt;&lt;p&gt;堆排序可以按照以下步骤来完成：&lt;/p&gt;&lt;p&gt;&lt;span&gt;首先将序列构建称为大顶堆;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;(这样满足了大顶堆那条性质：位于根节点的元素一定是当前序列的最大值)&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE1Dwwo2YOfxibZIxOs1PEEfc4kzd4bpczqNdLrgtWISkJichZQQIegdsA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;取出当前大顶堆的根节点，将其与序列末尾元素进行交换;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;(此时：序列末尾的元素为已排序的最大值;由于交换了元素，当前位于根节点的堆并不一定满足大顶堆的性质)&lt;/p&gt;&lt;p&gt;&lt;span&gt;对交换后的n-1个序列元素进行调整，使其满足大顶堆的性质;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE34mdnKJr2ibbncID5AHV9OTHKAjibddNnp1MdUTu8iaRakYLW6j3sQNuw/0?wx_fmt=jpeg"/&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;重复2.3步骤，直至堆中只有1个元素为止&lt;/p&gt;&lt;p&gt;代码实现：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEh1G6YwGMicSaSANzAYAXLefORSsvmTHyGFR24BouPbGo49ibeUwZ6g4w/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEl3AnuiaLMgYr7L0wnkYWXygcDjqyqUFMqtHTUwrkG9m1LTpicYciaTrpA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;冒泡排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;基本思想&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVE8ZeliazpGHYiabHK2yL3rXfUvGzoDSA5ViamM3SVAS0nNdgAJtSTwZlew/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;冒泡排序思路比较简单：&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将序列当中的左右元素，依次比较，保证右边的元素始终大于左边的元素;&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;( 第一轮结束后，序列最后一个元素一定是当前序列的最大值;)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对序列当中剩下的n-1个元素再次执行步骤1。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;对于长度为n的序列，一共需要执行n-1轮比较&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;(利用while循环可以减少执行次数)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;*代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEpRc6dh7I0fD1LCOwtk6sGlp5rsbWMyEzScMiallic30Rib5W1rjibaVseQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;快速排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEntcZM5RlM9cKRloMYPJbcVTxhWdHp6uea4eibtk63TsQpF8A5flxrqg/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;快速排序的基本思想：挖坑填数+分治法&lt;/span&gt;&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;从序列当中选择一个基准数(pivot)&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;在这里我们选择序列当中第一个数最为基准数&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;将序列当中的所有数依次遍历，比基准数大的位于其右侧，比基准数小的位于其左侧&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;重复步骤1.2，直到所有子集当中只有一个元素为止。&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;用伪代码描述如下：&lt;/p&gt;&lt;p&gt;1.i =L; j = R; 将基准数挖出形成第一个坑a[i]。&lt;/p&gt;&lt;p&gt;2.j--由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。&lt;/p&gt;&lt;p&gt;3.i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。&lt;/p&gt;&lt;p&gt;4.再重复执行2，3二步，直到i==j，将基准数填入a[i]中&lt;/p&gt;&lt;p&gt;&lt;span&gt;代码实现：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEvc7DOedKCwrZ7jDmBda3qAxbMb62pibriaZ5xkJs0fN4afDtLrbiaAZJw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;归并排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;算法思想：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEr5JrpiajibawBnhFr9Y7aWuI1AwickJQ7H38FUsBfDMxM66cGBtCRn34Q/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法的一个典型的应用。它的基本操作是：将已有的子序列合并，达到完全有序的序列;即先使每个子序列有序，再使子序列段间有序。&lt;/p&gt;&lt;p&gt;归并排序其实要做两件事：&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;分解----将序列每次折半拆分&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;合并----将划分后的序列段两两排序合并&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;span&gt;因此，归并排序实际上就是两个操作，拆分+合并&lt;/span&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;如何合并?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;L[first...mid]为第一段，L[mid+1...last]为第二段，并且两端已经有序，现在我们要将两端合成达到L[first...last]并且也有序。&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;首先依次从第一段与第二段中取出元素比较，将较小的元素赋值给temp[]&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;重复执行上一步，当某一段赋值结束，则将另一段剩下的元素赋值给temp[]&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;此时将temp[]中的元素复制给L[]，则得到的L[first...last]有序&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;如何分解?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在这里，我们采用递归的方法，首先将待排序列分成A,B两组;然后重复对A、B序列&lt;/p&gt;&lt;p&gt;分组;直到分组后组内只有一个元素，此时我们认为组内所有元素有序，则分组结束。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEy03gzZVy3zDWQrreflTWanF4ouv0ZfVPicSeckkyXBVAhVQyMIfulTA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;基数排序&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;算法思想&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_gif/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEWGQAfoaX0gQI91iboPjEPNumhf8VAMSe49CesMLEdQWW5O19v0tt5Yg/0?wx_fmt=gif"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;基数排序：&lt;/span&gt;通过序列中各个元素的值，对排序的N个元素进行若干趟的“分配”与“收集”来实现排序。&lt;/p&gt;&lt;p&gt;&lt;span&gt;分配：&lt;/span&gt;我们将L[i]中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中&lt;/p&gt;&lt;p&gt;&lt;span&gt;收集：&lt;/span&gt;当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列L[ ]&lt;/p&gt;&lt;p&gt;对新形成的序列L[]重复执行分配和收集元素中的十位、百位...直到分配完该序列中的最高位，则排序结束&lt;/p&gt;&lt;p&gt;根据上述“基数排序”的展示，我们可以清楚的看到整个实现的过程&lt;/p&gt;&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEBQky0o4ADm7H9w2lzXzIHvdvwTrWogN2Mcfybiaw5IiaUdL6ehnjNwxA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;后记&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;写完之后运行了一下时间比较：&lt;/p&gt;&lt;p&gt;&lt;span&gt;1w个数据时：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEFB9zwf57WqbKOrPu1WKFwVROhJMic31icpTC9vuicbD4bNkDloZ5B2GRg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;&lt;span&gt;10w个数据时：&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEz7t8yj6yy5YdqFgyXLxhSKx3wicIziaicnB4KicfqBEc1NMBBou4bv2SIw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;从运行结果上来看，堆排序、归并排序、基数排序真的快。&lt;/p&gt;&lt;p&gt;对于快速排序迭代深度超过的问题，可以将考虑将快排通过非递归的方式进行实现。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;参考资料&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;数据结构可视化：visualgo&lt;/p&gt;&lt;p&gt;希尔排序介绍：希尔排序&lt;/p&gt;&lt;p&gt;堆排序：《算法导论》读书笔记之第6章 堆排序&lt;/p&gt;&lt;p&gt;博客园：静默虚空&lt;/p&gt;&lt;p&gt;参考资料详情请阅读全文。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 23 Sep 2016 09:30:41 +0800</pubDate>
    </item>
    <item>
      <title>常见的大数据术语表(中英对照)</title>
      <link>http://www.iwgc.cn/link/2804446</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEOYHye8btpC5vcZotPaJjfk78cWADvawbKcIM1Itt2hSspv520bX0Ng/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;译者：小胖妞妞&lt;/p&gt;&lt;p&gt;大数据的出现带来了许多新的术语，但这些术语往往比较难以理解。因此，我们通过本文给出一个常用的大数据术语表，抛砖引玉，供大家深入了解。其中部分定义参考了相应的博客文章。当然，这份术语表并没有100%包含所有的术语，如果你认为有任何遗漏之处，请告之我们。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;聚合(Aggregation)&lt;/span&gt;&amp;nbsp;– 搜索、合并、显示数据的过程&lt;/p&gt;&lt;p&gt;&lt;span&gt;算法(Algorithms)&lt;/span&gt;&amp;nbsp;– 可以完成某种数据分析的数学公式&lt;/p&gt;&lt;p&gt;&lt;span&gt;分析法(Analytics)&lt;/span&gt;&amp;nbsp;– 用于发现数据的内在涵义&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常检测(Anomaly detection)&lt;/span&gt;&amp;nbsp;– 在数据集中搜索与预期模式或行为不匹配的数据项。除了“Anomalies”,用来表示异常的词有以下几种：outliers, exceptions, surprises, contaminants.他们通常可提供关键的可执行信息&lt;/p&gt;&lt;p&gt;&lt;span&gt;匿名化(Anonymization)&lt;/span&gt;&amp;nbsp;– 使数据匿名，即移除所有与个人隐私相关的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;应用(Application)&lt;/span&gt;&amp;nbsp;– 实现某种特定功能的计算机软件&lt;/p&gt;&lt;p&gt;&lt;span&gt;人工智能(Artificial Intelligence)&lt;/span&gt;&amp;nbsp;– 研发智能机器和智能软件，这些智能设备能够感知周遭的环境，并根据要求作出相应的反应，甚至能自我学习&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;B&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;行为分析法(Behavioural Analytics)&lt;/span&gt;&amp;nbsp;– 这种分析法是根据用户的行为如“怎么做”，“为什么这么做”，以及“做了什么”来得出结论，而不是仅仅针对人物和时间的一门分析学科，它着眼于数据中的人性化模式&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据科学家(Big Data Scientist)&lt;/span&gt;&amp;nbsp;– 能够设计大数据算法使得大数据变得有用的人&lt;/p&gt;&lt;p&gt;&lt;span&gt;大数据创业公司(Big data startup)&lt;/span&gt;&amp;nbsp;– 指研发最新大数据技术的新兴公司&lt;/p&gt;&lt;p&gt;&lt;span&gt;生物测定术(Biometrics)&lt;/span&gt;&amp;nbsp;– 根据个人的特征进行身份识别&lt;/p&gt;&lt;p&gt;&lt;span&gt;B字节 (BB: Brontobytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 YB(Yottabytes)，相当于未来数字化宇宙的大小。1 B字节包含了27个0!&lt;/p&gt;&lt;p&gt;&lt;span&gt;商业智能(Business Intelligence)&lt;/span&gt;&amp;nbsp;– 是一系列理论、方法学和过程，使得数据更容易被理解&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;C&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;分类分析(Classification analysis)&lt;/span&gt;&amp;nbsp;– 从数据中获得重要的相关性信息的系统化过程; 这类数据也被称为元数据(meta data),是描述数据的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;云计算(Cloud computing)&lt;/span&gt;&amp;nbsp;– 构建在网络上的分布式计算系统，数据是存储于机房外的(即云端)&lt;/p&gt;&lt;p&gt;&lt;span&gt;聚类分析(Clustering analysis)&lt;/span&gt;&amp;nbsp;– 它是将相似的对象聚合在一起，每类相似的对象组合成一个聚类(也叫作簇)的过程。这种分析方法的目的在于分析数据间的差异和相似性&lt;/p&gt;&lt;p&gt;&lt;span&gt;冷数据存储(Cold data storage)&lt;/span&gt;&amp;nbsp;– 在低功耗服务器上存储那些几乎不被使用的旧数据。但这些数据检索起来将会很耗时&lt;/p&gt;&lt;p&gt;&lt;span&gt;对比分析(Comparative analysis)&lt;/span&gt;&amp;nbsp;– 在非常大的数据集中进行模式匹配时，进行一步步的对比和计算过程得到分析结果&lt;/p&gt;&lt;p&gt;&lt;span&gt;复杂结构的数据(Complex structured data)&lt;/span&gt;&amp;nbsp;– 由两个或多个复杂而相互关联部分组成的数据，这类数据不能简单地由结构化查询语言或工具(SQL)解析&lt;/p&gt;&lt;p&gt;&lt;span&gt;计算机产生的数据(Computer generated data)&lt;/span&gt;&amp;nbsp;– 如日志文件这类由计算机生成的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;并发(Concurrency)&lt;/span&gt;&amp;nbsp;– 同时执行多个任务或运行多个进程&lt;/p&gt;&lt;p&gt;&lt;span&gt;相关性分析(Correlation analysis)&lt;/span&gt;&amp;nbsp;– 是一种数据分析方法，用于分析变量之间是否存在正相关，或者负相关&lt;/p&gt;&lt;p&gt;&lt;span&gt;客户关系管理(CRM: Customer Relationship Management)&lt;/span&gt;&amp;nbsp;– 用于管理销售、业务过程的一种技术，大数据将影响公司的客户关系管理的策略&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;仪表板(Dashboard)&lt;/span&gt;&amp;nbsp;– 使用算法分析数据，并将结果用图表方式显示于仪表板中&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据聚合工具(Data aggregation tools)&lt;/span&gt;&amp;nbsp;– 将分散于众多数据源的数据转化成一个全新数据源的过程&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据分析师(Data analyst)&lt;/span&gt;&amp;nbsp;– 从事数据分析、建模、清理、处理的专业人员&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库(Database)&lt;/span&gt;&amp;nbsp;– 一个以某种特定的技术来存储数据集合的仓库&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库即服务(Database-as-a-Service)&lt;/span&gt;&amp;nbsp;– 部署在云端的数据库，即用即付，例如亚马逊云服务(AWS: Amazon Web Services)&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据库管理系统(DBMS: Database Management System)&lt;/span&gt;&amp;nbsp;– 收集、存储数据，并提供数据的访问&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据中心(Data centre)&lt;/span&gt;&amp;nbsp;– 一个实体地点，放置了用来存储数据的服务器&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据清洗(Data cleansing)&lt;/span&gt;&amp;nbsp;– 对数据进行重新审查和校验的过程，目的在于删除重复信息、纠正存在的错误，并提供数据一致性&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据管理员(Data custodian)&lt;/span&gt;&amp;nbsp;– 负责维护数据存储所需技术环境的专业技术人员&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据道德准则(Data ethical guidelines)&lt;/span&gt;&amp;nbsp;– 这些准则有助于组织机构使其数据透明化，保证数据的简洁、安全及隐私&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据订阅(Data feed)&lt;/span&gt;&amp;nbsp;– 一种数据流，例如Twitter订阅和RSS&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据集市(Data marketplace)&lt;/span&gt;&amp;nbsp;– 进行数据集买卖的在线交易场所&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据挖掘(Data mining)&lt;/span&gt;&amp;nbsp;– 从数据集中发掘特定模式或信息的过程&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据建模(Data modelling)&lt;/span&gt;&amp;nbsp;– 使用数据建模技术来分析数据对象，以此洞悉数据的内在涵义&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据集(Data set)&lt;/span&gt;&amp;nbsp;– 大量数据的集合&lt;/p&gt;&lt;p&gt;&lt;span&gt;数据虚拟化(Data virtualization)&lt;/span&gt;&amp;nbsp;– 数据整合的过程，以此获得更多的数据信息，这个过程通常会引入其他技术，例如数据库，应用程序，文件系统，网页技术，大数据技术等等&lt;/p&gt;&lt;p&gt;&lt;span&gt;去身份识别(De-identification)&lt;/span&gt;&amp;nbsp;– 也称为匿名化(anonymization)，确保个人不会通过数据被识别&lt;/p&gt;&lt;p&gt;&lt;span&gt;判别分析(Discriminant analysis)&lt;/span&gt;&amp;nbsp;– 将数据分类;按不同的分类方式，可将数据分配到不同的群组，类别或者目录。是一种统计分析法，可以对数据中某些群组或集群的已知信息进行分析，并从中获取分类规则。&lt;/p&gt;&lt;p&gt;&lt;span&gt;分布式文件系统(Distributed File System)&lt;/span&gt;&amp;nbsp;– 提供简化的，高可用的方式来存储、分析、处理数据的系统&lt;/p&gt;&lt;p&gt;&lt;span&gt;文件存贮数据库(Document Store Databases)&lt;/span&gt;&amp;nbsp;– 又称为文档数据库(document-oriented database), 为存储、管理、恢复文档数据而专门设计的数据库，这类文档数据也称为半结构化数据&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;E&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;探索性分析(Exploratory analysis)&lt;/span&gt;&amp;nbsp;– 在没有标准的流程或方法的情况下从数据中发掘模式。是一种发掘数据和数据集主要特性的一种方法&lt;/p&gt;&lt;p&gt;&lt;span&gt;E字节(EB: Exabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 PB(petabytes), 约等于1百万 GB。如今全球每天所制造的新信息量大约为1 EB&lt;/p&gt;&lt;p&gt;&lt;span&gt;提取-转换-加载(ETL: Extract, Transform and Load)&lt;/span&gt;&amp;nbsp;– 是一种用于数据库或者数据仓库的处理过程。即从各种不同的数据源提取(E)数据，并转换(T)成能满足业务需要的数据，最后将其加载(L)到数据库&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;F&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;故障切换(Failover)&lt;/span&gt;&amp;nbsp;– 当系统中某个服务器发生故障时，能自动地将运行任务切换到另一个可用服务器或节点上&lt;/p&gt;&lt;p&gt;&lt;span&gt;容错设计(Fault-tolerant design)&lt;/span&gt;&amp;nbsp;– 一个支持容错设计的系统应该能够做到当某一部分出现故障也能继续运行&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;G&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;游戏化(Gamification)&lt;/span&gt;&amp;nbsp;– 在其他非游戏领域中运用游戏的思维和机制，这种方法可以以一种十分友好的方式进行数据的创建和侦测，非常有效。&lt;/p&gt;&lt;p&gt;&lt;span&gt;图形数据库(Graph Databases)&lt;/span&gt;&amp;nbsp;– 运用图形结构(例如，一组有限的有序对，或者某种实体)来存储数据，这种图形存储结构包括边缘、属性和节点。它提供了相邻节点间的自由索引功能，也就是说，数据库中每个元素间都与其他相邻元素直接关联。&lt;/p&gt;&lt;p&gt;&lt;span&gt;网格计算(Grid computing)&lt;/span&gt;&amp;nbsp;– 将许多分布在不同地点的计算机连接在一起，用以处理某个特定问题，通常是通过云将计算机相连在一起。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;H&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Hadoop&lt;/span&gt;&amp;nbsp;– 一个开源的分布式系统基础框架，可用于开发分布式程序，进行大数据的运算与存储。&lt;/p&gt;&lt;p&gt;&lt;span&gt;Hadoop数据库(HBase)&lt;/span&gt;&amp;nbsp;– 一个开源的、非关系型、分布式数据库，与Hadoop框架共同使用&lt;/p&gt;&lt;p&gt;&lt;span&gt;HDFS&lt;/span&gt;&amp;nbsp;– Hadoop分布式文件系统(Hadoop Distributed File System);是一个被设计成适合运行在通用硬件(commodity hardware)上的分布式文件系统&lt;/p&gt;&lt;p&gt;&lt;span&gt;高性能计算(HPC: High-Performance-Computing)&lt;/span&gt;&amp;nbsp;– 使用超级计算机来解决极其复杂的计算问题&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;I&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;内存数据库(IMDB: In-memory)&lt;/span&gt;&amp;nbsp;– 一种数据库管理系统，与普通数据库管理系统不同之处在于，它用主存来存储数据，而非硬盘。其特点在于能高速地进行数据的处理和存取。&lt;/p&gt;&lt;p&gt;&lt;span&gt;物联网(Internet of Things)&lt;/span&gt;&amp;nbsp;– 在普通的设备中装上传感器，使这些设备能够在任何时间任何地点与网络相连。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;J&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;法律上的数据一致性(Juridical data compliance)&lt;/span&gt;&amp;nbsp;– 当你使用的云计算解决方案，将你的数据存储于不同的国家或不同的大陆时，就会与这个概念扯上关系了。你需要留意这些存储在不同国家的数据是否符合当地的法律。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;K&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;键值数据库(KeyValue Databases)&lt;/span&gt;&amp;nbsp;– 数据的存储方式是使用一个特定的键，指向一个特定的数据记录，这种方式使得数据的查找更加方便快捷。键值数据库中所存的数据通常为编程语言中基本数据类型的数据。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;L&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;延迟(Latency)&lt;/span&gt;&amp;nbsp;– 表示系统时间的延迟&lt;/p&gt;&lt;p&gt;&lt;span&gt;遗留系统(Legacy system)&lt;/span&gt;&amp;nbsp;– 是一种旧的应用程序，或是旧的技术，或是旧的计算系统，现在已经不再支持了。&lt;/p&gt;&lt;p&gt;&lt;span&gt;负载均衡(Load balancing)&lt;/span&gt;&amp;nbsp;– 将工作量分配到多台电脑或服务器上，以获得最优结果和最大的系统利用率。&lt;/p&gt;&lt;p&gt;&lt;span&gt;位置信息(Location data)&lt;/span&gt;&amp;nbsp;– GPS信息，即地理位置信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;日志文件(Log file)&lt;/span&gt;&amp;nbsp;– 由计算机系统自动生成的文件，记录系统的运行过程。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;M&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;M2M数据(Machine2Machine data)&lt;/span&gt;&amp;nbsp;– 两台或多台机器间交流与传输的内容&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器数据(Machine data)&lt;/span&gt;&amp;nbsp;– 由传感器或算法在机器上产生的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;机器学习(Machine learning)&lt;/span&gt;&amp;nbsp;– 人工智能的一部分，指的是机器能够从它们所完成的任务中进行自我学习，通过长期的累积实现自我改进。&lt;/p&gt;&lt;p&gt;&lt;span&gt;MapReduce&lt;/span&gt;&amp;nbsp;– 是处理大规模数据的一种软件框架(Map: 映射，Reduce: 归纳)。&lt;/p&gt;&lt;p&gt;&lt;span&gt;大规模并行处理(MPP: Massively Parallel Processing)&lt;/span&gt;&amp;nbsp;– 同时使用多个处理器(或多台计算机)处理同一个计算任务。&lt;/p&gt;&lt;p&gt;&lt;span&gt;元数据(Metadata)&lt;/span&gt;&amp;nbsp;– 被称为描述数据的数据，即描述数据数据属性(数据是什么)的信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;MongoDB&lt;/span&gt;&amp;nbsp;– 一种开源的非关系型数据库(NoSQL database)&lt;/p&gt;&lt;p&gt;&lt;span&gt;多维数据库(Multi-Dimensional Databases)&lt;/span&gt;&amp;nbsp;– 用于优化数据联机分析处理(OLAP)程序，优化数据仓库的一种数据库。&lt;/p&gt;&lt;p&gt;&lt;span&gt;多值数据库(MultiValue Databases)&lt;/span&gt;&amp;nbsp;– 是一种非关系型数据库(NoSQL), 一种特殊的多维数据库：能处理3个维度的数据。主要针对非常长的字符串，能够完美地处理HTML和XML中的字串。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;自然语言处理(Natural Language Processing)&lt;/span&gt;&amp;nbsp;– 是计算机科学的一个分支领域，它研究如何实现计算机与人类语言之间的交互。&lt;/p&gt;&lt;p&gt;&lt;span&gt;网络分析(Network analysis)&lt;/span&gt;&amp;nbsp;– 分析网络或图论中节点间的关系，即分析网络中节点间的连接和强度关系。&lt;/p&gt;&lt;p&gt;&lt;span&gt;NewSQL&lt;/span&gt;&amp;nbsp;– 一个优雅的、定义良好的数据库系统，比SQL更易学习和使用，比NoSQL更晚提出的新型数据库&lt;/p&gt;&lt;p&gt;&lt;span&gt;NoSQL&lt;/span&gt;&amp;nbsp;– 顾名思义，就是“不使用SQL”的数据库。这类数据库泛指传统关系型数据库以外的其他类型的数据库。这类数据库有更强的一致性，能处理超大规模和高并发的数据。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;O&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;对象数据库(Object Databases)&lt;/span&gt;&amp;nbsp;– (也称为面象对象数据库)以对象的形式存储数据，用于面向对象编程。它不同于关系型数据库和图形数据库，大部分对象数据库都提供一种查询语言，允许使用声明式编程(declarative programming)访问对象.&lt;/p&gt;&lt;p&gt;&lt;span&gt;基于对象图像分析(Object-based Image Analysis)&lt;/span&gt;&amp;nbsp;– 数字图像分析方法是对每一个像素的数据进行分析，而基于对象的图像分析方法则只分析相关像素的数据，这些相关像素被称为对象或图像对象。&lt;/p&gt;&lt;p&gt;&lt;span&gt;操作型数据库(Operational Databases)&lt;/span&gt;&amp;nbsp;– 这类数据库可以完成一个组织机构的常规操作，对商业运营非常重要，一般使用在线事务处理，允许用户访问 、收集、检索公司内部的具体信息。&lt;/p&gt;&lt;p&gt;&lt;span&gt;优化分析(Optimization analysis)&lt;/span&gt;&amp;nbsp;– 在产品设计周期依靠算法来实现的优化过程，在这一过程中，公司可以设计各种各样的产品并测试这些产品是否满足预设值。&lt;/p&gt;&lt;p&gt;&lt;span&gt;本体论(Ontology)&lt;/span&gt;&amp;nbsp;– 表示知识本体，用于定义一个领域中的概念集及概念之间的关系的一种哲学思想。(译者注: 数据被提高到哲学的高度，被赋予了世界本体的意义，成为一个独立的客观数据世界)&lt;/p&gt;&lt;p&gt;&lt;span&gt;异常值检测(Outlier detection)&lt;/span&gt;&amp;nbsp;– 异常值是指严重偏离一个数据集或一个数据组合总平均值的对象，该对象与数据集中的其他它相去甚远，因此，异常值的出现意味着系统发生问题，需要对此另加分析。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;P&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;模式识别(Pattern Recognition)&lt;/span&gt;&amp;nbsp;– 通过算法来识别数据中的模式，并对同一数据源中的新数据作出预测&lt;/p&gt;&lt;p&gt;&lt;span&gt;P字节(PB: Petabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 TB(terabytes), 约等于1百万 GB (gigabytes)。欧洲核子研究中心(CERN)大型强子对撞机每秒产生的粒子个数就约为1 PB&lt;/p&gt;&lt;p&gt;&lt;span&gt;平台即服务(PaaS: Platform-as-a-Service)&lt;/span&gt;&amp;nbsp;– 为云计算解决方案提供所有必需的基础平台的一种服务&lt;/p&gt;&lt;p&gt;&lt;span&gt;预测分析(Predictive analysis)&lt;/span&gt;&amp;nbsp;– 大数据分析方法中最有价值的一种分析方法，这种方法有助于预测个人未来(近期)的行为，例如某人很可能会买某些商品，可能会访问某些网站，做某些事情或者产生某种行为。通过使用各种不同的数据集，例如历史数据，事务数据，社交数据，或者客户的个人信息数据，来识别风险和机遇&lt;/p&gt;&lt;p&gt;&lt;span&gt;隐私(Privacy)&lt;/span&gt;&amp;nbsp;– 把具有可识别出个人信息的数据与其他数据分离开，以确保用户隐私。&lt;/p&gt;&lt;p&gt;&lt;span&gt;公共数据(Public data)&lt;/span&gt;&amp;nbsp;– 由公共基金创建的公共信息或公共数据集。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;Q&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数字化自我(Quantified Self)&lt;/span&gt;&amp;nbsp;– 使用应用程序跟踪用户一天的一举一动，从而更好地理解其相关的行为&lt;/p&gt;&lt;p&gt;&lt;span&gt;查询(Query)&lt;/span&gt;&amp;nbsp;– 查找某个问题答案的相关信息&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;再识别(Re-identification)&lt;/span&gt;&amp;nbsp;– 将多个数据集合并在一起，从匿名化的数据中识别出个人信息&lt;/p&gt;&lt;p&gt;&lt;span&gt;回归分析(Regression analysis)&lt;/span&gt;&amp;nbsp;– 确定两个变量间的依赖关系。这种方法假设两个变量之间存在单向的因果关系(译者注：自变量，因变量，二者不可互换)&lt;/p&gt;&lt;p&gt;&lt;span&gt;RFID&lt;/span&gt;&amp;nbsp;– 射频识别; 这种识别技术使用一种无线非接触式射频电磁场传感器来传输数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;实时数据(Real-time data)&lt;/span&gt;&amp;nbsp;– 指在几毫秒内被创建、处理、存储、分析并显示的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;推荐引擎(Recommendation engine)&lt;/span&gt;&amp;nbsp;– 推荐引擎算法根据用户之前的购买行为或其他购买行为向用户推荐某种产品&lt;/p&gt;&lt;p&gt;&lt;span&gt;路径分析(Routing analysis)&lt;/span&gt;&amp;nbsp;– 针对某种运输方法通过使用多种不同的变量分析从而找到一条最优路径，以达到降低燃料费用，提高效率的目的&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;半结构化数据(Semi-structured data)&lt;/span&gt;&amp;nbsp;– 半结构化数据并不具有结构化数据严格的存储结构，但它可以使用标签或其他形式的标记方式以保证数据的层次结构&lt;/p&gt;&lt;p&gt;&lt;span&gt;情感分析(Sentiment Analysis)&lt;/span&gt;&amp;nbsp;– 通过算法分析出人们是如何看待某些话题&lt;/p&gt;&lt;p&gt;&lt;span&gt;信号分析(Signal analysis)&lt;/span&gt;&amp;nbsp;– 指通过度量随时间或空间变化的物理量来分析产品的性能。特别是使用传感器数据。&lt;/p&gt;&lt;p&gt;&lt;span&gt;相似性搜索(Similarity searches)&lt;/span&gt;&amp;nbsp;– 在数据库中查询最相似的对象，这里所说的数据对象可以是任意类型的数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;仿真分析(Simulation analysis)&lt;/span&gt;&amp;nbsp;– 仿真是指模拟真实环境中进程或系统的操作。仿真分析可以在仿真时考虑多种不同的变量，确保产品性能达到最优&lt;/p&gt;&lt;p&gt;&lt;span&gt;智能网格(Smart grid)&lt;/span&gt;&amp;nbsp;– 是指在能源网中使用传感器实时监控其运行状态，有助于提高效率&lt;/p&gt;&lt;p&gt;&lt;span&gt;软件即服务(SaaS: Software-as-a-Service)&lt;/span&gt;&amp;nbsp;– 基于Web的通过浏览器使用的一种应用软件&lt;/p&gt;&lt;p&gt;&lt;span&gt;空间分析(Spatial analysis)&lt;/span&gt;&amp;nbsp;– 空间分析法分析地理信息或拓扑信息这类空间数据，从中得出分布在地理空间中的数据的模式和规律&lt;/p&gt;&lt;p&gt;&lt;span&gt;SQL&lt;/span&gt;&amp;nbsp;– 在关系型数据库中，用于检索数据的一种编程语言&lt;/p&gt;&lt;p&gt;&lt;span&gt;结构化数据(Structured data)&lt;/span&gt;&amp;nbsp;-可以组织成行列结构，可识别的数据。这类数据通常是一条记录，或者一个文件，或者是被正确标记过的数据中的某一个字段，并且可以被精确地定位到。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;T字节(TB: Terabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 GB(gigabytes)。1 TB容量可以存储约300小时的高清视频。&lt;/p&gt;&lt;p&gt;&lt;span&gt;时序分析(Time series analysis)&lt;/span&gt;&amp;nbsp;– 分析在重复测量时间里获得的定义良好的数据。分析的数据必须是良好定义的，并且要取自相同时间间隔的连续时间点。&lt;/p&gt;&lt;p&gt;&lt;span&gt;拓扑数据分析(Topological Data Analysis)&lt;/span&gt;&amp;nbsp;– 拓扑数据分析主要关注三点：复合数据模型、集群的识别、以及数据的统计学意义。&lt;/p&gt;&lt;p&gt;&lt;span&gt;交易数据(Transactional data)&lt;/span&gt;&amp;nbsp;– 随时间变化的动态数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;透明性(Transparency)&lt;/span&gt;&amp;nbsp;– 消费者想要知道他们的数据有什么作用、被作何处理，而组织机构则把这些信息都透明化了。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;U&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;非结构化数据(Un-structured data)&lt;/span&gt;&amp;nbsp;– 非结构化数据一般被认为是大量纯文本数据，其中还可能包含日期，数字和实例。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;V&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;价值(Value)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 所有可用的数据，能为组织机构、社会、消费者创造出巨大的价值。这意味着各大企业及整个产业都将从大数据中获益。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可变性(Variability)&lt;/span&gt;&amp;nbsp;– 也就是说，数据的含义总是在(快速)变化的。例如，一个词在相同的推文中可以有完全不同的意思。&lt;/p&gt;&lt;p&gt;&lt;span&gt;多样(Variety)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 数据总是以各种不同的形式呈现，如结构化数据，半结构化数据，非结构化数据，甚至还有复杂结构化数据&lt;/p&gt;&lt;p&gt;&lt;span&gt;高速(Velocity)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 在大数据时代，数据的创建、存储、分析、虚拟化都要求被高速处理。&lt;/p&gt;&lt;p&gt;&lt;span&gt;真实性(Veracity)&lt;/span&gt;&amp;nbsp;– 组织机构需要确保数据的真实性，才能保证数据分析的正确性。因此，真实性(Veracity)是指数据的正确性。&lt;/p&gt;&lt;p&gt;&lt;span&gt;可视化(Visualization)&lt;/span&gt;&amp;nbsp;– 只有正确的可视化，原始数据才可被投入使用。这里的“可视化”并非普通的图型或饼图，可视化指是的复杂的图表，图表中包含大量的数据信息，但可以被很容易地理解和阅读。&lt;/p&gt;&lt;p&gt;&lt;span&gt;大量(Volume)&lt;/span&gt;&amp;nbsp;– (译者注：大数据4V特点之一) 指数据量，范围从Megabytes至Brontobytes&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;W&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;天气数据(Weather data)&lt;/span&gt;&amp;nbsp;– 是一种重要的开放公共数据来源，如果与其他数据来源合成在一起，可以为相关组织机构提供深入分析的依据&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;X&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;XML数据库(XML Databases)&lt;/span&gt;&amp;nbsp;– XML数据库是一种以XML格式存储数据的数据库。XML数据库通常与面向文档型数据库相关联，开发人员可以对XML数据库的数据进行查询，导出以及按指定的格式序列化&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;Y&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Y字节 (Yottabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 ZB (Zettabytes), 约等于250万亿张DVD的数据容量。现今，整个数字化宇宙的数据量为1 YB, 并且将每18年翻一番。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;Z&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;Z字节 (ZB: Zettabytes)&lt;/span&gt;&amp;nbsp;– 约等于1000 EB (Exabytes), 约等于1百万 TB。据预测，到2016年全球范围内每天网络上通过的信息大约能达到1 ZB。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;附：存储容量单位换算表：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1 Bit(比特) = Binary Digit&lt;/p&gt;&lt;p&gt;8 Bits = 1 Byte(字节)&lt;/p&gt;&lt;p&gt;1,000 Bytes = 1 Kilobyte&lt;/p&gt;&lt;p&gt;1,000 Kilobytes = 1 Megabyte&lt;/p&gt;&lt;p&gt;1,000 Megabytes = 1 Gigabyte&lt;/p&gt;&lt;p&gt;1,000 Gigabytes = 1 Terabyte&lt;/p&gt;&lt;p&gt;1,000 Terabytes = 1 Petabyte&lt;/p&gt;&lt;p&gt;1,000 Petabytes = 1 Exabyte&lt;/p&gt;&lt;p&gt;1,000 Exabytes = 1 Zettabyte&lt;/p&gt;&lt;p&gt;1,000 Zettabytes = 1 Yottabyte&lt;/p&gt;&lt;p&gt;1,000 Yottabytes = 1 Brontobyte&lt;/p&gt;&lt;p&gt;1,000 Brontobytes = 1 Geopbyte&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 23 Sep 2016 09:30:41 +0800</pubDate>
    </item>
    <item>
      <title>KDnuggets 官方调查：数据科学家最常用的十种算法</title>
      <link>http://www.iwgc.cn/link/2804447</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEQUEjM2SyvJ57hskHx91GZZVExzM2BUWIJJTMjWNsdQbhe22hoIzNVQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;译者：机器之心&lt;/p&gt;&lt;p&gt;最新一期的 KDnuggets 调查展示了一份数据科学家使用度最高的算法列表，这份列表中包含了很多惊喜，包括最学术的算法和面向产业化的算法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;哪些方法/算法是您在过去 12 个月中运用到一个实际的数据科学相关的应用程序中的?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;这是基于 844 个投票者的结果。&lt;/p&gt;&lt;p&gt;排名前十的算法以及他们的投票者的比例分布如下：&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVECY4ibYMfuANhBYtupriajhSGicQ0T32aSdoZ3J8F2KQkJBfwOHOG5NoVw/0?wx_fmt=jpeg"/&gt;&lt;/center&gt;&lt;p&gt;图 1 ：数据科学家使用度最高的 10 大算法&lt;/p&gt;&lt;p&gt;每个受访者平均使用 8.1 个算法，这相比于 2011 的相似调查显示的结果有了巨大的增长。&lt;/p&gt;&lt;p&gt;与 2011 年关于数据分析/数据挖掘的调查相比，我们注意到最常用的方法仍然是回归、聚类、决策树/Rules 和可视化。&lt;span&gt;相对来说最大的增长是由 (pct2016 /pct2011 – 1) 测定的以下算法：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;Boosting，从 2011 年的 23.5% 至 2016 年的 32.8%，同比增长 40%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;文本挖掘，从 2011 年的 27.7% 至 2016 年的 35.9%，同比增长 30%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;可视化，从 2011 年的 38.3% 至 2016 年的 48.7%，同比增长 27%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;时间序列/序列分析，从 2011 年的 29.6% 至 2016 年的 37.0%，同比增长 25%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;异常/偏差检测，从 2011 年的 16.4% 至 2016 年的 19.5%，同比增长 19%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;集成方法，从 2011 年的 28.3%至 2016 年的 33.6%，同比增长 19%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持向量机，从 2011 年的 28.6% 至 2016 年的 33.6%，同比增长 18%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;回归，从 2011 年的 57.9% 至 2016 年的 67.1%，同比增长 16%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;最受欢迎算法在 2016 年的调查中有了新的上榜名单：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;K-近邻，46%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;主成分分析，43%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;随机森林，38%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;优化，24%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;神经网络 – 深度学习，19%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;奇异值分解，16%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;span&gt;最大幅下降的有：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;关联规则，从 2011 年的 28.6% 至 2016 年的 15.3%，同比下降 47%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;隆起造型，从 2011 年的 4.8% 至 2016 年的 3.1%，同比下降 36%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;因素分析，从 2011 年的 18.6% 至 2016 年的 14.2%，同比下降 24%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;生存分析，从 2011 年的 9.3% 至 2016 年的 7.9%，同比下降 15%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下表显示了不同的算法类型的使用：监督算法、无监督算法、元算法，以及职业类型决定的对算法的使用。我们排除 NA(4.5%)和其他(3%)的职业类型。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEbkg47xsULde1jNYLamuHnHKEMXHaFDxbiaOpEeo8rFIH4ddicib3RrrXA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;表 1：根据职业类型显示的不同算法使用度&lt;/p&gt;&lt;p&gt;我们注意到，几乎每个人都使用监督学习算法。&lt;/p&gt;&lt;p&gt;政府和产业业数据科学家比学生和学术研究人员使用更多不同类型的算法，而产业数据科学家们更倾向于使用元算法。&lt;/p&gt;&lt;p&gt;接下来，我们根据职业类型分析了前 10 名的算法+深度学习使用情况。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVElXXosLDTkkM7MpRpu1iaWwucp3haC9h9Bryd2LSSiaCiabBgSibj9B9tYw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;表 2：根据职业类型分类的 10 大算法+深度学习使用情况&lt;/p&gt;&lt;p&gt;为了更明显的看到差异，我们计算了具体职业分类相比于平均算法使用度的一个算法偏差，即偏差(ALG，类型)=使用(ALG，类型)/使用(ALG，所有的)&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEdeTv3uwOlMfM8V7pGqNTcoIjmypicj2iaIYPduCskibe4ay95cibhKyWYg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;图 2：职业对算法的使用偏好&lt;/p&gt;&lt;p&gt;我们注意到，产业数据科学家们更倾向于使用回归、可视化、统计、随机森林和时间序列。政府/非营利更倾向于使用可视化、主成分分析和时间序列。学术研究人员更倾向于使用主成分分析和深度学习。学生普遍使用更少的算法，但多为文本挖掘和深度学习。&lt;/p&gt;&lt;p&gt;接下来，我们看看某一具体地域的参与度，表示整体的 KDnuggets 的用户：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;美国/加拿大，40%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;欧洲，32%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;亚洲，18%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;拉丁美洲，5%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;非洲/中东，3.4%&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;澳洲/新西兰，2.2%&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;由于在 2011 年的调查中，我们将产业/政府分在了一组，而将学术研究/学生分在了第二组，并计算了算法对于业界/政府的亲切度：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEricvgNVn7YWmJTzgo4NyX3MKSQTibKOFSURBAn0CS0jwo4IEicsg3lrBQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;因此亲切度为 0 的算法表示它在产业/政府和学术研究人员或学生之间的使用情况对等。越高 IG 亲切度表示算法越被产业界普遍使用，反之越接近「学术」。&lt;/p&gt;&lt;p&gt;&lt;span&gt;最「产业」的算法是：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;异常检测，1.61&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;生存分析，1.39&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;因子分析，0.83&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;时间序列/序列，0.69&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;关联规则，0.5&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而 uplifting modeling 又是最「产业的算法」，令人惊讶的发现是，它的使用率极低 – 只有 3.1% – 是本次调查的算法中最低的。&lt;/p&gt;&lt;p&gt;&lt;span&gt;最学术的算法是：&lt;/span&gt;&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;常规神经网络，-0.35&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;朴素贝叶斯，-0.35&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;支持向量机，-0.24&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;深度学习，-0.19&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;EM，-0.17&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下图显示了所有的算法及其产业/学术亲切度。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEJMWaeeP74ShKKeTTX7ILezvA2KNNq2pgHcZgVQWA1sPhuXII63k6Nw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;图 3：KDnuggets 投票：最常被数据科学家使用的算法：产业界 VS 学术界&lt;/p&gt;&lt;p&gt;下表有关于算法的细节、两次调查中使用算法的比例、以及像上面解释的产业亲切度。&lt;/p&gt;&lt;p&gt;接下来的图表展示了算法的细节，按列&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;N：根据使用度排名&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;算法：算法名称，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;类型：S – 监督，U – 无监督，M – 元，Z – 其他，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在 2016 年调查中使用这种算法的调查者比例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;在 2011 年调查中使用这种算法的调查者比例&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;变动(%2016 年/2011% – 1)，&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;产业亲切度(如上所述)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEj8r1zKboIleqjowP8Wgk94ia8Ceq9UL8ibib3LcxbLcgXic8NynL7WYZicA/0?wx_fmt=jpeg"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibz9iaFsOHeDZSSteGwwlDtVEibicWN08teic5fSZxbUgJ7yKbaUxHaqIQ6Sr04pxJTxYyq00XAiagn4Xgg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;表 3：KDnuggets 2016 调查：数据科学家使用的算法&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Fri, 23 Sep 2016 09:30:41 +0800</pubDate>
    </item>
    <item>
      <title>用Python写一个命令行火车票查看器</title>
      <link>http://www.iwgc.cn/link/2789164</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicdQsb7NxL6hXBicTH1icpTaYmkPPG0afN1vnFbSgertI02qYvZqnSFlVg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：protream&lt;/p&gt;&lt;p&gt;当你想查询一下火车票信息的时候，你还在上12306官网吗?或是打开你手机里的APP?下面让我们来用Python写一个命令行版的火车票查看器, 只要在命令行敲一行命令就能获得你想要的火车票信息!如果你刚掌握了Python基础，这将是个不错的小练习。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;接口设计&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;一个应用写出来最终是要给人使用的，哪怕只是给你自己使用。所以，首先应该想想你希望怎么使用它?让我们先给这个小应用起个名字吧，既然及查询票务信息，那就叫它tickets好了。我们希望用户只要输入出发站，到达站以及日期就让就能获得想要的信息，所以tickets应该这样被使用：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicibbMJjSL8xqIRibmSJgY6sT7EWEqLmso99xW5dxnNzlWvqjBDG5H9KDQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;另外，火车有各种类型，高铁、动车、特快、快速和直达，我们希望可以提供选项只查询特定的一种或几种的火车，所以，我们应该有下面这些选项：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;-g 高铁&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-d 动车&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-t 特快&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-k 快速&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;-z 直达&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这几个选项应该能被组合使用，所以，最终我们的接口应该是这个样子的：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic6A3sWIzHz1pILTgiaibrhyWR1Ogmh0V5gficNDicvnsmficSmHtaOEnYM4A/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;接口已经确定好了，剩下的就是实现它了。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;开发环境&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;写Python程序的一个良好实践是使用virtualenv这个工具建一个虚拟的环境。我们的程序使用Python3开发，下面在你的工作目录下建一个文件夹tickets，进去创建一个虚拟环境：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicIpZlZYKymTNgAv9VxWymf7ianOibqOOhib5TGibkBLLfTBTwcDzt9eSLPg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;通过下面的命令激活它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipicc4X9AC1teWUQdgEUnYY5mRXBiaZBA4Burn8TMVMdI7nn5Ric3ejyDqeA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;解析参数&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;Python有很多写命令行应用的工具，如argparse, docopt, options...这里，我们选用docopt这个简单易用的工具，我们先安装它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicFSyDfghU9GtQ2a6YXOGulgKR6TKjrWnfVvzQjvJiauDgRlcutODiaH1g/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;docopt可以按我们在文档字符串中定义的格式来解析参数，在tickets.py中：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic23uiaIPUJvKp2eic3iauQtusORoJk9CEobibzyF4p5wLaHv7srFDrHII3Q/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;下面我们运行一下这个程序：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicYuWM6EXkSt8FIjXWTdqTsUfDmTH0sibicp4yEvYkrMCibib9khGlVWmmYA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;我们得到下面的参数解析结果：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;{'-d': False, '-g': False, '-k': False, '-t': False, '-z': False, '': '2016-07-01', '': '上海', '': '北京'}&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;获取数据&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;参数已经解析好了，下面就是如何获取数据了，这也是最主要的部分。&lt;/span&gt;首先我们打开12306，进入余票查询页面，如果你使用chrome，那么按F12打开开发者工具，选中Network一栏，在查询框钟我们输入上海到北京，日期2016-07-01, 点击查询，我们在调试工具发现，查询系统实际上请求了这个URL :&lt;/p&gt;&lt;p&gt;https://kyfw.12306.cn/otn/lcxxcx/query?purpose_codes=ADULT&amp;amp;queryDate=2016-07-01&amp;amp;from_station=SHH&amp;amp;to_station=BJP&lt;/p&gt;&lt;p&gt;并且返回的是JSON格式的数据!接下来问题就简单了，我们只需要构建请求URL然后解析返回的JSON数据就可以了。但是我们发现，URL里面from_station和to_station并不是汉字，而是一个代号，而用户输入的是汉字，我们要如何获取代号呢?我们打开网页源码看看有没有什么发现。&lt;/p&gt;&lt;p&gt;啊哈!果然，我们在网页里面找到了这个链接：点我, 这里面貌似是包含了所有车站的中文名，拼音，简写和代号等信息, 我们在项目目录下将它保存为stations.html。但是这些信息挤在一起，而我们只想要中文名和大写字母的代号信息，怎么办呢?&lt;/p&gt;&lt;p&gt;BINGO!正则表达式，我们写个小脚本来匹配提取出想要的信息吧, 在parse.py中：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicAna1YYnNibVyibIAuGV1Zg6OAdKOUAJicYTKZKTsLsBZiaH5rFHeApIobA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;我们运行这个脚本，它将以字典的形式返回所有车站和它的大写字母代号, 我们将结果重定向到stations.py中，&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicUZ0GxyjvGl5ficu4qkXhF4FgRrN0Z0O4l3bHmicaBc00Ga4nDJNicHOFw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;我们为这个字典加名字，stations, 最终，stations.py文件是这样的：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicY4JmSntQSc8RxmZpb6r07qJib3TaVtQ9BqWiaQGVbrBYdtoWTKJ5TvpQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;现在，用户输入车站的中文名，我们就可以直接从这个字典中获取它的字母代码了：&lt;/p&gt;&lt;p&gt;...&lt;/p&gt;&lt;p&gt;from stations import stations&lt;/p&gt;&lt;p&gt;def cli():&lt;/p&gt;&lt;p&gt;arguments = docopt(__doc__)&lt;/p&gt;&lt;p&gt;from_staion = stations.get(arguments[''])&lt;/p&gt;&lt;p&gt;to_station = stations.get(arguments[''])&lt;/p&gt;&lt;p&gt;date = arguments['']&lt;/p&gt;&lt;p&gt;# 构建URL&lt;/p&gt;&lt;p&gt;url = 'https://kyfw.12306.cn/otn/lcxxcx/query?purpose_codes=ADULT&amp;amp;queryDate={}&amp;amp;from_station={}&amp;amp;to_station={}'.format(date, from_staion, to_station)&lt;/p&gt;&lt;p&gt;万事俱备，下面我们来请求这个URL获取数据吧!这里我们使用requests这个库, 先安装它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipicibbjtahw2pU90cxWMXH09hB1icYfsXQzGESeutXET6aKJ1fJkob1RicbQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;它提供了非常简单易用的接口，&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpiciaCtlwGaNl0N8MrP5L1jDJyJmuLkb3ibEZRQCwVXIDa6XKKfMEuwUVuA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;从结果中，我们可以观察到，与车票有关的信息需要进一步提取：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicrRC0zOYtkqjFfLfPUghE1gKTyVhAibM3OpAZNv7qFItX0qXEUu8CqUw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;显示结果&lt;/p&gt;&lt;p&gt;数据已经获取到了，剩下的就是提取我们要的信息并将它显示出来。prettytable这个库可以让我们它像MySQL数据库那样格式化显示数据。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicpTNwtSeVIdc72GPWzHwENPq28jXcyXnYFe2Eg6ro61V14LibrEeYeiaQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;这样使用它：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipick1swZWvNiaxsicDx0rbThIdcFlVyj8qr5SXjR27Kk3Tic37fkZ3ljmpyA/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;练习&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;下面一些问题留给你做练习:&lt;/p&gt;&lt;ol style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;从每一行row中按照headers过滤信息，将结果添加到prettytable中&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;像开始的图片中那样将出发站和到达站，出发时间和到达时间显示为一列&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加颜色(提示：使用colorama, termcorlor或ANSI转义字符)&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加异常处理，如果用户输入的车站或日期有错误怎么办?如果网络异常怎么办?...&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加更多的日期格式支持: 比如用户输入20160701也可以查&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;添加参数支持，用户可以指定火车类型&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果你还有问题，可以去github查看源码, 或者来我的博客下面提问:&lt;/p&gt;&lt;p&gt;Github: https://github.com/protream/tickets&lt;/p&gt;&lt;p&gt;Blog: https://protream.github.io&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 22 Sep 2016 09:39:11 +0800</pubDate>
    </item>
    <item>
      <title>投稿 | 电信运营商数据价值跨行业运营的现状与思考</title>
      <link>http://www.iwgc.cn/link/2789165</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic6s7aoxuxzMsLkBZWDtufav18icia3ib9tJ3hMeKOcxl01AibyV5TguibJTg/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：黄文&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;一、电信运营商数据资源概况与比较优势&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;电信运营商作为信息社会的综合信息服务商，拥有天然的数据管道优势，运营商的网络系统与业务平台中数据详细记录了人在现代化社会的信息指纹(如图1)。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic2icXqu99bKYoxwXapxrUyS3iaqiaWL6BNRico1gxmzPq4ZcgLFesdia5rwA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图1 电信运营商数据概况&lt;/p&gt;&lt;p&gt;运营商客户的上网和通话行为、位置轨迹等都以BIT的形式流淌在运营商的管道里，而且这些数据是长期积累在运营商的数据管道里的。因此，电信运营商数据的丰富性、连续性、完整性具有得天独厚的优势，具体来说，运营商数据具有“真、大、快、活、全”五大特点(见图2)。同时，在跨行业应用领域，运营商数据在数据补全、交叉验证等方面也有明显优势。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic1NTbGAI5hq216RHuZ4SNOCDzv3JIPUwNGEsH7eCTxWN4AYswia9eXEQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图2 电信运营商数据的特点与优势&lt;/p&gt;&lt;p&gt;另外，相对于BAT来说，电信运营商的数据仍然有一定的优势(见图3)：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicDsHbwCRTusMvMzvSOOeAwgbYabicPVDdKutdEg5EFU9WpYibTrlxNKrA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图3 电信运营商数据与BAT的比较&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;二、运营商大数据跨行业应用的形势研判&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;span&gt;数据的跨界融合是释放数据价值的必由路径。&lt;/span&gt;数据具有天然的外部性，数据主体认为没有价值的信息在其他数据需求方来说可能存在很大价值。比如，我们买房的数据对装修装饰机构、房产中介机构是非常有价值的，已经被房地产开发商等在我们不知情的情况下被变卖多次。&lt;/p&gt;&lt;p&gt;&lt;span&gt;当前，国内各行业的数据壁垒是广泛存在的，数据的开放与融合对于促进社会信息文明、释放数据红利，造福国计民生是大有裨益的。&lt;/span&gt;促进数据合理合法的开放与流动已成为政府和业界的广泛共识。目前，国内正在兴起的大数据交易所、大数据产业联盟就是顺应这一趋势而形成的。&lt;span&gt;我们有理由相信，数据的跨界融合与流动，是推动大数据产业应用落地、释放数据价值的必由之路。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;国内企业级SaaS应用的春天即将到来。近两年来，SaaS因其采购成本低、使用简单方便、功能与使用场景契合度高等特点，在2B市场正取代传统的软件服务形态，逐步成为企业服务的重要力量。SaaS(Software as a Service)，软件即服务，是基于互联网快速发展而产生的面向最终用户的产品服务模式，而移动互联网的普及更是加快了SaaS的发展进程。&lt;/p&gt;&lt;p&gt;我们看到，2014年之后，随着移动互联网的高速普及以及企业管理需求被发现，加之资本市场加速了在企业服务领域的布局，无论是在投资力度还是在数量方面在加码企业服务市场，企业级SaaS都迎来了高速发展时期。&lt;span&gt;据权威媒体分析，2015年，中国SaaS市场融资总额达到40亿元，累计上百起投融资事件，IDG、红杉等多家投资机构开抢2B项目，抢占赛道。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;2015年，在资本的刺激之下，企业级服务市场开始井喷，一个万亿级的蓝海市场正在形成。据艾媒咨询报告显示，2015年国内企业级SaaS市场规模达到200亿元人民币，增长率高达70%。&lt;/p&gt;&lt;p&gt;在企业高效运营管理需求、移动互联网应用条件不断成熟等多方因素推动下，市场规模仍将保持高速增长，预计2016年市场规模将超过300亿元人民币。我们相信企业级SaaS服务市场明媚的春天真的来到了，大数据行业的面向行业客户的企业级SaaS服务市场也必将迎来井喷期。&lt;/p&gt;&lt;p&gt;运营商数据跨行业应用场景丰富、前景广阔。运营商数据因其真实性、连续性、完整性等特点，在国内大数据领域已成为一支具有重大影响力、不可或缺的力量。&lt;/p&gt;&lt;p&gt;运营商最有价值的数据主要是身份信息、位置数据、上网日志、社交信息等，这些数据在其它行业中能找到非常广泛的应用场景(见图4)。&lt;/p&gt;&lt;p&gt;&lt;span&gt;比如：运营商大数据+交通，可应用于交通实时监测和城市公交线路规划等;运营商大数据+金融，可应用于获客、风控等场景;运营商大数据+旅游，可应用于景区客流监测与预警等;运营商大数据+零售，可应用于商圈价值评估、门店选址等。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicSxxemHILiaAzANhCXlzrvIPM4lb8T6oARkDtEAOIYnm2DO7VvgcB0xQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图4 运营商大数据的跨行业应用场景与方向&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;三、运营商自身实践大数据跨界运营存在诸多挑战&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;当前，运营商数据跨界运营市场正处在萌芽期，电信运营商及其子公司、亚信等第三方系统集成商、征信机构等多方势力均在参与其中。中国联通和中国电信在数据对外跨界运营服务方面目前胆量和力度较大，但这个市场只有在中国移动业动作起来时才会迎来真正的春天。&lt;/p&gt;&lt;p&gt;目前，中国移动先进省份(如浙江)已经在落实自主运营了，个人认为这块市场还有1-3年的窗口期，有实力的厂商应加紧布局、抢滩卡位。&lt;/p&gt;&lt;p&gt;&lt;span&gt;运营商自身实践大数据跨界运营存在着诸多挑战。&lt;/span&gt;前面提到，运营商大数据跨界运营领域存在多种力量的角逐，运营商自己也在耕耘这个细分领域。那为什么说第三方还有机会呢?这与运营商自身的体制有较大关系。运营商自身在大数据跨界运营方面面临多方面的挑战：&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战一：有数据难整合。&lt;/span&gt;运营商虽然坐拥海量数据，但数据在组织中却因为不同线条和部门的存在而处于割裂状态，拥有数据的部门之间往往缺乏顺畅的数据共享机制，加上各种烟囱平台的存在，数据的标准可能都有不兼容的情况，如何实现跨业务、跨平台的关联与整合成为运营商最大的挑战;同时，由于互联网上大量非结构数据的存在，运营商还面临着将非结构化数据与结构化数据进行统一、整合的挑战。这一系列的挑战使得运营商的数据一直处于分散和休眠的状态，无法真正发挥其潜在价值。&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战二：有需求难操作。&lt;/span&gt;对运营商而言，信息安全一直是一个无法逾越的关键问题。由于运营商数据中包含了大量的用户基本信息，这其中涉及大量的个人隐私，一旦泄露并被不法分子利用，会给用户和运营商带来不可估量的损失。从国内的市场来看，有数据泄露引发的信息安全事件，在媒体的推波助澜下，极有可能成为让运营商跌入万劫不复之地。因此，运营商在数据开放与对外合作方面一直都很保守和谨慎。&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战三：有想法无承载。&lt;/span&gt;即使不考虑数据质量和隐私风险，运营商实现大数据变现还需要面对组织和流程上的空白。大数据应用是一个系统工程，其开发、建设、产品、营销、运营等环节都需要有具体的部门去承载和落实。然而，国内运营商现实的问题是，已有的组织架构和流程规范都是基于传统业务来制定的，对于大数据这样的新兴领域，往往都是基于各自的理解或资源的分布，各省市公司都缺少统一的运营规范和模式范式，更无法形成自上而下的力量来贯穿，如散兵游勇一般。&lt;/p&gt;&lt;p&gt;&lt;span&gt;挑战四：有机会难实施。&lt;/span&gt;抛开组织和流程的问题，能力和机制更是运营商绕不开的门槛。大数据属于技术密集型领域，技术专家(解决建模与架构)和复合型人才(解决跨行业的Know How)的匮乏一直困扰着运营商，虽然短期可通过合作的方式解决，但长期来看还需自建团队实现能力内化和储备。而这往往需要在人力资源的开发、核心人才的引进以及激励机制的革新等方面下功夫。&lt;/p&gt;&lt;p&gt;总而言之，由于制度规范、业务模式、技术对接、人才储备等诸多限制，运营商大数据在跨界运营领域仍是步履蹒跚的。靠运营商自身的力量是无法很好地完成与其它行业客户的端到端的业务打通的，因此，这位第三方公司提供了很好的参与机会。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;四、运营商大数据跨行业运营的策略与路径&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;以下笔者站在第三方公司角度，来谈谈如何接入到运营商大数据跨界运营这个细分领域中。具体的指导思想可概括为：&lt;span&gt;重点关注四大行业、深入三个业务领域，建立深度合作运营方式，跨越四道障碍，实现从0到1的跨越。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;运营商大数据跨界应用需重点关注四大行业：金融、交通、旅游、零售。如下表1：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic1sBe6dEXkCxQjzvhSBLzVsr9grmI5PuKLTCRptoqH5AicaYltcLyvCQ/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;表1 运营商大数据的四大应用行业&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;运营商大数据跨界运营最有价值的三大领域：征信、RTB和客户洞察(如图5)。运营商数据因其真实性、维度丰富、覆盖面广等特点，对于在央行无信用记录的用户来说是一个很好的增信补充，金融机构借助运营商数据能对贷款客户进行信用评估和分级，决定贷款与授信策略;RTB全称是Real Time Bidding即实时竞价，是时下互联网广告领域最流行的新名词。&lt;/p&gt;&lt;p&gt;&lt;span&gt;RTB主要特点在于：&lt;/span&gt;一方面基于大数据技术可以协助广告主投放过程更加精准、透明、高效、可控，从而投放效果ROI更高;另外一方面基于实时竞价机制可以协助互联网媒体获得更高的收入。&lt;/p&gt;&lt;p&gt;相对于互联网企业，运营商在RTB最大的优势在于其拥有网络管道优势上的大数据，除了客户的基本属性之外，还有大量的、实时的客户互联网行为数据;客户洞察，即基于运营商的数据能为行业客户提供了解其自身用户的一面窗口，完善客户画像标签体系、打破信息不对称，帮助行业客户加强自身客户的深入洞察。&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicwIiaGfBzgUhicKe6mQSMLucH9Adia1bMJAdom6ERAVuiamTlAJvB0ncAWw/0?wx_fmt=png"/&gt;&lt;/center&gt;&lt;p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;图5 运营商数据最有价值的三大应用领域&lt;/center&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;运营商大数据跨界运营落地的关键是要建立运营商数据跨界运营平台，数据产品设计与运营是运营商数据价值释放的关键。&lt;/span&gt;该数据服务平台承载的任务是运营商数据的深度加工与分析展现(如图6)，最终以B/S架构的形成SaaS服务，为行业客户提供三个层面的价值：告诉客户他们所不知不知道的(信息价值)、告诉客户他们可以做什么(决策价值)、帮助客户做他们不能做到的(操作价值)。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic2RnZBKoyYT65V0xh2MyMO3fHibicNbQfsF6eKWMqcaospueeogRPhfFg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;图6 数据跨界运营平台的业务逻辑与价值实现&lt;/center&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;br/&gt;&lt;/center&gt;&lt;p&gt;&lt;p&gt;&lt;span&gt;作为第三方，为深度嵌入行业客户的业务价值链，建议与运营商采取深度合作运营的模式：即第三方与运营商形成战略合作关系&lt;/span&gt;，在运营商的数据环境下，搭建开放的数据挖掘平台，运营商输出数据、提供存储能力和计算能力，第三方公司在这个平台上进行数据挖掘建模与数据产品加载工作，数据建模成果、数据产品应用输出的收益由运营商和第三方公司共享。在此模式下，第三方获取运营商数据，并对运营商数据进行深度加工，形成有行业意义的数据产出物，并以SaaS服务的方式提供给行业客户，最终实现多方共赢的局面(如图7)。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipic1rfEz8VLWeFlRhic7R1n3aYT4hRc2FM99UsgEJJm0F9nsdBQeCcyKAg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图7 深度合作模式&lt;/p&gt;&lt;p&gt;基于运营商数据政策的限制，应采取的技术架构如下图8：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicBKRzYj8wEGkSVacErYyPGErzNqyoROHqSuJ8hliaIFIxdEYy7SZCZzA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图8 跨界运营平台的技术架构&lt;/p&gt;&lt;p&gt;运营商大数据跨界运营是一个比较难短期见效的市场，需要持续关注、耐心经营。&lt;span&gt;做好这块市场需要跨越四道障碍：数据依赖、用户隐私、商业模式和无缝对接&lt;/span&gt;(如图9)。&lt;/p&gt;&lt;p&gt;数据依赖指的是第三方对运营商数据有较强的依赖关系，一旦运营商掐住了数据管道，该模式的可持续性就存在很大的风险;&lt;/p&gt;&lt;p&gt;用户隐私是指当前环境下，如何合理有效的做到万无一失的避免用户信息泄露、保障信息安全，理论上是没有问题的，但实际上还是面临很多的不确定性;&lt;/p&gt;&lt;p&gt;商业模式是指目前仅仅与运营商在数据层面开展合作，对运营商自身的主营业务没有形成有效的刺激，这种业务模式对运营商的吸引力还是有限，需要寻求更多的、更好的商业模式;&lt;/p&gt;&lt;p&gt;无缝对接指的是在实际落地过程中，要对接多个客户、多个平台，要打通业务链条还是存在很多困难的，需要参与各方精诚协作，才可能克服困难、实现突破。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicKP5FdCk5NILDXtnwwiaibYIMDsj3GdyRmy7AMFPpCJ3KNwSjWnabd00Q/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;center style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;"&gt;&lt;/center&gt;&lt;p&gt;图9 运营商数据跨界运营需跨越四道障碍&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;五、结束语&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;运营商大数据跨界运营是一个全新的领域，虽然参与方都处于步履蹒跚的状态，但广阔的前景仍然吸引着众多参与方在积极探索、大胆创新。大数据需要边干边学、实践中调整，就如站在河边永远学不会游泳一样，运营商大数据跨界运营的实践比什么都重要。先合作试点，在项目中摸索出合作模式和解决方案，在解决方案的基础上提炼出数据产品，专心、专注、创新运营，才可能实现从0到1、从1到N。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 22 Sep 2016 09:39:11 +0800</pubDate>
    </item>
    <item>
      <title>GBDT：梯度提升决策树</title>
      <link>http://www.iwgc.cn/link/2789166</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicJpAM6gGnypLSPtV9dybjbw7sE8fmsicFZG0R22IMohyonicaq0v2XNdw/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;作者：SiyueLin&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;综述&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;GBDT(Gradient Boosting Decision Tree) 又叫 MART(Multiple Additive Regression Tree)，是一种迭代的决策树算法，该算法由多棵决策树组成，所有树的结论累加起来做最终答案。它在被提出之初就和SVM一起被认为是泛化能力较强的算法。&lt;/p&gt;&lt;p&gt;&lt;span&gt;GBDT中的树是回归树(不是分类树)，GBDT用来做回归预测，调整后也可以用于分类。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;GBDT的思想使其具有天然优势可以发现多种有区分性的特征以及特征组合。业界中，Facebook使用其来自动发现有效的特征、特征组合，来作为LR模型中的特征，以提高 CTR预估(Click-Through Rate Prediction)的准确性(详见参考文献5、6);GBDT在淘宝的搜索及预测业务上也发挥了重要作用(详见参考文献7)。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;一、Regression Decision Tree：回归树&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;回归树总体流程类似于分类树，区别在于，回归树的每一个节点都会得一个预测值，以年龄为例，该预测值等于属于这个节点的所有人年龄的平均值。分枝时穷举每一个feature的每个阈值找最好的分割点，但衡量最好的标准不再是最大熵，而是最小化平方误差。也就是被预测出错的人数越多，错的越离谱，平方误差就越大，通过最小化平方误差能够找到最可靠的分枝依据。分枝直到每个叶子节点上人的年龄都唯一或者达到预设的终止条件(如叶子个数上限)，若最终叶子节点上人的年龄不唯一，则以该节点上所有人的平均年龄做为该叶子节点的预测年龄。(引用自一篇博客，详见参考文献3)&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicRVjv78NLXjdZzBMM6EJhUVmqubA9WiaSttcevqqyPXgOXr1WmCRp1OA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;回归树示例&lt;/p&gt;&lt;p&gt;回归树算法如下图(截图来自《统计学习方法》5.5.1 CART生成)：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3Ipicia6P1tvsAIiaaHWP574iavPSMsbLDaOf2UBicPibKKichCWsdEGYM1QcUPjA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;回归树生成算法&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;二、Boosting Decision Tree：提升树算法&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;提升树是迭代多棵回归树来共同决策。当采用平方误差损失函数时，每一棵回归树学习的是之前所有树的结论和残差，拟合得到一个当前的残差回归树，残差的意义如公式：&lt;span&gt;残差 = 真实值 - 预测值 。&lt;/span&gt;提升树即是整个迭代过程生成的回归树的累加。&lt;/p&gt;&lt;p&gt;举个例子，参考自一篇博客(参考文献 4)，该博客举出的例子较直观地展现出多棵决策树线性求和过程以及残差的意义。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;训练一个提升树模型来预测年龄：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;训练集是4个人，A，B，C，D年龄分别是14，16，24，26。样本中有购物金额、上网时长、经常到百度知道提问等特征。提升树的过程如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicXYPJorSE3fk8TsRibwPSod0S10iaNIV33FVsZkBTfa5MzbPiav9Nc57RQ/0?wx_fmt=jpeg"/&gt;&lt;/p&gt;&lt;p&gt;提升树示例&lt;/p&gt;&lt;p&gt;该例子很直观的能看到，预测值等于所有树值得累加，如A的预测值 = 树1左节点 值 15 + 树2左节点 -1 = 14。&lt;/p&gt;&lt;p&gt;因此，给定当前模型 fm-1(x)，只需要简单的拟合当前模型的残差。现将回归问题的提升树算法叙述如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicQ7JEsJicviayFHFHUYd9crgtRuoCIuIj9Q58dCCC15RkwnQYtYnvWw0w/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;提升树算法&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;三、Gradient Boosting Decision Tree：梯度提升决策树&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;提升树利用加法模型和前向分步算法实现学习的优化过程。当损失函数时平方损失和指数损失函数时，每一步的优化很简单，如平方损失函数学习残差回归树。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicRM84DwND21Mka9fLw19SVXFLbTP0iaVHkHI5qiaye4S9ehQXGUz5H4UA/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;损失函数列表&lt;/p&gt;&lt;p&gt;但对于一般的损失函数，往往每一步优化没那么容易，如上图中的绝对值损失函数和Huber损失函数。针对这一问题，Freidman提出了梯度提升算法：利用最速下降的近似方法，即利用损失函数的负梯度在当前模型的值，作为回归问题中提升树算法的残差的近似值，拟合一个回归树。(注：鄙人私以为，与其说负梯度作为残差的近似值，不如说残差是负梯度的一种特例)算法如下(截图来自《The Elements of Statistical Learning》)：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicicHiabcNfAVSaBiagcsexmpwQl21JABNe4zyPr1sP30ib89tEkFp5EU0tg/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;梯度提升决策树算法&lt;/p&gt;&lt;p&gt;&lt;strong&gt;算法步骤解释：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1、初始化，估计使损失函数极小化的常数值，它是只有一个根节点的树，即ganma是一个常数值。&lt;/p&gt;&lt;p&gt;2、&lt;/p&gt;&lt;p&gt;(a)计算损失函数的负梯度在当前模型的值，将它作为残差的估计&lt;/p&gt;&lt;p&gt;(b)估计回归树叶节点区域，以拟合残差的近似值&lt;/p&gt;&lt;p&gt;(c)利用线性搜索估计叶节点区域的值，使损失函数极小化&lt;/p&gt;&lt;p&gt;(d)更新回归树&lt;/p&gt;&lt;p&gt;3、得到输出的最终模型 f(x)&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;四、重要参数的意义及设置&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;推荐GBDT树的深度：6;(横向比较：DecisionTree/RandomForest需要把树的深度调到15或更高)&lt;/p&gt;&lt;p&gt;以下摘自知乎上的一个问答(详见参考文献8)，问题和回复都很好的阐述了这个参数设置的数学原理。&lt;/p&gt;&lt;p&gt;&lt;span&gt;【问】xgboost/gbdt在调参时为什么树的深度很少就能达到很高的精度?&lt;/span&gt;&lt;/p&gt;&lt;p&gt;用xgboost/gbdt在在调参的时候把树的最大深度调成6就有很高的精度了。但是用DecisionTree/RandomForest的时候需要把树的深度调到15或更高。用RandomForest所需要的树的深度和DecisionTree一样我能理解，因为它是用bagging的方法把DecisionTree组合在一起，相当于做了多次DecisionTree一样。但是xgboost/gbdt仅仅用梯度上升法就能用6个节点的深度达到很高的预测精度，使我惊讶到怀疑它是黑科技了。请问下xgboost/gbdt是怎么做到的?它的节点和一般的DecisionTree不同吗?&lt;/p&gt;&lt;p&gt;【答】&lt;/p&gt;&lt;p&gt;这是一个非常好的问题，题主对各算法的学习非常细致透彻，问的问题也关系到这两个算法的本质。这个问题其实并不是一个很简单的问题，我尝试用我浅薄的机器学习知识对这个问题进行回答。&lt;/p&gt;&lt;p&gt;一句话的解释，来自周志华老师的机器学习教科书( 机器学习-周志华)：Boosting主要关注降低偏差，因此Boosting能基于泛化性能相当弱的学习器构建出很强的集成;Bagging主要关注降低方差，因此它在不剪枝的决策树、神经网络等学习器上效用更为明显。&lt;/p&gt;&lt;p&gt;随机森林(random forest)和GBDT都是属于集成学习(ensemble learning)的范畴。集成学习下有两个重要的策略Bagging和Boosting。&lt;/p&gt;&lt;p&gt;Bagging算法是这样做的：每个分类器都随机从原样本中做有放回的采样，然后分别在这些采样后的样本上训练分类器，然后再把这些分类器组合起来。简单的多数投票一般就可以。其代表算法是随机森林。Boosting的意思是这样，他通过迭代地训练一系列的分类器，每个分类器采用的样本分布都和上一轮的学习结果有关。其代表算法是AdaBoost, GBDT。&lt;/p&gt;&lt;p&gt;其实就机器学习算法来说，其泛化误差可以分解为两部分，偏差(bias)和方差(variance)。这个可由下图的式子导出(这里用到了概率论公式D(X)=E(X^2)-[E(X)]^2)。偏差指的是算法的期望预测与真实预测之间的偏差程度，反应了模型本身的拟合能力;方差度量了同等大小的训练集的变动导致学习性能的变化，刻画了数据扰动所导致的影响。这个有点儿绕，不过你一定知道过拟合。&lt;/p&gt;&lt;p&gt;如下图所示，当模型越复杂时，拟合的程度就越高，模型的训练偏差就越小。但此时如果换一组数据可能模型的变化就会很大，即模型的方差很大。所以模型过于复杂的时候会导致过拟合。&lt;/p&gt;&lt;p&gt;当模型越简单时，即使我们再换一组数据，最后得出的学习器和之前的学习器的差别就不那么大，模型的方差很小。还是因为模型简单，所以偏差会很大。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibxkfadTcZgo4QZ7iabicJ3IpicXXbu83on1TdKZxENZ9vL00akphXvvCB17Gibu2eaibaiabALibayr7SG1g/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;p&gt;模型复杂度与偏差方差的关系图&lt;/p&gt;&lt;p&gt;也就是说，当我们训练一个模型时，偏差和方差都得照顾到，漏掉一个都不行。&lt;/p&gt;&lt;p&gt;对于Bagging算法来说，由于我们会并行地训练很多不同的分类器的目的就是降低这个方差(variance) ,因为采用了相互独立的基分类器多了以后，h的值自然就会靠近.所以对于每个基分类器来说，目标就是如何降低这个偏差(bias),所以我们会采用深度很深甚至不剪枝的决策树。&lt;/p&gt;&lt;p&gt;对于Boosting来说，每一步我们都会在上一轮的基础上更加拟合原数据，所以可以保证偏差(bias),所以对于每个基分类器来说，问题就在于如何选择variance更小的分类器，即更简单的分类器，所以我们选择了深度很浅的决策树。&lt;/p&gt;&lt;h3 style="border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); margin-bottom: 16px; color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal;"&gt;&lt;strong&gt;五、拓展&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;最近引起关注的一个Gradient Boosting算法：xgboost，在计算速度和准确率上，较GBDT有明显的提升。xgboost 的全称是eXtreme Gradient Boosting，它是Gradient Boosting Machine的一个c++实现，作者为正在华盛顿大学研究机器学习的大牛陈天奇 。xgboost最大的特点在于，它能够自动利用CPU的多线程进行并行，同时在算法上加以改进提高了精度。它的处女秀是Kaggle的 希格斯子信号识别竞赛，因为出众的效率与较高的预测准确度在比赛论坛中引起了参赛选手的广泛关注。值得我们在GBDT的基础上对其进一步探索学习。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;参考文献&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;1、《The Elements of Statistical Learning》&lt;/p&gt;&lt;p&gt;2、《统计学习方法》&lt;/p&gt;&lt;p&gt;3、&amp;nbsp;分类树与回归树的区别&lt;/p&gt;&lt;p&gt;4、&amp;nbsp;迭代决策树入门教程&lt;/p&gt;&lt;p&gt;5、&amp;nbsp;CTR预估中GBDT与LR融合方案&lt;/p&gt;&lt;p&gt;6、Treelink算法介绍&lt;/p&gt;&lt;p&gt;7、&amp;nbsp;为什么xgboost/gbdt在调参时为什么树的深度很少就能达到很高的精度？&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Thu, 22 Sep 2016 09:39:11 +0800</pubDate>
    </item>
    <item>
      <title>实战 | 数据建模那点事儿</title>
      <link>http://www.iwgc.cn/link/2774493</link>
      <description>&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBwqOQQBicFRFeeb57wJz3iaKCq8c5L7cZ9YAYdiaNHVp7CWF4yglw8lfow/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;作者：陈丹奕&lt;/p&gt;&lt;p&gt;&lt;span&gt;本文由 知乎 陈丹奕授权发布。&lt;/span&gt;&lt;/p&gt;&lt;p&gt;今天要说内容是建模。为啥我作为一个数学能力并不强的人要在这献丑讲建模的事呢？其实我的目的很简单，就是为了告诉大家一个事实：数据分析中的建模，并没有想象中那么高深莫测，人人都有机会做出自己的模型。&lt;/p&gt;&lt;h1 data-mce-style="text-align: center;" style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal; text-align: center;"&gt;&lt;span&gt;第一部分：数据建模理论和逻辑&lt;/span&gt;&lt;/h1&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;span&gt;&lt;strong&gt;一、从数据分析的定义开始&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;维基百科对数据分析的定义如下：&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Analysis of data&lt;/strong&gt;&amp;nbsp;is a process of inspecting, cleaning, transforming, and modeling data with the goal of discovering useful information, suggesting conclusions, and supporting decision making. Data analysis has multiple facets and approaches, encompassing diverse techniques under a variety of names, in different business, science, and social science domains.&lt;br/&gt;（来源：Data analysis&lt;em class="icon-external"&gt;&lt;/em&gt;）&lt;/p&gt;&lt;p&gt;简单翻译：数据分析是一个包含数据检验、数据清洗、数据重构，以及数据建模的过程，目的在于发现有用的信息，有建设性的结论，辅助决策的制定。数据分析有多种形式和方法，涵盖了多种技术，应用于商业、科学、社会学等多个不同的领域。&lt;/p&gt;&lt;p&gt;和上篇文章中我画的图对比一下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBa60NAZzrMsCOLB5MbLDqEbLFRMydUAnWJTibmzSdO0WUKTb72icLgO7Q/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;我在上篇文章中为了让初学者更容易走通全流程，简化了数据清洗的过程，实际上数据清洗绝非一次完成，“检验-清洗-检验”的过程可能会重复数次乃至数十次。&lt;/p&gt;&lt;p&gt;而建模呢？再次引用维基上对数据建模的定义：&lt;/p&gt;&lt;p&gt;Data modeling is a process used to define and analyze data requirements needed to support the business processes within the scope of corresponding information systems in organizations. Therefore, the process of data modeling involves professional data modelers working closely with business stakeholders, as well as potential users of the information system.（来源：Data modeling&lt;em class="icon-external"&gt;&lt;/em&gt;）&lt;br/&gt;简单翻译：数据建模是一个用于定义和分析在组织的信息系统的范围内&lt;strong&gt;支持商业流程&lt;/strong&gt;所需的数据要求的过程。因此，数据建模的过程需要专业建模师与商业人员和信息系统潜在用户的紧密合作。这段话的定义更偏向信息系统和商业数据建模，我之所以在此引用这段话，是为了明确接下来的讨论内容主要方向是商业数据分析和建模，至于科学研究方向的数据建模，不在这篇文章的讨论范围以内。&lt;/p&gt;&lt;p&gt;请注意上边这段话中的一个核心：&lt;strong&gt;支持商业流程。&lt;/strong&gt;商业数据建模，乃至商业数据分析，其最终目的都是要支持某种商业流程，要么优化原有流程，提高各部分效率；要么重构原有流程，减少步骤；要么告诉决策者，哪些流程改造方向是错误的，以避免走错路。&lt;strong&gt;最终的目标，一定是提升效率。但在不同的情况下，提升效率的方式也是不同的，因此在每个模型建立时，都需要确定其解决的具体目标问题。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;再往前走一步，数学—主要是统计学，在建模的过程中又扮演什么样的角色呢？继续引用维基：&lt;/p&gt;&lt;p&gt;Mathematical formulas or models called algorithms may be applied to the data to identify relationships among the variables, such as correlation or causation. In general terms, models may be developed to evaluate a particular variable in the data based on other variable(s) in the data, with some residual error depending on model accuracy (i.e., Data = Model + Error)（来源：Data modeling&lt;em class="icon-external"&gt;&lt;/em&gt;）&lt;/p&gt;&lt;p&gt;简单翻译：数学公式或模型称为算法，可应用于数据以确定变量之间的关系，如相关性或因果关系。在一般情况下，模型开发出来后用于评估一个特定的变量与数据中其他其他变量的关系，根据模型的准确性不同，这些关系中会包含残差（即，数据=模型+错误）&lt;/p&gt;&lt;p&gt;这段描述很明确，&lt;strong&gt;统计学在数据建模的过程中，主要用于帮助我们找出变量之间的关系，并对这种关系进行定量的描述，输出可用于数据集的算法。&lt;/strong&gt;一个好的数据模型，需要通过多次的测试和优化迭代来完成。&lt;/p&gt;&lt;p&gt;综上，给出一个我认为的“数据建模”定义：&lt;strong&gt;数据集+商业目标+算法+优化迭代= 数据建模。定义中的每一部分都必不可少。&lt;/strong&gt;&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68); font-family: &amp;#39;microsoft yahei&amp;#39;; white-space: normal;"&gt;&lt;span&gt;&lt;strong&gt;二、数据模型的建立过程&lt;/strong&gt;&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;照例，先上流程图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBvjrdAMYHXGTpibKlibcPxtzc0PMHDNIHg3VymLjFfI8Jrvn0MQlOjQ6A/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;上图的流程颜色对应数据分析全流程，为了方便大家阅读，我把全流程图再贴一次：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBa60NAZzrMsCOLB5MbLDqEbLFRMydUAnWJTibmzSdO0WUKTb72icLgO7Q/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;接下来，我重点解读明黄色（浅黄？）部分的内容：&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择变量与重构变量&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在进行建模之前，首先要考虑的是使用哪些变量来建立模型，需要从业务逻辑和数据逻辑两个方面来考虑：&lt;/p&gt;&lt;p&gt;业务逻辑：变量基于收集到的数据，而数据在收集时，会产生与业务层面相关的逻辑，比如在汽车参数中，一旦我们定义了“家用轿车”这个类别，那么无论什么品牌什么车型，“轮胎数量（不计备胎）”这个变量就有99%以上几率为4……当然在接下来的建模中，我们不会选择这个变量。这一类情况是业务知识来告诉我们哪些变量可以选择，哪些不能选择。&lt;/p&gt;&lt;p&gt;数据逻辑：通常从数据的完整性、集中度、是否与其他变量强相关（甚至有因果关系）等角度来考虑，比如某个变量在业务上很有价值，但缺失率达到90%，或者一个非布尔值变量却集中于两个值，那么这个时候我们就要考虑，加入这个变量是否对后续分析有价值。&lt;/p&gt;&lt;p&gt;我个人认为，在选择变量时，业务逻辑应该优先于数据逻辑，盖因业务逻辑是从实际情况中自然产生，而建模的结果也要反馈到实际中去，因此选择变量时，业务逻辑重要程度相对更高。&lt;/p&gt;&lt;p&gt;而在变量本身不适合直接拿来建模时，例如调查问卷中的满意度，是汉字的“不满意”“一般”“满意”，那么需要将其重构成“1”（对应不满意）“2”（对应一般）“3”（对应满意）的数字形式，便于后续建模使用。&lt;/p&gt;&lt;p&gt;除这种重构方式之外，将变量进行单独计算（如取均值）和组合计算（如A*B）也是常用的重构方法。其他的重构方法还有很多种，在此不一一阐述。&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;选择算法&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们在建模时，目标是解决商业问题，而不是为了建模而建模，故此我们需要选择适合的算法。常用建模算法包括相关、聚类、分类（决策树）、时间序列、回归、神经网络等。&lt;/p&gt;&lt;p&gt;以对消费者的建模为例，举一些场景下的常用算法对应：&lt;/p&gt;&lt;p&gt;划分消费者群体：聚类，分类；&lt;/p&gt;&lt;p&gt;购物篮分析：相关，聚类；&lt;/p&gt;&lt;p&gt;购买额预测：回归，时间序列；&lt;/p&gt;&lt;p&gt;满意度调查：回归，聚类，分类；&lt;/p&gt;&lt;p&gt;等等。&lt;/p&gt;&lt;p&gt;确定算法后，要再看一下变量是否满足算法要求，如果不满足，回到选择/重构变量，再来一遍吧。如果满足，进入下一步。&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;设定参数&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;算法选定后，需要用数据分析工具进行建模。针对不同的模型，需要调整参数，例如聚类模型中的K-means算法，需要给出希望聚成的类别数量，更进一步需要给出的起始的聚类中心和迭代次数上限。&lt;/p&gt;&lt;p&gt;这些参数在后续测试中会经过多次调整，很少有一次测试成功的情况，因此请做好心理准备。&lt;/p&gt;&lt;ul style="margin-bottom: 16px; color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; font-size: 15px; line-height: 25px; white-space: normal;" class=" list-paddingleft-2"&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;加载算法与测试结果&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;算法跑完之后，要根据算法的输出结果来确定该算法是否能够解决问题，比如K-means的结果不好，那么考虑换成系统聚类算法来解决。或者回归模型输出的结果不满足需求，考虑用时间序列来做。&lt;/p&gt;&lt;p&gt;如果不需要换算法，那么就测试一下算法输出的结果是否有提升空间，比如聚类算法中指定聚类结果包含4类人群，但发现其中的两类特征很接近，或者某一类人群没有明显特征，那么可以调整参数后再试。&lt;/p&gt;&lt;p&gt;在不断的调整参数，优化模型过程中，模型的解释能力和实用性会不断的提升。当你认为模型已经能够满足目标需求了，那就可以输出结果了。&lt;strong&gt;一个报告，一些规则，一段代码，都可能成为模型的输出。&lt;/strong&gt;在输出之后，还有最后一步：接收业务人员的反馈，看看模型是否解决了他们的问题，如果没有，回到第一步，再来一次吧少年……&lt;/p&gt;&lt;p&gt;以上，就是建模的一般过程。如果你有些地方觉得比较生涩，难以理解，也没有关系。下一篇专栏中，我将向你们介绍一个具体的数据模型，我会对建模的过程一步步进行拆解，力求简明易懂。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBnwEibic8CxuemickkvI4hcm1IN30rODvFQgNT2x1jERzypWia1QW5Riaqnw/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;h1 data-mce-style="text-align: center;" style="color: rgb(51, 51, 51); font-family: &amp;#39;microsoft yahei&amp;#39;; line-height: 25px; white-space: normal; text-align: center;"&gt;&lt;span&gt;第二部分：数据建模的应用&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;我写了个建模的流程，有过建模经验的人自然懂，没有经验的各位也不要着急，这次我以一个真实模型为例，给大家详细讲述建模的各个步骤。照例，先上流程图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBxpepZNM5T7t4WTRhCLruLknHU9gzicKzic6ic5e5oCDKIK7n3BKuGpLaA/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;大家可以看到，这个图是由我之前文章中的两张图拼合而来，而我今天讲的这个真实模型，将把图中所有的流程都走一遍，保证一个步骤都不漏。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 0：项目背景&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;话说这个项目跟我加入百度有直接关系……&lt;/p&gt;&lt;p&gt;2013年的最后一天，我结束了在三亚的假期，准备坐飞机回家，这时候接到一个知乎私信，问我对百度的一个数据科学家（其实就是数据分析师啦）职位是否感兴趣，我立刻回信，定了元旦假期以后去面试。两轮面试过后，面试官——也是我加入百度后的直属Leader——打电话给我，说他们对我的经历很满意，但是需要我给他们一份能体现建模能力的报告。&lt;/p&gt;&lt;p&gt;按说这也不是一件难事，但我翻了翻电脑后发现一个问题：我从上家公司离职时，为了装13，一份跟建模相关的报告文件都没带……最后双方商定，我有一个星期时间来做一份报告，这份报告决定了我是否能加入百度。&lt;/p&gt;&lt;p&gt;那么，是时候展示我的技术了！我的回合，抽卡！&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 1：目标确定&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;看看报告的要求：&lt;/p&gt;&lt;p&gt;&lt;em&gt;数据最好是通过抓取得来，需要用到至少一种（除描述统计以外）的建模技术，最好有数据可视化的展示&lt;/em&gt;&lt;/p&gt;&lt;p&gt;看来是道开放题，那么自然要选择一个我比较熟悉的领域，因此我选择了……《二手主机游戏交易论坛用户行为分析》&lt;/p&gt;&lt;p&gt;为啥选这个呢？你们看了我那么多的Mario图，自然知道我会选主机游戏领域，但为什么是二手？这要说到我待在国企的最后半年，那时候我一个月忙三天，剩下基本没事干，因此泡在论坛上倒卖了一段时间的二手游戏……&lt;/p&gt;&lt;p&gt;咳咳……总之，目标就确定了：&lt;strong&gt;分析某二手主机游戏交易论坛上的帖子，从中得出其用户行为的描述，为用户进行分类，输出洞察报告。&lt;/strong&gt;&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 2：数据获取&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;简单来说，就是用python写了个定向爬虫，抓了某个著名游戏论坛的二手区所有的发帖信息，包括帖子内容、发帖人信息等，基本上就是长这个样子：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBuzicFObGmLuV9AD9HypRvYV0HAHeZPyQCeTicKTVsxaQjibHkV1vuiaRnw/0?wx_fmt=png"/&gt;（打码方式比较简单粗暴，请凑合看吧……）&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 3：数据清洗&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这个模型中的数据清洗，主要是洗掉帖子中的无效信息，包括以下两类：&lt;/p&gt;&lt;p&gt;1、论坛由于其特殊性，很多人成交后会把帖子改成《已出》等标题，这一类数据需要删除：&lt;/p&gt;&lt;p&gt;2、有一部分人用直接贴图的方式放求购信息，这部分体现为只抓到图片链接，需要删除。&lt;/p&gt;&lt;p&gt;数据清洗结束了么？其实并没有，后边会再进行一轮清洗……不过到时再说。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 4：数据整理&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;用上面的那些帖子数据其实是跑不出啥结果的，我们需要把数据整理成可以进一步分析的格式。&lt;/p&gt;&lt;p&gt;首先，我们给每条帖子打标签，标签分为三类：行为类型（买 OR 卖 OR 换），目标厂商（微软 OR 索尼 OR 任天堂），目标对象（主机 OR 游戏软件）。打标签模式是”符合关键词—打相应标签“的方法，关键词表样例如下：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB9iaDUtg2I9c7vyG1VbcVzaGhODWfmNicWiaY3SgMqWBOYv3OVB6WhiaM0Q/0?wx_fmt=png"/&gt;（主机掌机那个标签后来我在实际操作时没有使用）&lt;/p&gt;&lt;p&gt;打完标签之后，会发现有很多帖子没有打上标签，原因有两种：一是关键词没有涵盖所有的产品表述（比如三公主这种昵称），二是有一部分人发的帖子跟买卖游戏无关……&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB8HRtwrJGf8RunsRMYb7zpIQlTLj2CLj34CCHsaEGdGcAt0g0PBHtdQ/0?wx_fmt=png"/&gt;这让人怎么玩……&lt;strong&gt;第二次数据清洗开始&lt;/strong&gt;，把这部分帖子也洗掉吧。&lt;/p&gt;&lt;p&gt;其次，我们用发帖用户作为视角，输出一份用户的统计表格，里边包含每个用户的发帖数、求购次数、出售次数、交换次数、每一类主机/游戏的行为次数等等，作为后续搭建用户分析模型之用。表格大概长这个样子：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBbMGOReoI8hw3wGcedatQfpvQv6Qtt8v96HqueC0PUaq2licFzYlhAWQ/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;之后这个表的列数会越来越多，因为数据重构的工作都在此表中进行。&lt;/p&gt;&lt;p&gt;整理之后，我们准备进行描述统计。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 5 &amp;amp; 6：描述统计 &amp;amp; 洞察结论&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;描述统计在这个项目中的意义在于，描述这一社区的二手游戏及主机市场的基本情况，为后续用户模型的建立提供基础信息。&lt;/p&gt;&lt;p&gt;具体如何进行统计就不说了，直接放成品图，分别是从各主机市场份额、用户相互转化情况、地域分布情况进行的洞察。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB4ribM6PjrdSEV7XXsonznPWkEh3ZO9iawp2IOpwPINey78KorK6MUeCg/0?wx_fmt=png"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBe1MLMvaicA8va0sjFZ0F4rAQkAC0Z1JqTPwiaiagRrhntbibBQSNzzJC4g/0?wx_fmt=png"/&gt;&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBwSuIiaFRPMf45OfTvXpDAyp593yZKuO8dWV3qDLrFUZ2YC8tY1ib1XDg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/strong&gt;&lt;/h2&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 7 &amp;amp; 8：选择变量 &amp;amp; 选择算法&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;因为我要研究的是这些用户与二手交易相关的行为，因此初步选择变量为发帖数量、微软主机拥有台数、索尼主机拥有台数、任天堂主机拥有台数。&lt;/p&gt;&lt;p&gt;算法上面，我们的目标是将用户分群，因此选择聚类，方法选择最简单的K-means算法。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 9 &amp;amp; 10：设定参数 &amp;amp; 加载算法&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;K-means算法除了输入变量以外，还需要设定聚类数，我们先拍脑袋聚个五类吧！&lt;/p&gt;&lt;p&gt;（别笑，实际操作中很多初始参数都是靠拍脑袋得来的，要通过结果来逐步优化）&lt;/p&gt;&lt;p&gt;看看结果：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBtHKHN1XcoiaaVdcqySHKOyFH99co0BUbRctC5cueMSlSC18Iric5qZVQ/0?wx_fmt=png"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_jpg/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBFh251HQTYUQUibd3c9BRZ9Qwhbee0BrvEKicTVkTro58jjAelnKPzrag/0?wx_fmt=jpeg"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;第一类别的用户数跟总体已经很接近了，完全没有区分度啊！&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 7‘ &amp;amp; 8’ &amp;amp; 9‘ &amp;amp; 10’ &amp;amp; 11：选择变量 &amp;amp; 选择算法 &amp;amp;设定参数 &amp;amp; 加载算法 &amp;amp;重构变量&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这一节你看标题都这么长……&lt;/p&gt;&lt;p&gt;既然我们用原始值来聚类的结果不太好，那么我把原始值重构成若干档次，比如发帖1-10的转换为1,10-50的转换为2，依次类推，再聚一次看看结果。&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBibZaARNRvicRNicLMO4P4GA5BGeAP9kjVbuc7rCL7pYy9gHFXov8ukoqg/0?wx_fmt=png"/&gt;哦哦！看上去有那么点意思了！不过有一类的数量还是有一点少，我们聚成四类试试：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB1GuKmiahhxhFz7LKpmuqIlacGLpNCD035KHwDBMQzzicAn8TZl446A1Q/0?wx_fmt=png"/&gt;哦哦，完美！ 我们运气不错，一次变量重构就输出了一个看上去还可以的模型结果，接下来去测试一下吧。&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 12：结果测试&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;测试过程中，很重要的一步是要看模型的可解释性，如果可解释性较差，那么打回重做……&lt;/p&gt;&lt;p&gt;接下来，我们看看每一类的统计数据：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBMhFh7xSXawgHExWU9wUAp1Z61S9QPAUdkMK7dIEXicibYQ11SNn8kFZw/0?wx_fmt=png"/&gt;这个表出来以后，基本上可以对我们聚类结果中的每一类人群进行解读了。结果测试通过！&lt;/p&gt;&lt;h2 style="font-size: 18px; margin-top: 16px; margin-bottom: 16px; padding-top: 10px; padding-bottom: 10px; line-height: 18px; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: rgb(238, 238, 238); color: rgb(68, 68, 68);"&gt;&lt;strong&gt;Step 13 &amp;amp; 14 &amp;amp; 15：输出规则 &amp;amp; 模型加载 &amp;amp; 报告撰写&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;这个模型不用回朔到系统中，因为仅仅是一个我们用来研究的模型而已。因此，输出规则和模型加载两步可以跳过，直接进入报告撰写。&lt;/p&gt;&lt;p&gt;聚类模型的结果可归结为下图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBla6Ria4b6TsmRI9K1M3PZaiaPEo7tQLG20q0o0ylTUu0ibSia7ibCFxGGgg/0?wx_fmt=png"/&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;眼熟不？在我的第二篇专栏文章第一份数据报告的诞生 - 一个数据分析师的自我修养&amp;nbsp;&amp;nbsp;中，我用这张图来说明了洞察结论的重要性，现在你们应该知道这张图是如何得来的了。&lt;/p&gt;&lt;p&gt;撰写报告的另外一部分，在描述统计-洞察结论的过程中已经提到了，把两部分放在一次，加上背景、研究方法等内容，就是完整的报告啦！&lt;/p&gt;&lt;p&gt;最后附送几张各类用户发帖内容中的关键词词云图：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBVErBSugSqW8u9BKpgSerzXKkic9mTWqaALbm1f7VdY0EwCfgoYgJWbA/0?wx_fmt=png"/&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIB9PZ92LrQ2crX3icibZo30Wls7pw19gt3sIRY9ya1I90v9YhflfC1vt7w/0?wx_fmt=png"/&gt;&lt;br/&gt;那么，这篇文章就到此结束了，最后的最后，公布一下我做这份报告用到的工具：&lt;/p&gt;&lt;p&gt;&lt;img src="https://images.weserv.nl/?url=mmbiz.qpic.cn/mmbiz_png/jAqr3XzCYibyuickHrXHziaJNegTkAyxKIBx9MJ4EnHZjzO2zjYIVcP0qUPqUeRWDgzTfbbLXckxOgvFBEme6J8qQ/0?wx_fmt=png"/&gt;大家可以看到，要当一个数据分析师，要用到很多类别的工具，多学一点总是没有坏处的，在此与大家共勉。&lt;/p&gt;&lt;p&gt;End.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;</description>
      <pubDate>Wed, 21 Sep 2016 09:44:21 +0800</pubDate>
    </item>
  </channel>
</rss>
